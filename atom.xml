<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WHY&#39;s Blog</title>
  
  
  <link href="https://wade9264.github.io/atom.xml" rel="self"/>
  
  <link href="https://wade9264.github.io/"/>
  <updated>2023-02-08T07:11:46.380Z</updated>
  <id>https://wade9264.github.io/</id>
  
  <author>
    <name>WHY</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>el-table底部滚动条无法拖动问题解决</title>
    <link href="https://wade9264.github.io/posts/5f510e8f.html"/>
    <id>https://wade9264.github.io/posts/5f510e8f.html</id>
    <published>2023-02-08T06:57:00.000Z</published>
    <updated>2023-02-08T07:11:46.380Z</updated>
    
    <content type="html"><![CDATA[<p>el-table 中的 el-table-column 提供了一个 fixed 属性设置固定列，但是设置了之后发现表格的滚动条无法拖动了，通过 F12 定位到页面元素发现是滚动条被固定列生成的元素给覆盖了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">  <span class="selector-class">.el-table</span> &#123;</span><br><span class="line">    <span class="selector-class">.el-table__fixed</span> &#123; // 左固定列</span><br><span class="line">      <span class="attribute">height</span>: auto <span class="meta">!important</span>;</span><br><span class="line">      <span class="attribute">bottom</span>: <span class="number">18px</span>; // 改为自动高度后，设置与父容器的底部距离，高度会动态改变，值可以设置比滚动条的高度稍微大一些</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.el-table__fixed-right</span> &#123; // 右固定列</span><br><span class="line">      <span class="attribute">height</span>: auto <span class="meta">!important</span>;</span><br><span class="line">      <span class="attribute">bottom</span>: <span class="number">18px</span>; // 改为自动高度后，设置与父容器的底部距离，高度会动态改变，值可以设置比滚动条的高度稍微大一些</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-class">.el-table--scrollable-x</span> <span class="selector-class">.el-table__body-wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;el-table 中的 el-table-column 提供了一个 fixed 属性设置固定列，但是设置了之后发现表格的滚动条无法拖动了，通过 F12 定位到页面元素发现是滚动条被固定列生成的元素给覆盖了。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在Vue中实现拖拽功能</title>
    <link href="https://wade9264.github.io/posts/63b8f629.html"/>
    <id>https://wade9264.github.io/posts/63b8f629.html</id>
    <published>2023-02-06T07:47:23.000Z</published>
    <updated>2023-02-09T14:22:58.847Z</updated>
    
    
    
    
    <category term="Vue" scheme="https://wade9264.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://wade9264.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>使用watermark.js给网页添加水印</title>
    <link href="https://wade9264.github.io/posts/14824453.html"/>
    <id>https://wade9264.github.io/posts/14824453.html</id>
    <published>2023-02-06T07:41:26.000Z</published>
    <updated>2023-02-09T14:21:52.859Z</updated>
    
    
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器调用摄像头获取媒体流，并实现拍照功能</title>
    <link href="https://wade9264.github.io/posts/67c97ff3.html"/>
    <id>https://wade9264.github.io/posts/67c97ff3.html</id>
    <published>2022-12-30T11:13:48.000Z</published>
    <updated>2023-02-02T09:25:52.529Z</updated>
    
    
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端实现Excel表格上传解析与导出</title>
    <link href="https://wade9264.github.io/posts/a913bf31.html"/>
    <id>https://wade9264.github.io/posts/a913bf31.html</id>
    <published>2022-12-16T10:32:16.000Z</published>
    <updated>2023-02-10T11:10:50.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求场景描述"><a href="#需求场景描述" class="headerlink" title="需求场景描述"></a>需求场景描述</h2><p>文件的导入导出是非常常见的需求功能，实践中许多时候，是调用接口实现导入导出的，也就是说将文件导入导出的逻辑交给后端去做了。但是，有时候也需要前端自行实现导入导出，尤其是管理系统会经常遇到导入 Excel 文件的操作，有些场景要求用户上传完后，还可以预览展示，在线修改，改完可以下载，也可以将数据给到服务端。</p><h2 id="安装-xlsx"><a href="#安装-xlsx" class="headerlink" title="安装 xlsx"></a>安装 xlsx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xlsx --save-dev</span><br></pre></td></tr></table></figure><h2 id="引入插件"><a href="#引入插件" class="headerlink" title="引入插件"></a>引入插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import * as xlsx from &quot;xlsx/xlsx.mjs&quot;;</span><br></pre></td></tr></table></figure><h2 id="读取-excel-表格"><a href="#读取-excel-表格" class="headerlink" title="读取 excel 表格"></a>读取 excel 表格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input</span><br><span class="line">     type=&quot;file&quot;</span><br><span class="line">     ref=&quot;upload&quot;</span><br><span class="line">     accept=&quot;.xls,.xlsx&quot;</span><br><span class="line">     @change=&quot;readExcel&quot;</span><br><span class="line">     class=&quot;upload-button&quot;</span><br><span class="line">   /&gt;</span><br><span class="line">   &lt;span class=&quot;tips&quot;&gt;支持扩展名：.xls .xlsx，且不超过100M&lt;/span&gt;</span><br><span class="line">&lt;/tamplate&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        excelData:&#x27;&#x27;,</span><br><span class="line">      &#125;;</span><br><span class="line">readExcel (e) &#123;</span><br><span class="line">          console.log(e)</span><br><span class="line">        const files = e.target.files;</span><br><span class="line"></span><br><span class="line">        const fileReader = new FileReader();</span><br><span class="line">        fileReader.onload = (ev) =&gt; &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                const data = ev.target.result</span><br><span class="line">                const workbook = XLSX.read(data, &#123;</span><br><span class="line">                    type: &#x27;binary&#x27;</span><br><span class="line">                &#125;) // 读取数据</span><br><span class="line">                const wsname = workbook.SheetNames[0] // 取第一张表</span><br><span class="line">                const ws = XLSX.utils.sheet_to_json(workbook.Sheets[wsname]) // 生成json表格内容</span><br><span class="line">                // const ws1 = XLSX.utils.sheet_to_slk(workbook.Sheets[wsname]) // 输出表格对应位置是什么值</span><br><span class="line">                // const ws2 = XLSX.utils.sheet_to_html(workbook.Sheets[wsname]) // 生成HTML输出</span><br><span class="line">                // const ws3 = XLSX.utils.sheet_to_csv(workbook.Sheets[wsname]) // 生成分隔符分隔值输出</span><br><span class="line">                // const ws4 = XLSX.utils.sheet_to_formulae(workbook.Sheets[wsname]) // 生成公式列表（具有值回退）</span><br><span class="line">                // const ws5 = XLSX.utils.sheet_to_txt(workbook.Sheets[wsname]) // 生成UTF16格式的文本</span><br><span class="line">                // const ws = xlsx.utils.sheet_to_json(workbook.Sheets[wsname], &#123;</span><br><span class="line">          //   header: 1,</span><br><span class="line">          //   defval: &quot;&quot;,</span><br><span class="line">          // &#125;); // 生成json表格内容</span><br><span class="line">                console.log(ws)</span><br><span class="line"></span><br><span class="line">                this.excelData = [] // 清空接收数据</span><br><span class="line">                if(this.excelData.length) &#123;</span><br><span class="line">                    this.fileName = files[0].name;</span><br><span class="line">                &#125;</span><br><span class="line">                &#125; catch (e) &#123;</span><br><span class="line"></span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fileReader.readAsBinaryString(files[0]);</span><br><span class="line">      &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="导出-excel"><a href="#导出-excel" class="headerlink" title="导出 excel"></a>导出 excel</h2><p>1.引入依赖：npm install <a href="mailto:&#x78;&#x6c;&#115;&#120;&#x40;&#x30;&#46;&#x31;&#55;&#46;&#x30;">&#x78;&#x6c;&#115;&#120;&#x40;&#x30;&#46;&#x31;&#55;&#46;&#x30;</a> <a href="mailto:&#102;&#105;&#x6c;&#x65;&#45;&#115;&#97;&#x76;&#x65;&#x72;&#64;&#50;&#x2e;&#48;&#46;&#53;">&#102;&#105;&#x6c;&#x65;&#45;&#115;&#97;&#x76;&#x65;&#x72;&#64;&#50;&#x2e;&#48;&#46;&#53;</a> –save</p><p>注：xlsx 要指定版本不然会报错</p><p>2.封装导出的 js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&quot;file-saver&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">XLSX</span> <span class="keyword">from</span> <span class="string">&quot;xlsx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">xlsx</span>(<span class="params">json, fields, filename = <span class="string">&quot;.xlsx&quot;</span></span>) &#123;</span><br><span class="line">  <span class="comment">//导出xlsx</span></span><br><span class="line">  json.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> item) &#123;</span><br><span class="line">      <span class="keyword">if</span> (fields.<span class="title function_">hasOwnProperty</span>(i)) &#123;</span><br><span class="line">        item[fields[i]] = item[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">delete</span> item[i]; <span class="comment">//删除原先的对象属性</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> sheetName = filename; <span class="comment">//excel的文件名称</span></span><br><span class="line">  <span class="keyword">let</span> wb = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">book_new</span>(); <span class="comment">//工作簿对象包含一SheetNames数组，以及一个表对象映射表名称到表对象。XLSX.utils.book_new实用函数创建一个新的工作簿对象。</span></span><br><span class="line">  <span class="keyword">let</span> ws = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">json_to_sheet</span>(json, &#123; <span class="attr">header</span>: <span class="title class_">Object</span>.<span class="title function_">values</span>(fields) &#125;); <span class="comment">//将JS对象数组转换为工作表。</span></span><br><span class="line">  wb.<span class="property">SheetNames</span>.<span class="title function_">push</span>(sheetName);</span><br><span class="line">  wb.<span class="property">Sheets</span>[sheetName] = ws;</span><br><span class="line">  <span class="keyword">const</span> defaultCellStyle = &#123;</span><br><span class="line">    <span class="attr">font</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;Verdana&quot;</span>, <span class="attr">sz</span>: <span class="number">13</span>, <span class="attr">color</span>: <span class="string">&quot;FF00FF88&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">fill</span>: &#123; <span class="attr">fgColor</span>: &#123; <span class="attr">rgb</span>: <span class="string">&quot;FFFFAA00&quot;</span> &#125; &#125;,</span><br><span class="line">  &#125;; <span class="comment">//设置表格的样式</span></span><br><span class="line">  <span class="keyword">let</span> wopts = &#123;</span><br><span class="line">    <span class="attr">bookType</span>: <span class="string">&quot;xlsx&quot;</span>,</span><br><span class="line">    <span class="attr">bookSST</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;binary&quot;</span>,</span><br><span class="line">    <span class="attr">cellStyles</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">defaultCellStyle</span>: defaultCellStyle,</span><br><span class="line">    <span class="attr">showGridLines</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;; <span class="comment">//写入的样式</span></span><br><span class="line">  <span class="keyword">let</span> wbout = <span class="variable constant_">XLSX</span>.<span class="title function_">write</span>(wb, wopts);</span><br><span class="line">  <span class="keyword">let</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="title function_">s2ab</span>(wbout)], &#123; <span class="attr">type</span>: <span class="string">&quot;application/octet-stream&quot;</span> &#125;);</span><br><span class="line">  fs.<span class="title function_">saveAs</span>(blob, filename + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">s2ab</span> = (<span class="params">s</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> buf;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">ArrayBuffer</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(s.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i != s.<span class="property">length</span>; ++i) view[i] = s.<span class="title function_">charCodeAt</span>(i) &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    buf = <span class="keyword">new</span> <span class="title class_">Array</span>(s.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i != s.<span class="property">length</span>; ++i) buf[i] = s.<span class="title function_">charCodeAt</span>(i) &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3.在用导出的文件里引入 xlsx.js 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div&gt;&lt;el-button type=&quot;success&quot; @click=&quot;outExcel&quot;&gt;导出excel&lt;/el-button&gt;&lt;/div&gt;</span><br><span class="line">    &lt;el-table :data=&quot;jsonData&quot; stripe style=&quot;width: 100%&quot;&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;id&quot; label=&quot;学号&quot; width=&quot;180&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;180&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;age&quot; label=&quot;年龄&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;classes&quot; label=&quot;学院&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; xlsx &#125; from &quot;./utils/xlsx&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      jsonData: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;1&quot;,</span><br><span class="line">          name: &quot;小智&quot;,</span><br><span class="line">          age: 18,</span><br><span class="line">          classes: &quot;商学院&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;2&quot;,</span><br><span class="line">          name: &quot;小白&quot;,</span><br><span class="line">          age: 19,</span><br><span class="line">          classes: &quot;商学院&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;3&quot;,</span><br><span class="line">          name: &quot;小蓝&quot;,</span><br><span class="line">          age: 12,</span><br><span class="line">          classes: &quot;商学院&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;4&quot;,</span><br><span class="line">          name: &quot;小花&quot;,</span><br><span class="line">          age: 14,</span><br><span class="line">          classes: &quot;商学院&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;5&quot;,</span><br><span class="line">          name: &quot;小粉&quot;,</span><br><span class="line">          age: 15,</span><br><span class="line">          classes: &quot;商学院&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;6&quot;,</span><br><span class="line">          name: &quot;小黄&quot;,</span><br><span class="line">          age: 16,</span><br><span class="line">          classes: &quot;商学院&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;7&quot;,</span><br><span class="line">          name: &quot;小红&quot;,</span><br><span class="line">          age: 17,</span><br><span class="line">          classes: &quot;商学院&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;8&quot;,</span><br><span class="line">          name: &quot;小黑&quot;,</span><br><span class="line">          age: 19,</span><br><span class="line">          classes: &quot;商学院&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      listHander: &#123;</span><br><span class="line">        id: &quot;学号&quot;,</span><br><span class="line">        name: &quot;姓名&quot;,</span><br><span class="line">        age: &quot;年龄&quot;,</span><br><span class="line">        classes: &quot;学院&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    outExcel() &#123;</span><br><span class="line">      // this.jsonData是要导出的数据内容（表格里的内容），</span><br><span class="line">      // this.listHander对应要导出内容的表头</span><br><span class="line">      // 学生：指向的是excel文件名</span><br><span class="line">      xlsx(this.jsonData, this.listHander, &quot;学生&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;需求场景描述&quot;&gt;&lt;a href=&quot;#需求场景描述&quot; class=&quot;headerlink&quot; title=&quot;需求场景描述&quot;&gt;&lt;/a&gt;需求场景描述&lt;/h2&gt;&lt;p&gt;文件的导入导出是非常常见的需求功能，实践中许多时候，是调用接口实现导入导出的，也就是说将文件导入导出的逻辑交</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://wade9264.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/tags/JavaScript/"/>
    
    <category term="Vue" scheme="https://wade9264.github.io/tags/Vue/"/>
    
    <category term="Excel" scheme="https://wade9264.github.io/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket学习笔记</title>
    <link href="https://wade9264.github.io/posts/ce1ea377.html"/>
    <id>https://wade9264.github.io/posts/ce1ea377.html</id>
    <published>2022-11-03T14:36:15.000Z</published>
    <updated>2023-02-09T14:24:07.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要-WebSocket-？"><a href="#为什么需要-WebSocket-？" class="headerlink" title="为什么需要 WebSocket ？"></a>为什么需要 WebSocket ？</h2><p>WebSocket 与 http 一样，也是一种网络传输协。那么有 http 协议了为什么还需要 webSocket 呢？</p><blockquote><p>HTTP 中，通信只能由客户端向服务端发起请求。<br>WebSocket，通信既可以从服务端发起请求，也能从客户端发起请求。</p></blockquote><p>HTTP 协议做不到服务器主动向客户端推送信息。这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。传统的方式是用 Ajax 轮询，就是在特定的时间间隔，浏览器向服务器发送请求，这样明显浪费资源。</p><h2 id="WebSocket-简介"><a href="#WebSocket-简介" class="headerlink" title="WebSocket 简介"></a>WebSocket 简介</h2><blockquote><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。<br>允许服务端主动向客户端推送数据，浏览器和服务器只需要一次握手，两者之间就直接可以创建持久性的连接，进行双向数据传输</p></blockquote><p><img src="https://wade1999-images-1307558348.cos.ap-shanghai.myqcloud.com/20210618091522653.png" alt="WebSocket"></p><p>浏览器发起 WebSocket 连接请求，连接建立起来之后，服务端和客户端就可以通过 TCP 连接直接交换数据。<br>连接之后 通过 send（）方法发送数据，通过 onmessage 事件来接受服务器返回的数据。</p><h2 id="WebSocket-特点"><a href="#WebSocket-特点" class="headerlink" title="WebSocket 特点"></a>WebSocket 特点</h2><ol><li>通信可以由客户端和服务端双向发送</li><li>建立在 TCP 链接之上，服务端比较容易实现</li><li>与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器</li><li>数据格式比较轻量，性能开销小，通信高效。</li><li>可以发送文本，也可以发送二进制数据</li><li>没有同源限制，客户端可以与任意服务器通信</li><li>协议标识符是 ws（如果加密，则为 wss），服务器网址就是 URL</li></ol><h2 id="WebSocket-属性方法"><a href="#WebSocket-属性方法" class="headerlink" title="WebSocket 属性方法"></a>WebSocket 属性方法</h2><table><thead><tr><th>属性 &amp; 方法</th><th>说明</th></tr></thead><tbody><tr><td>onopen</td><td>连接成功后的回调</td></tr><tr><td>onclose</td><td>连接关闭后的回调</td></tr><tr><td>onerror</td><td>连接失败后的回调</td></tr><tr><td>bufferedAmount</td><td>检查传输数据的大小，当客户端传输大量数据时使用避免网络饱和</td></tr><tr><td>binaryType</td><td>使用二进制的数据类型连接</td></tr><tr><td>protocol</td><td>让服务端知道客户端使用的 WebSocket 协议，可以为空</td></tr><tr><td>url</td><td>WebSocket 的绝对路径</td></tr><tr><td>readyState</td><td>WebSocket 的连接状态<br>0:CONNECTING; 1:OPEN; 2:CLOSING; 3:CLOSED</td></tr><tr><td>close()</td><td>关闭当前连接</td></tr><tr><td>send(data)</td><td>向服务器发送数据</td></tr></tbody></table><h2 id="WebSocket-前端使用"><a href="#WebSocket-前端使用" class="headerlink" title="WebSocket 前端使用"></a>WebSocket 前端使用</h2><blockquote><p><strong>WebSocket(url[, protocols])</strong><br>url: WebSocket API URL,URL 之前需要添加 ws://或者 wss://（类似 http://、https://）<br>protocol: 与服务端定义的协议名称相同，协议的参数例如 XMPP（Extensible Messaging and Presence Protocol）、SOAP（Simple Object Access Protocol）或者自定义协议。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先握手，并查看客户端的浏览器是否支持WebSocket协议</span></span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;wss://echo.websocket.org&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接发生错误的回调方法</span></span><br><span class="line">ws.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;WebSocket连接发生错误&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接成功建立的回调方法</span></span><br><span class="line">ws.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;WebSocket连接成功&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收到消息的回调方法，websocket的controller里的onMessage方法session_to传过来的值</span></span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(event.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接关闭的回调方法</span></span><br><span class="line">ws.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;WebSocket连接关闭&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onbeforeunload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  ws.<span class="title function_">close</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Vue-封装-WebSocket"><a href="#Vue-封装-WebSocket" class="headerlink" title="Vue 封装 WebSocket"></a>Vue 封装 WebSocket</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Socket</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> setIntervalWesocketPush = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> url = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reconnectionNum = <span class="number">0</span>; <span class="comment">// 重连次数</span></span><br><span class="line"><span class="keyword">const</span> limitReconnectionNum = <span class="number">5</span>; <span class="comment">// 最大重连次数</span></span><br><span class="line"><span class="comment">// 建立连接</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createSocket</span>(<span class="params">urls</span>) &#123;</span><br><span class="line">  url = urls;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Socket</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;建立websocket连接&quot;</span>);</span><br><span class="line">    <span class="built_in">clearInterval</span>(setIntervalWesocketPush);</span><br><span class="line">    <span class="title class_">Socket</span> = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(urls);</span><br><span class="line">    <span class="title class_">Socket</span>.<span class="property">onopen</span> = onopenWS;</span><br><span class="line">    <span class="title class_">Socket</span>.<span class="property">onmessage</span> = im_msg;</span><br><span class="line">    <span class="title class_">Socket</span>.<span class="property">onerror</span> = onerrorWS;</span><br><span class="line">    <span class="title class_">Socket</span>.<span class="property">onclose</span> = oncloseWS;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(setIntervalWesocketPush);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;websocket已连接&quot;</span>);</span><br><span class="line">    <span class="title function_">onopenWS</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打开WS之后发送心跳</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">onopenWS</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">clearInterval</span>(setIntervalWesocketPush);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已连接&quot;</span>);</span><br><span class="line">  <span class="title function_">sendPing</span>(); <span class="comment">// 发送心跳</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 连接失败重连</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">onerrorWS</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接失败&quot;</span>);</span><br><span class="line">  <span class="built_in">clearInterval</span>(setIntervalWesocketPush);</span><br><span class="line">  <span class="title class_">Socket</span>.<span class="title function_">close</span>();</span><br><span class="line">  <span class="title class_">Socket</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">// createSocket(url) // 重连</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// WS数据接收统一处理</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">im_msg</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&quot;im_msg&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">detail</span>: &#123;</span><br><span class="line">        <span class="attr">data</span>: e,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 发送数据 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sendWSPush</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Socket</span> !== <span class="literal">null</span> &amp;&amp; <span class="title class_">Socket</span>.<span class="property">readyState</span> === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="title class_">Socket</span>.<span class="title function_">close</span>();</span><br><span class="line">    <span class="title function_">createSocket</span>(url); <span class="comment">// 重连</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Socket</span>.<span class="property">readyState</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="title class_">Socket</span>.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Socket</span>.<span class="property">readyState</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Socket</span>.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 关闭WS */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">oncloseWS</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">clearInterval</span>(setIntervalWesocketPush);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;websocket已断开&quot;</span>);</span><br><span class="line">  setIntervalWesocketPush = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    reconnectionNum++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;重连中&quot;</span>, reconnectionNum);</span><br><span class="line">    <span class="title class_">Socket</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (reconnectionNum &gt; limitReconnectionNum) &#123;</span><br><span class="line">      <span class="title class_">Socket</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="built_in">clearInterval</span>(setIntervalWesocketPush);</span><br><span class="line">      reconnectionNum = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">createSocket</span>(url); <span class="comment">// 重连</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 发送心跳 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sendPing</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Socket</span>.<span class="title function_">send</span>(<span class="string">&quot;ping&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;心跳包发送成功&quot;</span>);</span><br><span class="line">  setIntervalWesocketPush = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接状态检测中&quot;</span>);</span><br><span class="line">    <span class="title class_">Socket</span>.<span class="title function_">send</span>(<span class="string">&quot;ping&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Node-js-实现-WebSocket"><a href="#Node-js-实现-WebSocket" class="headerlink" title="Node.js 实现 WebSocket"></a>Node.js 实现 WebSocket</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ws = <span class="built_in">require</span>(<span class="string">&quot;ws&quot;</span>); <span class="comment">//引入websocket模块</span></span><br><span class="line"><span class="keyword">let</span> uuid = <span class="built_in">require</span>(<span class="string">&quot;uuid&quot;</span>); <span class="comment">//引入创建唯一id模块</span></span><br><span class="line"><span class="keyword">let</span> socketServer = ws.<span class="property">Server</span>;</span><br><span class="line"><span class="keyword">let</span> clientIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> wss = <span class="keyword">new</span> <span class="title function_">socketServer</span>(&#123; <span class="attr">port</span>: <span class="number">8090</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务启动, http://127.0.0.1:8090&quot;</span>);</span><br><span class="line">&#125;); <span class="comment">//创建websocketServer实例监听8090端口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clients = []; <span class="comment">//创建客户端列表，用于保存客户端及相关连接信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 广播所有客户端消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &#123;<span class="type">String</span>&#125; type     广播方式(admin为系统消息，user为用户消息)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &#123;<span class="type">String</span>&#125; message  消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &#123;<span class="type">String</span>&#125; nickname 用户昵称，广播方式为admin时可以不存在</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">broadcastSend</span>(<span class="params">type, message, nickname</span>) &#123;</span><br><span class="line">  clients.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">v, i</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (v.<span class="property">ws</span>.<span class="property">readyState</span> === ws.<span class="property">OPEN</span>) &#123;</span><br><span class="line">      v.<span class="property">ws</span>.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="title class_">Id</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="title class_">Equipment</span>: <span class="string">&quot;X1&quot;</span>,</span><br><span class="line">  <span class="title class_">EquipmentName</span>: <span class="string">&quot;里氏硬度计08&quot;</span>,</span><br><span class="line">  <span class="title class_">Ip</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="title class_">Code</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="title class_">Isok</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="title class_">Msg</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="title class_">BarCode</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="title class_">EndTime</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="title class_">StartTime</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="title class_">IsData</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="title class_">Obj</span>: &#123;</span><br><span class="line">    硬度值: <span class="number">50</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//监听连接</span></span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="keyword">function</span> (<span class="params">ws</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> client_uuid = uuid.<span class="title function_">v4</span>();</span><br><span class="line">  <span class="keyword">let</span> nickname = <span class="string">`AnonymousUser<span class="subst">$&#123;clientIndex++&#125;</span>`</span>;</span><br><span class="line">  clients.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: client_uuid,</span><br><span class="line">    <span class="attr">ws</span>: ws,</span><br><span class="line">    <span class="attr">nickname</span>: nickname,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 关闭服务，从客户端监听列表删除</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">closeSocket</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; clients.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (clients[i].<span class="property">id</span> == client_uuid) &#123;</span><br><span class="line">        <span class="keyword">let</span> disconnect_message = <span class="string">`<span class="subst">$&#123;nickname&#125;</span> has disconnected`</span>;</span><br><span class="line">        <span class="title function_">broadcastSend</span>(<span class="string">&quot;notification&quot;</span>, disconnect_message, nickname);</span><br><span class="line">        clients.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//无客户端时</span></span><br><span class="line">    <span class="keyword">if</span> (clients.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;无客户端连接&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*监听消息*/</span></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = message.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">JSON</span>.<span class="title function_">parse</span>(msg).<span class="property">Type</span> !== <span class="string">&quot;ping&quot;</span>) &#123;</span><br><span class="line">      <span class="title function_">broadcastSend</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;接收成功&quot;</span>, nickname);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">/*监听断开连接*/</span></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&quot;close&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">closeSocket</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么需要-WebSocket-？&quot;&gt;&lt;a href=&quot;#为什么需要-WebSocket-？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要 WebSocket ？&quot;&gt;&lt;/a&gt;为什么需要 WebSocket ？&lt;/h2&gt;&lt;p&gt;WebSocket </summary>
      
    
    
    
    <category term="学习笔记" scheme="https://wade9264.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/tags/JavaScript/"/>
    
    <category term="WebSocket" scheme="https://wade9264.github.io/tags/WebSocket/"/>
    
    <category term="Node.js" scheme="https://wade9264.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>在网页中预览zip压缩包中的文件</title>
    <link href="https://wade9264.github.io/posts/ba0bb0.html"/>
    <id>https://wade9264.github.io/posts/ba0bb0.html</id>
    <published>2022-07-01T10:51:27.000Z</published>
    <updated>2023-02-09T14:22:19.268Z</updated>
    
    
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>通过Canvas实现图片压缩功能</title>
    <link href="https://wade9264.github.io/posts/90124800.html"/>
    <id>https://wade9264.github.io/posts/90124800.html</id>
    <published>2022-06-27T10:36:41.000Z</published>
    <updated>2023-02-09T14:24:24.596Z</updated>
    
    
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/tags/JavaScript/"/>
    
    <category term="Canvas" scheme="https://wade9264.github.io/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>前端实现图片批量下载、并打包成压缩包</title>
    <link href="https://wade9264.github.io/posts/a8a74f38.html"/>
    <id>https://wade9264.github.io/posts/a8a74f38.html</id>
    <published>2022-06-22T11:34:09.000Z</published>
    <updated>2023-02-09T14:22:33.036Z</updated>
    
    
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>将DOM元素保存为图片</title>
    <link href="https://wade9264.github.io/posts/eb575759.html"/>
    <id>https://wade9264.github.io/posts/eb575759.html</id>
    <published>2022-06-21T08:23:35.000Z</published>
    <updated>2023-02-09T14:21:12.699Z</updated>
    
    <content type="html"><![CDATA[<a class="tag-Link" target="_blank" href="https://github.com/owen0o0/getFavicon"><div class="tag-link-tips">引用站外地址</div><div class="tag-link-bottom"><div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/github.com/owen0o0/getFavicon.png);"></div><div class="tag-link-right"><div class="tag-link-title">获取网站的Favicon图标并显示在你的网页上</div><div class="tag-link-sitename">owen0o0</div></div><i class="fa-solid fa-angle-right"></i></div></a>]]></content>
    
    
      
      
    <summary type="html">&lt;a class=&quot;tag-Link&quot; target=&quot;_blank&quot; href=&quot;https://github.com/owen0o0/getFavicon&quot;&gt;
	&lt;div class=&quot;tag-link-tips&quot;&gt;引用站外地址&lt;/div&gt;
	&lt;div class=&quot;tag-</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue添加进入、离开、列表过渡动画</title>
    <link href="https://wade9264.github.io/posts/fdb7b858.html"/>
    <id>https://wade9264.github.io/posts/fdb7b858.html</id>
    <published>2022-06-03T14:10:33.000Z</published>
    <updated>2023-02-09T14:23:57.500Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>官方文档: <a href="https://v2.cn.vuejs.org/v2/guide/transitions.html">https://v2.cn.vuejs.org/v2/guide/transitions.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;官方文档: &lt;a href=&quot;https://v2.cn.vuejs.org/v2/guide/transitions.html&quot;&gt;https://v2.cn.vuejs.org/v2/guide/transitions.html&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Vue" scheme="https://wade9264.github.io/categories/Vue/"/>
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/tags/JavaScript/"/>
    
    <category term="Vue" scheme="https://wade9264.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>通过Highcharts制作简易甘特图</title>
    <link href="https://wade9264.github.io/posts/90077f97.html"/>
    <id>https://wade9264.github.io/posts/90077f97.html</id>
    <published>2022-05-14T14:34:37.000Z</published>
    <updated>2023-02-09T14:22:06.373Z</updated>
    
    
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/tags/JavaScript/"/>
    
    <category term="Highcharts" scheme="https://wade9264.github.io/tags/Highcharts/"/>
    
  </entry>
  
  <entry>
    <title>使用Node.js编写爬虫程序</title>
    <link href="https://wade9264.github.io/posts/f9f25371.html"/>
    <id>https://wade9264.github.io/posts/f9f25371.html</id>
    <published>2022-04-16T12:11:54.000Z</published>
    <updated>2023-02-09T14:21:39.383Z</updated>
    
    
    
    
    <category term="Node.js" scheme="https://wade9264.github.io/categories/Node-js/"/>
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/tags/JavaScript/"/>
    
    <category term="Node.js" scheme="https://wade9264.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>JS在循环遍历时按同步顺序依次执行异步操作</title>
    <link href="https://wade9264.github.io/posts/7a3e4b9e.html"/>
    <id>https://wade9264.github.io/posts/7a3e4b9e.html</id>
    <published>2022-04-15T11:52:04.000Z</published>
    <updated>2023-02-09T14:23:31.603Z</updated>
    
    
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>在JavaScript中实现sleep睡眠函数</title>
    <link href="https://wade9264.github.io/posts/b0c81bfe.html"/>
    <id>https://wade9264.github.io/posts/b0c81bfe.html</id>
    <published>2022-04-15T10:29:05.000Z</published>
    <updated>2023-02-09T14:23:37.699Z</updated>
    
    
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>&lt;el-form&gt;根据选择条件动态控制表单必填项</title>
    <link href="https://wade9264.github.io/posts/a086744a.html"/>
    <id>https://wade9264.github.io/posts/a086744a.html</id>
    <published>2022-04-12T13:44:13.000Z</published>
    <updated>2023-02-02T10:41:04.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="页面效果"><a href="#页面效果" class="headerlink" title="页面效果"></a>页面效果</h2><blockquote><p>当【来款方式】= 银行来款，【来款银行】必填，选择其他选项，非必填。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200605181354448.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200605181415889.png" alt="在这里插入图片描述"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote><p>rules 判断要写在 el-form-item 中。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;来款方式&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;fIncomeWay&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">eIncomeWay</span> <span class="attr">v-model</span>=<span class="string">&quot;form.fIncomeWay&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;来款银行&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">&quot;fOppositeBank&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:rules</span>=<span class="string">&quot;form.fIncomeWay == 726 ? rules.fOppositeBank : [&#123;required: false&#125;]&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-autocomplete</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;inline-input&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;form.fOppositeBank&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:fetch-suggestions</span>=<span class="string">&quot;queryBankSearchAsync&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">value-key</span>=<span class="string">&quot;fOppositeBank&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:trigger-on-focus</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:debounce</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;请输入来款银行&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:maxlength</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">el-autocomplete</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line"> <span class="attr">fIncomeWay</span>: [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="attr">message</span>: <span class="string">&quot;请选择来款方式&quot;</span>,</span><br><span class="line">     <span class="attr">trigger</span>: [<span class="string">&quot;blur&quot;</span>, <span class="string">&quot;change&quot;</span>]</span><br><span class="line">   &#125;</span><br><span class="line"> ],</span><br><span class="line"> <span class="attr">fOppositeBank</span>: [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="attr">message</span>: <span class="string">&quot;请输入来款银行&quot;</span>,</span><br><span class="line">     <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;页面效果&quot;&gt;&lt;a href=&quot;#页面效果&quot; class=&quot;headerlink&quot; title=&quot;页面效果&quot;&gt;&lt;/a&gt;页面效果&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;当【来款方式】= 银行来款，【来款银行】必填，选择其他选项，非必填。&lt;/p&gt;
&lt;/blockquo</summary>
      
    
    
    
    <category term="Element" scheme="https://wade9264.github.io/categories/Element/"/>
    
    
    <category term="Vue" scheme="https://wade9264.github.io/tags/Vue/"/>
    
    <category term="Element" scheme="https://wade9264.github.io/tags/Element/"/>
    
  </entry>
  
  <entry>
    <title>将一维数组按指定长度转为二维数组</title>
    <link href="https://wade9264.github.io/posts/bed71315.html"/>
    <id>https://wade9264.github.io/posts/bed71315.html</id>
    <published>2022-04-12T07:52:06.000Z</published>
    <updated>2023-02-09T14:21:05.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义转换函数"><a href="#定义转换函数" class="headerlink" title="定义转换函数"></a>定义转换函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pages</span>(<span class="params">arr, len</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> pages = [];</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> page = <span class="title class_">Math</span>.<span class="title function_">floor</span>(index / len);</span><br><span class="line">    <span class="keyword">if</span> (!pages[page]) &#123;</span><br><span class="line">      pages[page] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    pages[page].<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> pages;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pages</span>(arr, <span class="number">3</span>)); <span class="comment">// [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pages</span>(arr, <span class="number">8</span>)); <span class="comment">// [[1, 2, 3, 4, 5, 6, 7, 8], [9]]</span></span><br></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>略。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定义转换函数&quot;&gt;&lt;a href=&quot;#定义转换函数&quot; class=&quot;headerlink&quot; title=&quot;定义转换函数&quot;&gt;&lt;/a&gt;定义转换函数&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://wade9264.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>文字过长超出时显示省略号</title>
    <link href="https://wade9264.github.io/posts/38c6db38.html"/>
    <id>https://wade9264.github.io/posts/38c6db38.html</id>
    <published>2022-03-21T06:57:28.000Z</published>
    <updated>2023-02-09T14:22:13.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一行超出显示省略号"><a href="#一行超出显示省略号" class="headerlink" title="一行超出显示省略号"></a>一行超出显示省略号</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure><style>.test1{width: 200px;background: var(--hl-bg);border: 1px solid var(--heo-fontcolor);overflow: hidden;white-space: nowrap;text-overflow: ellipsis;}</style><div class="test1">效果：超出显示省略号超出显示省略号超出显示省略号超出显示省略号超出显示省略号超出显示省略号超出显示省略号</div><h2 id="两行（多行）超出显示省略号"><a href="#两行（多行）超出显示省略号" class="headerlink" title="两行（多行）超出显示省略号"></a>两行（多行）超出显示省略号</h2><blockquote><p>显示的行数由 line-clamp 样式的值决定。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">white-space</span>: normal;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure><style>.test2{width: 200px;background: var(--hl-bg);border: 1px solid var(--heo-fontcolor);overflow: hidden;white-space: normal;text-overflow: ellipsis;display: -webkit-box;-webkit-line-clamp: 3;-webkit-box-orient: vertical;}</style><div class="test2">效果：超出显示省略号超出显示省略号超出显示省略号超出显示省略号超出显示省略号超出显示省略号超出显示省略号</div><h2 id="JS-判断是否显示了省略号"><a href="#JS-判断是否显示了省略号" class="headerlink" title="JS 判断是否显示了省略号"></a>JS 判断是否显示了省略号</h2><p>有时候我们需要知道是否已经超出，显示了省略号，可以用到<code>clientHeight</code>和<code>scrollHeight</code>的知识：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cHeight = dom.<span class="property">clientHeight</span>;</span><br><span class="line"><span class="keyword">let</span> sHeight = dom.<span class="property">scrollHeight</span>;</span><br><span class="line"><span class="keyword">if</span> (sHeight &gt; cHeight) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已经超出显示省略号&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;没有超出&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>scrollHeight：元素内容的高度，包括由于超出导致的视图中不可见内容。不包含滚动条、边框和外边距。<br>clientHeight：元素内容的可视区的高度，包含内边距，但不包括水平滚动条、边框和外边距。<br>offsetHeight：元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一行超出显示省略号&quot;&gt;&lt;a href=&quot;#一行超出显示省略号&quot; class=&quot;headerlink&quot; title=&quot;一行超出显示省略号&quot;&gt;&lt;/a&gt;一行超出显示省略号&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    <category term="CSS" scheme="https://wade9264.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://wade9264.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Autojs脚本开发</title>
    <link href="https://wade9264.github.io/posts/86ce39c9.html"/>
    <id>https://wade9264.github.io/posts/86ce39c9.html</id>
    <published>2020-06-11T16:00:00.000Z</published>
    <updated>2023-02-09T14:23:06.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Autojs-概述"><a href="#Autojs-概述" class="headerlink" title="Autojs 概述"></a>Autojs 概述</h2><h3 id="1、Autojs-是什么，能做什么？"><a href="#1、Autojs-是什么，能做什么？" class="headerlink" title="1、Autojs 是什么，能做什么？"></a>1、Autojs 是什么，能做什么？</h3><ul><li><p>**不需要 Root 权限 ** 的 JavaScript 自动化 软件</p></li><li><p>基于无障碍服务接口</p></li><li><p>官网：<a href="https://hyb1996.github.io/AutoJs-Docs/#/">https://hyb1996.github.io/AutoJs-Docs/#/</a></p></li><li><p>开发 APP 脚本</p></li><li><p>自动化操作、引流脚本、游戏脚本、简单 app</p></li></ul><h3 id="2、Autojs-各版本之间的区别"><a href="#2、Autojs-各版本之间的区别" class="headerlink" title="2、Autojs 各版本之间的区别"></a>2、Autojs 各版本之间的区别</h3><ul><li><p>4.1.1 版本</p></li><li><p>7.0.0 pro 版本</p></li><li><p>8.0.0 pro 版本</p></li></ul><h3 id="3、Autojs-的学习路径和学习方法"><a href="#3、Autojs-的学习路径和学习方法" class="headerlink" title="3、Autojs 的学习路径和学习方法"></a>3、Autojs 的学习路径和学习方法</h3><ul><li><p>基础入门 JavaScript</p></li><li><p>ES6 语法</p></li><li><p>Autojs 文档</p></li><li><p>Autojs 示例</p></li><li><p>Autojs 实战</p></li></ul><hr><ul><li><p>专业程序员的培训方式</p></li><li><p>Autojs 英语单词入门</p></li><li><p>Autojs 代码书写规范</p></li><li><p>Autojs 错误调试和分析</p></li><li><p>每天直播答疑解惑</p></li></ul><h2 id="Autojs-脚本开发环境搭建"><a href="#Autojs-脚本开发环境搭建" class="headerlink" title="Autojs 脚本开发环境搭建"></a>Autojs 脚本开发环境搭建</h2><h3 id="1、autojs-软件安装及简单使用"><a href="#1、autojs-软件安装及简单使用" class="headerlink" title="1、autojs 软件安装及简单使用"></a>1、autojs 软件安装及简单使用</h3><ul><li><p>4.1.1 版本的安装</p></li><li><p>8.0 pro 版本的安装</p></li><li><p>简单熟悉一下 autojs 软件</p></li></ul><h3 id="2、安卓手机投屏软件的安装和使用"><a href="#2、安卓手机投屏软件的安装和使用" class="headerlink" title="2、安卓手机投屏软件的安装和使用"></a>2、安卓手机投屏软件的安装和使用</h3><h3 id="3、雷电模拟器的安装和使用"><a href="#3、雷电模拟器的安装和使用" class="headerlink" title="3、雷电模拟器的安装和使用"></a>3、雷电模拟器的安装和使用</h3><h3 id="4、VScode-编辑器的安装和使用"><a href="#4、VScode-编辑器的安装和使用" class="headerlink" title="4、VScode 编辑器的安装和使用"></a>4、VScode 编辑器的安装和使用</h3><h3 id="5、autojs-插件安装和使用"><a href="#5、autojs-插件安装和使用" class="headerlink" title="5、autojs 插件安装和使用"></a>5、autojs 插件安装和使用</h3><ul><li><p>hyb1996</p></li><li><p>ctrl+shift+p</p></li></ul><h3 id="6、autojs-手机端（模拟器端）和电脑端相互连接"><a href="#6、autojs-手机端（模拟器端）和电脑端相互连接" class="headerlink" title="6、autojs 手机端（模拟器端）和电脑端相互连接"></a>6、autojs 手机端（模拟器端）和电脑端相互连接</h3><ul><li><p>手机和电脑务必在同一个局域网下</p></li><li><p>4.1.1 版本的电脑端需要开启 autojs 服务</p></li><li><p>ipconfig 查看本机 IP 地址</p></li><li><p>安卓版本需要在 7.0 以上</p></li></ul><h3 id="7、编写第一个-autojs-脚本并打包成-apk"><a href="#7、编写第一个-autojs-脚本并打包成-apk" class="headerlink" title="7、编写第一个 autojs 脚本并打包成 apk"></a>7、编写第一个 autojs 脚本并打包成 apk</h3><ul><li>保存 js 文件到手机</li></ul><h2 id="应用-—-APP"><a href="#应用-—-APP" class="headerlink" title="应用 — APP"></a>应用 — APP</h2><h3 id="1、关于-APP-版本的命令"><a href="#1、关于-APP-版本的命令" class="headerlink" title="1、关于 APP 版本的命令"></a>1、关于 APP 版本的命令</h3><h4 id="app-versionCode"><a href="#app-versionCode" class="headerlink" title="app.versionCode"></a>app.versionCode</h4><ul><li>当前软件版本号</li></ul><h4 id="app-versionName"><a href="#app-versionName" class="headerlink" title="app.versionName"></a>app.versionName</h4><ul><li>当前软件版本名称</li></ul><h4 id="app-autojs-versionCode"><a href="#app-autojs-versionCode" class="headerlink" title="app.autojs.versionCode"></a>app.autojs.versionCode</h4><ul><li>autojs 版本号</li></ul><h4 id="app-autojs-versionName"><a href="#app-autojs-versionName" class="headerlink" title="app.autojs.versionName"></a>app.autojs.versionName</h4><ul><li>autojs 版本名称</li></ul><h3 id="2、打开-APP"><a href="#2、打开-APP" class="headerlink" title="2、打开 APP"></a>2、打开 APP</h3><h4 id="app-launchApp-appName"><a href="#app-launchApp-appName" class="headerlink" title="app.launchApp(appName)"></a>app.launchApp(appName)</h4><ul><li>通过 APP 名称打开 APP</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该函数也可以作为全局函数使用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打开autojs</span></span><br><span class="line"><span class="title function_">launchApp</span>(<span class="string">&quot;Auto.js&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="app-launch-packageName"><a href="#app-launch-packageName" class="headerlink" title="app.launch(packageName)"></a>app.launch(packageName)</h4><ul><li>通过 APP 包名打开 APP</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//另一种写法</span></span><br><span class="line">app.<span class="title function_">launchPackage</span>(packageName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数也可以作为全局函数使用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//启动微信</span></span><br><span class="line"><span class="title function_">launch</span>(<span class="string">&quot;com.tencent.mm&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="app-getPackageName-appName"><a href="#app-getPackageName-appName" class="headerlink" title="app.getPackageName(appName)"></a>app.getPackageName(appName)</h4><ul><li><p>获取应用名称对应的已安装的应用的包名。</p></li><li><p>如果该找不到该应用，返回 null；如果该名称对应多个应用，则只返回其中某一个的包名。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该函数也可以作为全局函数使用。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="title function_">getPackageName</span>(<span class="string">&quot;QQ&quot;</span>); <span class="comment">//返回&quot;com.tencent.mobileqq&quot;</span></span><br></pre></td></tr></table></figure><h4 id="app-getAppName-packageName"><a href="#app-getAppName-packageName" class="headerlink" title="app.getAppName(packageName)"></a>app.getAppName(packageName)</h4><ul><li>获取应用包名对应的已安装的应用的名称。如果该找不到该应用，返回 null。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该函数也可以作为全局函数使用。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="title function_">getAppName</span>(<span class="string">&quot;com.tencent.mobileqq&quot;</span>); <span class="comment">//返回&quot;QQ&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3、查看和编辑文件"><a href="#3、查看和编辑文件" class="headerlink" title="3、查看和编辑文件"></a>3、查看和编辑文件</h3><h4 id="app-viewFile-path"><a href="#app-viewFile-path" class="headerlink" title="app.viewFile(path)"></a>app.viewFile(path)</h4><ul><li>用其他应用查看文件。文件不存在的情况由查看文件的应用处理。</li></ul><h4 id="app-editFile-path"><a href="#app-editFile-path" class="headerlink" title="app.editFile(path)"></a>app.editFile(path)</h4><ul><li>用其他应用编辑文件。文件不存在的情况由编辑文件的应用处理。</li></ul><h3 id="4、APP-的安装和卸载"><a href="#4、APP-的安装和卸载" class="headerlink" title="4、APP 的安装和卸载"></a>4、APP 的安装和卸载</h3><h4 id="app-uninstall-packageName"><a href="#app-uninstall-packageName" class="headerlink" title="app.uninstall(packageName)"></a>app.uninstall(packageName)</h4><ul><li>卸载应用。执行后会会弹出卸载应用的提示框。如果该包名的应用未安装，由应用卸载程序处理，可能弹出”未找到应用”的提示。</li></ul><h4 id="app-viewFile-path-1"><a href="#app-viewFile-path-1" class="headerlink" title="app.viewFile(path)"></a>app.viewFile(path)</h4><ul><li>path：apk 的地址</li></ul><h3 id="5、不同的跳转方式"><a href="#5、不同的跳转方式" class="headerlink" title="5、不同的跳转方式"></a>5、不同的跳转方式</h3><h4 id="app-openAppSetting-packageName"><a href="#app-openAppSetting-packageName" class="headerlink" title="app.openAppSetting(packageName)"></a>app.openAppSetting(packageName)</h4><ul><li><p>打开应用的详情页(设置页)。如果找不到该应用，返回 false; 否则返回 true。</p></li><li><p>该函数也可以作为全局函数使用。</p></li></ul><h4 id="app-startActivity-name"><a href="#app-startActivity-name" class="headerlink" title="app.startActivity(name)"></a>app.startActivity(name)</h4><ul><li><p>启动 Auto.js 的特定界面。该函数在 Auto.js 内运行则会打开 Auto.js 内的界面，在打包应用中运行则会打开打包应用的相应界面。</p></li><li><p><code>name</code> {string} 活动名称，可选的值为:</p></li><li><p><code>console</code> 日志界面</p></li><li><p><code>settings</code> 设置界面</p></li></ul><h4 id="app-openUrl-url"><a href="#app-openUrl-url" class="headerlink" title="app.openUrl(url)"></a>app.openUrl(url)</h4><ul><li>用浏览器打开网站 url。</li></ul><h3 id="6、自动发送邮件"><a href="#6、自动发送邮件" class="headerlink" title="6、自动发送邮件"></a>6、自动发送邮件</h3><h4 id="app-sendEmail-options"><a href="#app-sendEmail-options" class="headerlink" title="app.sendEmail(options)"></a>app.sendEmail(options)</h4><ul><li><p>options</p><p>{Object} 发送邮件的参数。包括:</p><ul><li><code>email</code> {string} | {Array} 收件人的邮件地址。如果有多个收件人，则用字符串数组表示</li><li><code>cc</code> {string} | {Array} 抄送收件人的邮件地址。如果有多个抄送收件人，则用字符串数组表示</li><li><code>bcc</code> {string} | {Array} 密送收件人的邮件地址。如果有多个密送收件人，则用字符串数组表示</li><li><code>subject</code> {string} 邮件主题(标题)</li><li><code>text</code> {string} 邮件正文</li><li><code>attachment</code> {string} 附件的路径。</li></ul></li><li><p>根据选项 options 调用邮箱应用发送邮件。这些选项均是可选的。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送邮件给10086@qq.com和10001@qq.com。</span></span><br><span class="line">app.<span class="title function_">sendEmail</span>(&#123;</span><br><span class="line">  <span class="attr">email</span>: [<span class="string">&quot;10086@qq.com&quot;</span>, <span class="string">&quot;10001@qq.com&quot;</span>],</span><br><span class="line">  <span class="attr">subject</span>: <span class="string">&quot;这是一个邮件标题&quot;</span>,</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&quot;这是邮件正文&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="一般全局函数-Globals"><a href="#一般全局函数-Globals" class="headerlink" title="一般全局函数 - Globals"></a>一般全局函数 - Globals</h2><h2 id="悬浮窗-Floaty"><a href="#悬浮窗-Floaty" class="headerlink" title="悬浮窗 - Floaty"></a>悬浮窗 - Floaty</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">悬浮窗在脚本停止运行时会自动关闭，因此，要保持悬浮窗不被关闭，可以用一个空的<span class="built_in">setInterval</span>来实现，例如：</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="1、创建和关闭悬浮窗"><a href="#1、创建和关闭悬浮窗" class="headerlink" title="1、创建和关闭悬浮窗"></a>1、创建和关闭悬浮窗</h2><h3 id="floaty-window-layout"><a href="#floaty-window-layout" class="headerlink" title="floaty.window(layout)"></a>floaty.window(layout)</h3><ul><li><p>创建并<strong>显示</strong>一个悬浮窗</p></li><li><p>返回一个<code>FloatyWindow</code>对象。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var w = floaty.window(</span><br><span class="line"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">gravity</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>&gt;</span>悬浮文字<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frame</span>&gt;</span></span><br><span class="line">); setTimeout(()=&gt;&#123; w.close(); &#125;, 2000);</span><br></pre></td></tr></table></figure><ul><li>因为脚本运行的线程不是 UI 线程，而所有对控件的修改操作需要在 UI 线程执行，此时需要用<code>ui.run</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ui.<span class="title function_">run</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  w.<span class="property">text</span>.<span class="title function_">setText</span>(<span class="string">&quot;文本&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="floaty-rawWindow-layout"><a href="#floaty-rawWindow-layout" class="headerlink" title="floaty.rawWindow(layout)"></a>floaty.rawWindow(layout)</h3><ul><li><p>创建并<strong>显示</strong>一个原始悬浮窗，返回一个<code>FloatyRawWindow</code>对象</p></li><li><p>与<code>floaty.window()</code>函数不同的是，该悬浮窗不会增加任何额外设施（例如调整大小、位置按钮），您可以根据自己需要编写任何布局。</p></li><li><p>而且，该悬浮窗支持完全全屏，可以覆盖状态栏，因此可以做护眼模式之类的应用</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var w = floaty.rawWindow(</span><br><span class="line"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">gravity</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>&gt;</span>悬浮文字<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frame</span>&gt;</span></span><br><span class="line">); w.setPosition(500, 500); setTimeout(()=&gt;&#123; w.close(); &#125;, 2000);</span><br></pre></td></tr></table></figure><h3 id="floaty-closeAll"><a href="#floaty-closeAll" class="headerlink" title="floaty.closeAll()"></a>floaty.closeAll()</h3><ul><li>关闭所有悬浮窗</li></ul><h2 id="2、FloatyWindow-对象"><a href="#2、FloatyWindow-对象" class="headerlink" title="2、FloatyWindow 对象"></a>2、FloatyWindow 对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">悬浮窗对象，可通过FloatyWindow.&#123;id&#125;获取悬浮窗界面上的元素。例如, 悬浮窗window上一个控件的id为aaa, 那么window.aaa即可获取到该控件，类似于ui。</span><br></pre></td></tr></table></figure><h3 id="FloatyWindow-setAdjustEnabled-enabled"><a href="#FloatyWindow-setAdjustEnabled-enabled" class="headerlink" title="FloatyWindow.setAdjustEnabled(enabled)"></a>FloatyWindow.setAdjustEnabled(enabled)</h3><ul><li><p>是否启用悬浮窗调整(大小、位置)</p></li><li><p>ture 启用 false 不启用</p></li></ul><h3 id="FloatyWindow-setPosition-x-y"><a href="#FloatyWindow-setPosition-x-y" class="headerlink" title="FloatyWindow.setPosition(x, y)"></a>FloatyWindow.setPosition(x, y)</h3><ul><li>设置悬浮窗位置</li></ul><h3 id="FloatyWindow-getX"><a href="#FloatyWindow-getX" class="headerlink" title="FloatyWindow.getX()"></a>FloatyWindow.getX()</h3><ul><li>返回悬浮窗位置的 X 坐标。</li></ul><h3 id="FloatyWindow-getY"><a href="#FloatyWindow-getY" class="headerlink" title="FloatyWindow.getY()"></a>FloatyWindow.getY()</h3><ul><li>返回悬浮窗位置的 Y 坐标。</li></ul><h3 id="FloatyWindow-setSize-width-height"><a href="#FloatyWindow-setSize-width-height" class="headerlink" title="FloatyWindow.setSize(width, height)"></a>FloatyWindow.setSize(width, height)</h3><ul><li>设置悬浮窗宽高。</li></ul><h3 id="FloatyWindow-getWidth"><a href="#FloatyWindow-getWidth" class="headerlink" title="FloatyWindow.getWidth()"></a>FloatyWindow.getWidth()</h3><ul><li>返回悬浮窗宽度。</li></ul><h3 id="FloatyWindow-getHeight"><a href="#FloatyWindow-getHeight" class="headerlink" title="FloatyWindow.getHeight()"></a>FloatyWindow.getHeight()</h3><ul><li>返回悬浮窗高度。</li></ul><h3 id="FloatyWindow-close"><a href="#FloatyWindow-close" class="headerlink" title="FloatyWindow.close()"></a>FloatyWindow.close()</h3><ul><li><p>关闭悬浮窗。如果悬浮窗已经是关闭状态，则此函数将不执行任何操作。</p><p>被关闭后的悬浮窗不能再显示。</p></li></ul><h3 id="FloatyWindow-exitOnClose"><a href="#FloatyWindow-exitOnClose" class="headerlink" title="FloatyWindow.exitOnClose()"></a>FloatyWindow.exitOnClose()</h3><ul><li>使悬浮窗被关闭时自动结束脚本运行</li></ul><h2 id="3、FloatyRawWindow-对象"><a href="#3、FloatyRawWindow-对象" class="headerlink" title="3、FloatyRawWindow 对象"></a>3、FloatyRawWindow 对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原始悬浮窗对象，可通过window.&#123;id&#125;获取悬浮窗界面上的元素。例如, 悬浮窗window上一个控件的id为aaa, 那么window.aaa即可获取到该控件，类似于ui。</span><br></pre></td></tr></table></figure><h3 id="FloatyRawWindow-setTouchable-touchable"><a href="#FloatyRawWindow-setTouchable-touchable" class="headerlink" title="FloatyRawWindow.setTouchable(touchable)"></a>FloatyRawWindow.setTouchable(touchable)</h3><ul><li><p><code>touchable</code> {Boolean} 是否可触摸</p></li><li><p>true 可触摸悬浮窗 false 不可触摸悬浮窗</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var w = floaty.rawWindow(</span><br><span class="line">    &lt;frame gravity=&quot;center&quot; bg=&quot;##44ffcc00&quot;/&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">w.setSize(-1, -1);</span><br><span class="line">w.setTouchable(false);</span><br><span class="line"></span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">    w.close();</span><br><span class="line">&#125;, 4000);</span><br></pre></td></tr></table></figure><h3 id="FloatyRawWindow-setPosition-x-y"><a href="#FloatyRawWindow-setPosition-x-y" class="headerlink" title="FloatyRawWindow.setPosition(x, y)"></a>FloatyRawWindow.setPosition(x, y)</h3><ul><li>设置悬浮窗位置</li></ul><h3 id="FloatyRawWindow-getX"><a href="#FloatyRawWindow-getX" class="headerlink" title="FloatyRawWindow.getX()"></a>FloatyRawWindow.getX()</h3><ul><li>返回悬浮窗位置的 X 坐标。</li></ul><h3 id="FloatyRawWindow-getY"><a href="#FloatyRawWindow-getY" class="headerlink" title="FloatyRawWindow.getY()"></a>FloatyRawWindow.getY()</h3><ul><li>返回悬浮窗位置的 Y 坐标。</li></ul><h3 id="FloatyRawWindow-setSize-width-height"><a href="#FloatyRawWindow-setSize-width-height" class="headerlink" title="FloatyRawWindow.setSize(width, height)"></a>FloatyRawWindow.setSize(width, height)</h3><ul><li><p>设置悬浮窗宽高。</p></li><li><p>如果设置为-1，则为占满全屏；</p></li></ul><h3 id="FloatyRawWindow-getWidth"><a href="#FloatyRawWindow-getWidth" class="headerlink" title="FloatyRawWindow.getWidth()"></a>FloatyRawWindow.getWidth()</h3><ul><li>返回悬浮窗宽度。</li></ul><h3 id="FloatyRawWindow-getHeight"><a href="#FloatyRawWindow-getHeight" class="headerlink" title="FloatyRawWindow.getHeight()"></a>FloatyRawWindow.getHeight()</h3><ul><li>返回悬浮窗高度。</li></ul><h3 id="FloatyRawWindow-close"><a href="#FloatyRawWindow-close" class="headerlink" title="FloatyRawWindow.close()"></a>FloatyRawWindow.close()</h3><ul><li><p>关闭悬浮窗。如果悬浮窗已经是关闭状态，则此函数将不执行任何操作。</p><p>被关闭后的悬浮窗不能再显示。</p></li></ul><h3 id="FloatyRawWindow-exitOnClose"><a href="#FloatyRawWindow-exitOnClose" class="headerlink" title="FloatyRawWindow.exitOnClose()"></a>FloatyRawWindow.exitOnClose()</h3><ul><li>使悬浮窗被关闭时自动结束脚本运行</li></ul><h2 id="脚本引擎-Engines"><a href="#脚本引擎-Engines" class="headerlink" title="脚本引擎 - Engines"></a>脚本引擎 - Engines</h2><p>engines 模块包含了一些与脚本环境、脚本运行、脚本引擎有关的函数，包括运行其他脚本，关闭脚本等。</p><p>例如，获取脚本所在目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">toast(engines.myEngine().cwd());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1、在脚本引擎中运行脚本"><a href="#1、在脚本引擎中运行脚本" class="headerlink" title="1、在脚本引擎中运行脚本"></a>1、在脚本引擎中运行脚本</h2><h3 id="engines-execScript-name-script-config"><a href="#engines-execScript-name-script-config" class="headerlink" title="engines.execScript(name, script[, config])"></a>engines.execScript(name, script[, config])</h3><ul><li><code>name</code> {string} 要运行的脚本名称。这个名称和文件名称无关，只是在任务管理中显示的名称。</li><li><code>script</code> {string} 要运行的脚本内容。</li><li><code>config</code>{Object} 运行配置项<ul><li><code>delay</code> {number} 延迟执行的毫秒数，默认为 0</li><li><code>loopTimes</code> {number} 循环运行次数，默认为 1。0 为无限循环。</li><li><code>interval</code> {number} 循环运行时两次运行之间的时间间隔，默认为 0</li><li><code>path</code> {Array} | {string} 指定脚本运行的目录。这些路径会用于 require 时寻找模块文件。</li></ul></li></ul><p>在新脚本环境中运行脚本 script。返回一个 ScriptExectuion 对象。</p><p>所谓新的脚本环境，指定是，脚本中的变量和原脚本的变量是不共享的，并且，脚本会在新的线程中运行。</p><p>最简单的例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">engines.execScript(&quot;hello world&quot;, &quot;toast(&#x27;hello world&#x27;)&quot;);</span><br></pre></td></tr></table></figure><p>如果要循环运行，则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//每隔3秒运行一次脚本，循环10次</span><br><span class="line">engines.execScript(&quot;hello world&quot;, &quot;toast(&#x27;hello world&#x27;)&quot;, &#123;</span><br><span class="line">    loopTimes: 10,</span><br><span class="line">    interval: 3000</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>用字符串来编写脚本非常不方便，可以结合 <code>Function.toString()</code>的方法来执行特定函数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function helloWorld()&#123;</span><br><span class="line">    //注意，这里的变量和脚本主体的变量并不共享</span><br><span class="line">    toast(&quot;hello world&quot;);</span><br><span class="line">&#125;</span><br><span class="line">engines.execScript(&quot;hello world&quot;, &quot;helloWorld();\n&quot; + helloWorld.toString());</span><br></pre></td></tr></table></figure><p>如果要传递变量，则可以把这些封装成一个函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//在新的脚本环境中执行 1 + 2</span><br><span class="line">exec(add, &#123;a: 1, b:2&#125;);</span><br><span class="line"></span><br><span class="line">function exec(action, args)&#123;</span><br><span class="line">    args = args || &#123;&#125;;</span><br><span class="line">    var tmp = action.toString();</span><br><span class="line">    var re = /function\s*(\w*)/i;</span><br><span class="line">    var matches = re.exec(tmp);//方法名</span><br><span class="line">    var name=matches[1];</span><br><span class="line">    engines.execScript(name, name + &quot;(&quot; + JSON.stringify(args) + &quot;);\n&quot; + action.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// var tmp = ddd.toString();</span><br><span class="line">// var re = /function\s*(\w*)/i;</span><br><span class="line">// var matches = re.exec(tmp);//方法名</span><br><span class="line">// var name=matches[1];</span><br><span class="line">// log(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//要执行的函数，是一个简单的加法</span><br><span class="line">function ddd(args)&#123;</span><br><span class="line">    toast(args.a + args.b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、在脚本引擎中运行-js-文件"><a href="#2、在脚本引擎中运行-js-文件" class="headerlink" title="2、在脚本引擎中运行 js 文件"></a>2、在脚本引擎中运行 js 文件</h2><h3 id="engines-execScriptFile-path-config"><a href="#engines-execScriptFile-path-config" class="headerlink" title="engines.execScriptFile(path[, config])"></a>engines.execScriptFile(path[, config])</h3><ul><li><code>path</code> {string} 要运行的脚本路径。</li><li><code>config</code>{Object} 运行配置项<ul><li><code>delay</code> {number} 延迟执行的毫秒数，默认为 0</li><li><code>loopTimes</code> {number} 循环运行次数，默认为 1。0 为无限循环。</li><li><code>interval</code> {number} 循环运行时两次运行之间的时间间隔，默认为 0</li><li><code>path</code> {Array} | {string} 指定脚本运行的目录。这些路径会用于 require 时寻找模块文件。</li></ul></li></ul><p>在新的脚本环境中运行脚本文件 path。返回一个<a href="https://hyb1996.github.io/AutoJs-Docs/##/engines?id=scriptexecution">ScriptExecution</a>对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">engines.execScriptFile(&quot;/sdcard/脚本/1.js&quot;);</span><br></pre></td></tr></table></figure><h2 id="3、在脚本引擎中运行录制的脚本文件"><a href="#3、在脚本引擎中运行录制的脚本文件" class="headerlink" title="3、在脚本引擎中运行录制的脚本文件"></a>3、在脚本引擎中运行录制的脚本文件</h2><h3 id="engines-execAutoFile-path-config"><a href="#engines-execAutoFile-path-config" class="headerlink" title="engines.execAutoFile(path[, config])"></a>engines.execAutoFile(path[, config])</h3><ul><li><code>path</code> {string} 要运行的录制文件路径。</li><li><code>config</code>{Object} 运行配置项<ul><li><code>delay</code> {number} 延迟执行的毫秒数，默认为 0</li><li><code>loopTimes</code> {number} 循环运行次数，默认为 1。0 为无限循环。</li><li><code>interval</code> {number} 循环运行时两次运行之间的时间间隔，默认为 0</li><li><code>path</code> {Array} | {string} 指定脚本运行的目录。这些路径会用于 require 时寻找模块文件。</li></ul></li></ul><p>在新的脚本环境中运行录制文件 path。返回一个 ScriptExecution 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">engines.execAutoFile(&quot;/sdcard/脚本/1.auto&quot;);</span><br></pre></td></tr></table></figure><h2 id="4、脚本引擎控制方法"><a href="#4、脚本引擎控制方法" class="headerlink" title="4、脚本引擎控制方法"></a>4、脚本引擎控制方法</h2><h3 id="engines-stopAll"><a href="#engines-stopAll" class="headerlink" title="engines.stopAll()"></a>engines.stopAll()</h3><ul><li>停止所有正在运行的脚本。包括当前脚本自身</li></ul><h3 id="engines-stopAllAndToast"><a href="#engines-stopAllAndToast" class="headerlink" title="engines.stopAllAndToast()"></a>engines.stopAllAndToast()</h3><ul><li>停止所有正在运行的脚本并显示停止的脚本数量。包括当前脚本自身。</li></ul><h3 id="engines-myEngine"><a href="#engines-myEngine" class="headerlink" title="engines.myEngine()"></a>engines.myEngine()</h3><ul><li>返回当前脚本的脚本引擎对象(ScriptEngine）</li></ul><p>ScriptExecution 执行对象</p><p>ScriptEngine 引擎对象</p><h3 id="engines-all"><a href="#engines-all" class="headerlink" title="engines.all()"></a>engines.all()</h3><ul><li>返回当前所有正在运行的脚本的脚本引擎对象 ScriptEngine 的数组。</li></ul><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="5、脚本执行对象–ScriptExecution"><a href="#5、脚本执行对象–ScriptExecution" class="headerlink" title="5、脚本执行对象–ScriptExecution"></a>5、脚本执行对象–ScriptExecution</h2><p>执行脚本时返回的对象，可以通过他获取执行的引擎、配置等，也可以停止这个执行。</p><p>要停止这个脚本的执行，使用<code>ScriptExecution.getEngine().forceStop()</code></p><h3 id="ScriptExecution-getEngine"><a href="#ScriptExecution-getEngine" class="headerlink" title="ScriptExecution.getEngine()"></a>ScriptExecution.getEngine()</h3><ul><li>返回执行该脚本的脚本引擎对象(ScriptEngine)</li></ul><h3 id="ScriptExecution-getConfig"><a href="#ScriptExecution-getConfig" class="headerlink" title="ScriptExecution.getConfig()"></a>ScriptExecution.getConfig()</h3><ul><li>返回该脚本的运行配置(ScriptConfig)</li></ul><h2 id="6、脚本引擎对象–ScriptEngine"><a href="#6、脚本引擎对象–ScriptEngine" class="headerlink" title="6、脚本引擎对象–ScriptEngine"></a>6、脚本引擎对象–ScriptEngine</h2><h3 id="ScriptEngine-forceStop"><a href="#ScriptEngine-forceStop" class="headerlink" title="ScriptEngine.forceStop()"></a>ScriptEngine.forceStop()</h3><ul><li>停止脚本引擎的执行</li></ul><h3 id="ScriptEngine-cwd"><a href="#ScriptEngine-cwd" class="headerlink" title="ScriptEngine.cwd()"></a>ScriptEngine.cwd()</h3><ul><li><p>返回脚本执行的路径。对于一个脚本文件而言为这个脚本所在的文件夹；</p></li><li><p>对于其他脚本，例如字符串脚本，则为<code>null</code>或者执行时的设置值。</p></li></ul><h3 id="ScriptEngine-getSource"><a href="#ScriptEngine-getSource" class="headerlink" title="ScriptEngine.getSource()"></a>ScriptEngine.getSource()</h3><ul><li><p>返回当前脚本引擎正在执行的脚本对象。</p></li><li><p>返回脚本路径</p></li></ul><h2 id="7、脚本引擎之间的通信"><a href="#7、脚本引擎之间的通信" class="headerlink" title="7、脚本引擎之间的通信"></a>7、脚本引擎之间的通信</h2><h3 id="ScriptEngine-emit-eventName-…args"><a href="#ScriptEngine-emit-eventName-…args" class="headerlink" title="ScriptEngine.emit(eventName[, …args])"></a>ScriptEngine.emit(eventName[, …args])</h3><ul><li><code>eventName</code> {string} 事件名称</li><li><code>...args</code> {any} 事件参数</li></ul><p>向该脚本引擎发送一个事件，该事件可以在该脚本引擎对应的脚本的 events 模块监听到并在脚本主线程执行事件处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例如脚本receiver.<span class="property">js</span>的内容如下：</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听say事件</span></span><br><span class="line">events.<span class="title function_">on</span>(<span class="string">&quot;say&quot;</span>, <span class="keyword">function</span>(<span class="params">words</span>)&#123;</span><br><span class="line">    <span class="title function_">toastLog</span>(words);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//保持脚本运行</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//运行脚本</span></span><br><span class="line"><span class="keyword">var</span> e = engines.<span class="title function_">execScriptFile</span>(<span class="string">&quot;./receiver.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待脚本启动</span></span><br><span class="line"><span class="title function_">sleep</span>(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//向该脚本发送事件</span></span><br><span class="line">e.<span class="title function_">getEngine</span>().<span class="title function_">emit</span>(<span class="string">&quot;say&quot;</span>, <span class="string">&quot;你好&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="8、脚本引擎配置–ScriptConfig"><a href="#8、脚本引擎配置–ScriptConfig" class="headerlink" title="8、脚本引擎配置–ScriptConfig"></a>8、脚本引擎配置–ScriptConfig</h2><h3 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h3><ul><li>延迟执行的毫秒数</li></ul><h3 id="interval"><a href="#interval" class="headerlink" title="interval"></a>interval</h3><ul><li>循环运行时两次运行之间的时间间隔</li></ul><h3 id="loopTimes"><a href="#loopTimes" class="headerlink" title="loopTimes"></a>loopTimes</h3><ul><li>循环运行次数</li></ul><h3 id="getPath"><a href="#getPath" class="headerlink" title="getPath()"></a>getPath()</h3><ul><li>返回一个字符串数组表示脚本运行时模块寻找的路径</li></ul><h2 id="一般全局函数-Globals-1"><a href="#一般全局函数-Globals-1" class="headerlink" title="一般全局函数 - Globals"></a>一般全局函数 - Globals</h2><h2 id="1、常用的全局函数"><a href="#1、常用的全局函数" class="headerlink" title="1、常用的全局函数"></a>1、常用的全局函数</h2><h3 id="sleep-n"><a href="#sleep-n" class="headerlink" title="sleep(n)"></a>sleep(n)</h3><ul><li>暂停运行 n 毫秒的时间。1 秒等于 1000 毫秒。</li></ul><h3 id="toast-message"><a href="#toast-message" class="headerlink" title="toast(message)"></a>toast(message)</h3><ul><li>以气泡显示信息 message 几秒。(具体时间取决于安卓系统，一般都是 2 秒)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保证每次显示完成</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _toast_ = toast;</span><br><span class="line">toast = <span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">  <span class="title function_">_toast_</span>(message);</span><br><span class="line">  <span class="title function_">sleep</span>(<span class="number">2000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">toast</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="log-message"><a href="#log-message" class="headerlink" title="log(message)"></a>log(message)</h3><ul><li>在控制台调试输出信息</li></ul><h3 id="toastLog-message"><a href="#toastLog-message" class="headerlink" title="toastLog(message)"></a>toastLog(message)</h3><ul><li>在控制台和气泡中同时输出信息</li></ul><h3 id="exit"><a href="#exit" class="headerlink" title="exit()"></a>exit()</h3><ul><li>立即停止脚本运行。</li></ul><h2 id="2、返回当前监测包名和-Activity"><a href="#2、返回当前监测包名和-Activity" class="headerlink" title="2、返回当前监测包名和 Activity"></a>2、返回当前监测包名和 Activity</h2><h3 id="currentPackage"><a href="#currentPackage" class="headerlink" title="currentPackage()"></a>currentPackage()</h3><ul><li>返回最近一次监测到的正在运行的应用的包名，一般可以认为就是当前正在运行的应用的包名。</li></ul><h3 id="currentActivity"><a href="#currentActivity" class="headerlink" title="currentActivity()"></a>currentActivity()</h3><ul><li>返回最近一次监测到的正在运行的 Activity 的名称，一般可以认为就是当前正在运行的 Activity 的名称。</li></ul><h2 id="3、等待包名和-Activity-的出现"><a href="#3、等待包名和-Activity-的出现" class="headerlink" title="3、等待包名和 Activity 的出现"></a>3、等待包名和 Activity 的出现</h2><h3 id="waitForActivity-activity-period-200"><a href="#waitForActivity-activity-period-200" class="headerlink" title="waitForActivity(activity[, period = 200])"></a>waitForActivity(activity[, period = 200])</h3><ul><li><code>activity</code> Activity 名称</li><li><code>period</code> 轮询等待间隔（毫秒）</li></ul><p>等待指定的 Activity 出现，period 为检查 Activity 的间隔。</p><h3 id="waitForPackage-package-period-200"><a href="#waitForPackage-package-period-200" class="headerlink" title="waitForPackage(package[, period = 200])"></a>waitForPackage(package[, period = 200])</h3><ul><li><code>package</code> 包名</li><li><code>period</code> 轮询等待间隔（毫秒）</li></ul><p>等待指定的应用出现。例如<code>waitForPackage(&quot;com.tencent.mm&quot;)</code>为等待当前界面为微信。</p><h2 id="4、剪切板：实现复制粘贴功能"><a href="#4、剪切板：实现复制粘贴功能" class="headerlink" title="4、剪切板：实现复制粘贴功能"></a>4、剪切板：实现复制粘贴功能</h2><h3 id="setClip-text"><a href="#setClip-text" class="headerlink" title="setClip(text)"></a>setClip(text)</h3><ul><li>设置剪贴板内容。此剪贴板即系统剪贴板，在一般应用的输入框中”粘贴”既可使用。</li></ul><h3 id="getClip"><a href="#getClip" class="headerlink" title="getClip()"></a>getClip()</h3><ul><li>返回系统剪贴板的内容。</li></ul><h3 id="paste"><a href="#paste" class="headerlink" title="paste()"></a>paste()</h3><ul><li>粘贴</li></ul><h2 id="5、获取随机数"><a href="#5、获取随机数" class="headerlink" title="5、获取随机数"></a>5、获取随机数</h2><h3 id="random"><a href="#random" class="headerlink" title="random()"></a>random()</h3><ul><li>返回在[0, 1)的随机浮点数。</li></ul><h3 id="random-min-max"><a href="#random-min-max" class="headerlink" title="random(min, max)"></a>random(min, max)</h3><ul><li>返回一个在[min…max]之间的随机数。例如 random(0, 2)可能产生 0, 1, 2。</li></ul><h2 id="6、适配安卓版本和-Autojs-版本"><a href="#6、适配安卓版本和-Autojs-版本" class="headerlink" title="6、适配安卓版本和 Autojs 版本"></a>6、适配安卓版本和 Autojs 版本</h2><h3 id="requiresApi-api"><a href="#requiresApi-api" class="headerlink" title="requiresApi(api)"></a>requiresApi(api)</h3><ul><li><p>表示此脚本需要 Android API 版本达到指定版本才能运行。例如<code>requiresApi(19)</code>表示脚本需要在 Android 4.4 以及以上运行。</p></li><li><p>调用该函数时会判断运行脚本的设备系统的版本号，如果没有达到要求则抛出异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">平台版本： API级别</span><br><span class="line"></span><br><span class="line">Android 7.0： 24</span><br><span class="line"></span><br><span class="line">Android 6.0： 23</span><br><span class="line"></span><br><span class="line">Android 5.1： 22</span><br><span class="line"></span><br><span class="line">Android 5.0： 21</span><br><span class="line"></span><br><span class="line">Android 4.4W： 20</span><br><span class="line"></span><br><span class="line">Android 4.4： 19</span><br><span class="line"></span><br><span class="line">Android 4.3： 18</span><br></pre></td></tr></table></figure></li></ul><h3 id="requiresAutojsVersion-version"><a href="#requiresAutojsVersion-version" class="headerlink" title="requiresAutojsVersion(version)"></a>requiresAutojsVersion(version)</h3><ul><li><p><code>version</code> {string} | {number} Auto.js 的版本或版本号</p></li><li><p>表示此脚本需要 Auto.js 版本达到指定版本才能运行。例如<code>requiresAutojsVersion(&quot;3.0.0 Beta&quot;)</code>表示脚本需要在 Auto.js 3.0.0 Beta 以及以上运行</p></li><li><p>调用该函数时会判断运行脚本的 Auto.js 的版本号，如果没有达到要求则抛出异常。</p></li><li><p>可以通过<code>app.autojs.versionCode</code>和<code>app.autojs.versionName</code>获取当前的 Auto.js 版本号和版本。</p></li></ul><h2 id="控制台-Console"><a href="#控制台-Console" class="headerlink" title="控制台 - Console"></a>控制台 - Console</h2><h2 id="1、控制台的常用命令"><a href="#1、控制台的常用命令" class="headerlink" title="1、控制台的常用命令"></a>1、控制台的常用命令</h2><h3 id="console-show"><a href="#console-show" class="headerlink" title="console.show()"></a>console.show()</h3><ul><li>显示控制台。这会显示一个控制台的悬浮窗(需要悬浮窗权限)。</li></ul><h3 id="console-hide"><a href="#console-hide" class="headerlink" title="console.hide()"></a>console.hide()</h3><ul><li>隐藏控制台悬浮窗。</li></ul><h3 id="console-clear"><a href="#console-clear" class="headerlink" title="console.clear()"></a>console.clear()</h3><ul><li>清空控制台。</li></ul><h2 id="2、控制台输出信息的几种方式"><a href="#2、控制台输出信息的几种方式" class="headerlink" title="2、控制台输出信息的几种方式"></a>2、控制台输出信息的几种方式</h2><h3 id="console-log-data-…args"><a href="#console-log-data-…args" class="headerlink" title="console.log([data][, …args])"></a>console.log([data][, …args])</h3><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>打印到控制台，并带上换行符。 可以传入多个参数</p><p>该函数也可以作为全局函数使用。</p><h3 id="console-trace-data-…args"><a href="#console-trace-data-…args" class="headerlink" title="console.trace([data][, …args])"></a>console.trace([data][, …args])</h3><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与 console.log 类似，同时会打印出调用这个函数所在的调用栈信息（即当前运行的文件、行数等信息）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">trace</span>(<span class="string">&quot;Show me&quot;</span>);</span><br><span class="line"><span class="comment">// 打印: (堆栈跟踪会根据被调用的跟踪的位置而变化)</span></span><br><span class="line"><span class="comment">// Show me</span></span><br><span class="line"><span class="comment">//  at &lt;test&gt;:7</span></span><br></pre></td></tr></table></figure><h3 id="print-text-…args"><a href="#print-text-…args" class="headerlink" title="print(text[, …args])"></a>print(text[, …args])</h3><ul><li>text {string} | {Object} 要打印到控制台的信息</li></ul><p>相当于<code>log(text)</code>。</p><h2 id="3、控制台信息的输出样式"><a href="#3、控制台信息的输出样式" class="headerlink" title="3、控制台信息的输出样式"></a>3、控制台信息的输出样式</h2><h3 id="console-verbose-data-…args"><a href="#console-verbose-data-…args" class="headerlink" title="console.verbose([data][, …args])"></a>console.verbose([data][, …args])</h3><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与 console.log 类似，但输出结果以灰色字体显示。输出优先级低于 log，用于输出观察性质的信息。</p><h3 id="console-info-data-…args"><a href="#console-info-data-…args" class="headerlink" title="console.info([data][, …args])"></a>console.info([data][, …args])</h3><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与 console.log 类似，但输出结果以绿色字体显示。输出优先级高于 log, 用于输出重要信息。</p><h3 id="console-warn-data-…args"><a href="#console-warn-data-…args" class="headerlink" title="console.warn([data][, …args])"></a>console.warn([data][, …args])</h3><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与 console.log 类似，但输出结果以蓝色字体显示。输出优先级高于 info, 用于输出警告信息。</p><h3 id="console-error-data-…args"><a href="#console-error-data-…args" class="headerlink" title="console.error([data][, …args])"></a>console.error([data][, …args])</h3><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与 console.log 类似，但输出结果以红色字体显示。输出优先级高于 warn, 用于输出错误信息。</p><h3 id="console-assert-value-message"><a href="#console-assert-value-message" class="headerlink" title="console.assert(value, message)"></a>console.assert(value, message)</h3><ul><li>value {any} 要断言的布尔值</li><li>message {string} value 为 false 时要输出的信息</li></ul><p>断言。如果 value 为 false 则输出错误信息 message 并停止脚本运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = 1 + 1;</span><br><span class="line">console.assert(a == 2, &quot;加法出错啦&quot;);</span><br></pre></td></tr></table></figure><h2 id="4、控制台计时操作"><a href="#4、控制台计时操作" class="headerlink" title="4、控制台计时操作"></a>4、控制台计时操作</h2><h3 id="console-time-label"><a href="#console-time-label" class="headerlink" title="console.time([label])"></a>console.time([label])</h3><ul><li><code>label</code> {String} 计时器标签，可省略</li></ul><p>启动一个定时器，用以计算一个操作的持续时间。 定时器由一个唯一的 <code>label</code> 标识。 当调用 <code>console.timeEnd()</code> 时，可以使用相同的 <code>label</code> 来停止定时器，并以毫秒为单位将持续时间输出到控制台。 重复启动同一个标签的定时器会覆盖之前启动同一标签的定时器。</p><h3 id="console-timeEnd-label"><a href="#console-timeEnd-label" class="headerlink" title="console.timeEnd(label)"></a>console.timeEnd(label)</h3><ul><li><code>label</code> {String} 计时器标签</li></ul><p>停止之前通过调用 <code>console.time()</code> 启动的定时器，并打印结果到控制台。 调用 <code>console.timeEnd()</code> 后定时器会被删除。如果不存在标签指定的定时器则会打印 <code>NaNms</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;求和&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">  sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&quot;求和&quot;</span>);</span><br><span class="line"><span class="comment">// 打印 求和: xxx ms</span></span><br></pre></td></tr></table></figure><h2 id="5、控制台输入框（无效）"><a href="#5、控制台输入框（无效）" class="headerlink" title="5、控制台输入框（无效）"></a>5、控制台输入框（无效）</h2><h3 id="console-input-data-…args"><a href="#console-input-data-…args" class="headerlink" title="console.input(data[, …args])"></a>console.input(data[, …args])</h3><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与 console.log 一样输出信息，并在控制台显示输入框等待输入。按控制台的确认按钮后会将输入的字符串用 eval 计算后返回。</p><p><strong>部分机型可能会有控制台不显示输入框的情况，属于 bug。</strong></p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var n = console.input(&quot;请输入一个数字:&quot;);</span><br><span class="line">//输入123之后：</span><br><span class="line">toast(n + 1);</span><br><span class="line">//显示124</span><br></pre></td></tr></table></figure><h3 id="console-rawInput-data-…args"><a href="#console-rawInput-data-…args" class="headerlink" title="console.rawInput(data[, …args])"></a>console.rawInput(data[, …args])</h3><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与 console.log 一样输出信息，并在控制台显示输入框等待输入。按控制台的确认按钮后会将输入的字符串直接返回。</p><p>部分机型可能会有控制台不显示输入框的情况，属于 bug。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var n = console.rawInput(&quot;请输入一个数字:&quot;);</span><br><span class="line">//输入123之后：</span><br><span class="line"></span><br><span class="line">toast(n + 1);</span><br><span class="line">//显示1231</span><br></pre></td></tr></table></figure><h2 id="6、控制台的大小和位置设置"><a href="#6、控制台的大小和位置设置" class="headerlink" title="6、控制台的大小和位置设置"></a>6、控制台的大小和位置设置</h2><h3 id="console-setSize-w-h"><a href="#console-setSize-w-h" class="headerlink" title="console.setSize(w, h)"></a>console.setSize(w, h)</h3><ul><li><code>w</code> {number} 宽度</li><li><code>h</code> {number} 高度</li></ul><p>设置控制台的大小，单位像素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.show();</span><br><span class="line">sleep(2000)</span><br><span class="line">//设置控制台大小为屏幕的四分之一</span><br><span class="line">console.setSize(device.width / 2, device.height / 2);</span><br></pre></td></tr></table></figure><h3 id="console-setPosition-x-y"><a href="#console-setPosition-x-y" class="headerlink" title="console.setPosition(x, y)"></a>console.setPosition(x, y)</h3><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li></ul><p>设置控制台的位置，单位像素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.show();</span><br><span class="line">console.setPosition(100, 100);</span><br></pre></td></tr></table></figure><h2 id="基于坐标的操作-CoordinatesBasedAutomation"><a href="#基于坐标的操作-CoordinatesBasedAutomation" class="headerlink" title="基于坐标的操作 - CoordinatesBasedAutomation"></a>基于坐标的操作 - CoordinatesBasedAutomation</h2><p>本章节介绍了一些使用坐标进行点击、滑动的函数。</p><p>这些函数有的需要安卓 7.0 以上，有的需要 root 权限。</p><p>要获取要点击的位置的坐标，可以在开发者选项中开启”指针位置”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取这个控件</span></span><br><span class="line"><span class="keyword">var</span> widget = <span class="title function_">id</span>(<span class="string">&quot;xxx&quot;</span>).<span class="title function_">findOne</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取其中心位置并点击</span></span><br><span class="line"><span class="title function_">click</span>(widget.<span class="title function_">bounds</span>().<span class="title function_">centerX</span>(), widget.<span class="title function_">bounds</span>().<span class="title function_">centerY</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果用root权限则用Tap</span></span><br></pre></td></tr></table></figure><h2 id="1、设置屏幕的宽度和高度"><a href="#1、设置屏幕的宽度和高度" class="headerlink" title="1、设置屏幕的宽度和高度"></a>1、设置屏幕的宽度和高度</h2><h3 id="setScreenMetrics-width-height"><a href="#setScreenMetrics-width-height" class="headerlink" title="setScreenMetrics(width, height)"></a>setScreenMetrics(width, height)</h3><ul><li>width {number} 屏幕宽度，单位像素</li><li>height {number} 屏幕高度，单位像素</li></ul><p>设置脚本坐标点击所适合的屏幕宽高。如果脚本运行时，屏幕宽度不一致会自动放缩坐标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例如在1920*1080的设备中，某个操作的代码为</span><br><span class="line"></span><br><span class="line">setScreenMetrics(1080, 1920);</span><br><span class="line">click(800, 200);</span><br><span class="line">longClick(300, 500);</span><br><span class="line"></span><br><span class="line">那么在其他设备上AutoJs会自动放缩坐标以便脚本仍然有效。例如在540 * 960的屏幕中click(800, 200)实际上会点击位置(400, 100)</span><br></pre></td></tr></table></figure><h2 id="2、免-root-手机的三种模拟点击方式"><a href="#2、免-root-手机的三种模拟点击方式" class="headerlink" title="2、免 root 手机的三种模拟点击方式"></a>2、免 root 手机的三种模拟点击方式</h2><h3 id="click-x-y"><a href="#click-x-y" class="headerlink" title="click(x, y)"></a>click(x, y)</h3><ul><li>模拟点击坐标(x, y)，并返回是否点击成功。只有在点击执行完成后脚本才继续执行。</li></ul><blockquote><p>一般而言，只有点击过程(大约 150 毫秒)中被其他事件中断(例如用户自行点击)才会点击失败。</p><p>使用该函数模拟连续点击时可能有点击速度过慢的问题，这时可以用<code>press()</code>函数代替。</p></blockquote><h3 id="longClick-x-y"><a href="#longClick-x-y" class="headerlink" title="longClick(x, y)"></a>longClick(x, y)</h3><ul><li>模拟长按坐标(x, y), 并返回是否成功。只有在长按执行完成（大约 600 毫秒）时脚本才会继续执行。</li></ul><h3 id="press-x-y-duration"><a href="#press-x-y-duration" class="headerlink" title="press(x, y, duration)"></a>press(x, y, duration)</h3><ul><li>模拟按住坐标(x, y), 并返回是否成功。只有按住操作执行完成时脚本才会继续执行。</li></ul><h2 id="3、免-root-手机的三种模拟滑动方式"><a href="#3、免-root-手机的三种模拟滑动方式" class="headerlink" title="3、免 root 手机的三种模拟滑动方式"></a>3、免 root 手机的三种模拟滑动方式</h2><h3 id="swipe-x1-y1-x2-y2-duration"><a href="#swipe-x1-y1-x2-y2-duration" class="headerlink" title="swipe(x1, y1, x2, y2, duration)"></a>swipe(x1, y1, x2, y2, duration)</h3><ul><li><code>x1</code> {number} 滑动的起始坐标的 x 值</li><li><code>y1</code> {number} 滑动的起始坐标的 y 值</li><li><code>x2</code> {number} 滑动的结束坐标的 x 值</li><li><code>y2</code> {number} 滑动的结束坐标的 y 值</li><li><code>duration</code> {number} 滑动时长，单位毫秒</li></ul><p>模拟从坐标(x1, y1)滑动到坐标(x2, y2)，并返回是否成功。只有滑动操作执行完成时脚本才会继续执行。</p><h3 id="gesture-duration-x1-y1-x2-y2-…"><a href="#gesture-duration-x1-y1-x2-y2-…" class="headerlink" title="gesture(duration, [x1, y1], [x2, y2], …)"></a>gesture(duration, [x1, y1], [x2, y2], …)</h3><ul><li><code>duration</code> {number} 手势的时长</li><li>[x, y] … 手势滑动路径的一系列坐标</li></ul><p>模拟手势操作。例如<code>gesture(1000, [0, 0], [500, 500], [500, 1000])</code>为模拟一个从(0, 0)到(500, 500)到(500, 100)的手势操作，时长为 2 秒。</p><h3 id="gestures-delay1-duration1-x1-y1-x2-y2-…-delay2-duration2-x3-y3-x4-y4-…-…"><a href="#gestures-delay1-duration1-x1-y1-x2-y2-…-delay2-duration2-x3-y3-x4-y4-…-…" class="headerlink" title="gestures([delay1, duration1, [x1, y1], [x2, y2], …], [delay2, duration2, [x3, y3], [x4, y4], …], …)"></a>gestures([delay1, duration1, [x1, y1], [x2, y2], …], [delay2, duration2, [x3, y3], [x4, y4], …], …)</h3><p>同时模拟多个手势。每个手势的参数为[delay, duration, 坐标], delay 为延迟多久(毫秒)才执行该手势；duration 为手势执行时长；坐标为手势经过的点的坐标。</p><p>其中 delay 参数可以省略，默认为 0。</p><p>例如手指捏合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gestures([0, 500, [800, 300], [500, 1000]],</span><br><span class="line">         [0, 500, [300, 1500], [500, 1000]]);</span><br></pre></td></tr></table></figure><h2 id="4、使用-root-权限模拟点击"><a href="#4、使用-root-权限模拟点击" class="headerlink" title="4、使用 root 权限模拟点击"></a>4、使用 root 权限模拟点击</h2><p>RootAutomator 是一个使用 root 权限来模拟触摸的对象，用它可以完成触摸与多点触摸，并且这些动作的执行没有延迟。</p><p>一个脚本中最好只存在一个 RootAutomator，并且保证脚本结束退出他。可以在 exit 事件中退出 RootAutomator，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var ra = new RootAutomator();</span><br><span class="line">events.on(&#x27;exit&#x27;, function()&#123;</span><br><span class="line">  ra.exit();</span><br><span class="line">&#125;);</span><br><span class="line">//执行一些点击操作</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="RootAutomator-tap-x-y-id"><a href="#RootAutomator-tap-x-y-id" class="headerlink" title="RootAutomator.tap(x, y[, id])"></a>RootAutomator.tap(x, y[, id])</h3><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li><li><code>id</code> {number} 多点触摸 id，可选，默认为 1，可以通过 setDefaultId 指定。</li></ul><p>点击位置(x, y)。其中 id 是一个整数值，用于区分多点触摸，不同的 id 表示不同的”手指”，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var ra = new RootAutomator();</span><br><span class="line">//让&quot;手指1&quot;点击位置(100, 100)</span><br><span class="line">ra.tap(100, 100, 1);</span><br><span class="line">//让&quot;手指2&quot;点击位置(200, 200);</span><br><span class="line">ra.tap(200, 200, 2);</span><br><span class="line">ra.exit();</span><br></pre></td></tr></table></figure><p>如果不需要多点触摸，则不需要 id 这个参数。 多点触摸通常用于手势或游戏操作，例如模拟双指捏合、双指上滑等。</p><p>某些情况下可能存在 tap 点击无反应的情况，这时可以用<code>RootAutomator.press()</code>函数代替。</p><h3 id="RootAutomator-press-x-y-duration-id"><a href="#RootAutomator-press-x-y-duration-id" class="headerlink" title="RootAutomator.press(x, y, duration[, id])"></a>RootAutomator.press(x, y, duration[, id])</h3><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li><li><code>duration</code> {number} 按下时长</li><li><code>id</code> {number} 多点触摸 id，可选，默认为 1</li></ul><p>模拟按下位置(x, y)，时长为 duration 毫秒。</p><h3 id="RootAutomator-longPress-x-y-id"><a href="#RootAutomator-longPress-x-y-id" class="headerlink" title="RootAutomator.longPress(x, y[, id])"></a>RootAutomator.longPress(x, y[, id])</h3><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li><li><code>id</code> {number} 多点触摸 id，可选，默认为 1</li></ul><p>模拟长按位置(x, y)。</p><p>以上为简单模拟触摸操作的函数。如果要模拟一些复杂的手势，需要更底层的函数。</p><h2 id="5、使用-root-权限模拟滑动（无效果）"><a href="#5、使用-root-权限模拟滑动（无效果）" class="headerlink" title="5、使用 root 权限模拟滑动（无效果）"></a>5、使用 root 权限模拟滑动（无效果）</h2><h3 id="RootAutomator-swipe-x1-x2-y1-y2-duration-id"><a href="#RootAutomator-swipe-x1-x2-y1-y2-duration-id" class="headerlink" title="RootAutomator.swipe(x1, x2, y1, y2[, duration, id])"></a>RootAutomator.swipe(x1, x2, y1, y2[, duration, id])</h3><ul><li><code>x1</code> {number} 滑动起点横坐标</li><li><code>y1</code> {number} 滑动起点纵坐标</li><li><code>x2</code> {number} 滑动终点横坐标</li><li><code>y2</code> {number} 滑动终点纵坐标</li><li><code>duration</code> {number} 滑动时长，单位毫秒，默认值为 300</li><li><code>id</code> {number} 多点触摸 id，可选，默认为 1</li></ul><p>模拟一次从(x1, y1)到(x2, y2)的时间为 duration 毫秒的滑动。</p><h2 id="6、使用-root-权限实现模拟拖动"><a href="#6、使用-root-权限实现模拟拖动" class="headerlink" title="6、使用 root 权限实现模拟拖动"></a>6、使用 root 权限实现模拟拖动</h2><h3 id="RootAutomator-touchDown-x-y-id"><a href="#RootAutomator-touchDown-x-y-id" class="headerlink" title="RootAutomator.touchDown(x, y[, id])"></a>RootAutomator.touchDown(x, y[, id])</h3><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li><li><code>id</code> {number} 多点触摸 id，可选，默认为 1</li></ul><p>模拟手指按下位置(x, y)。</p><h3 id="RootAutomator-touchMove-x-y-id"><a href="#RootAutomator-touchMove-x-y-id" class="headerlink" title="RootAutomator.touchMove(x, y[, id])"></a>RootAutomator.touchMove(x, y[, id])</h3><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li><li><code>id</code> {number} 多点触摸 id，可选，默认为 1</li></ul><p>模拟移动手指到位置(x, y)。</p><h3 id="RootAutomator-touchUp-id"><a href="#RootAutomator-touchUp-id" class="headerlink" title="RootAutomator.touchUp([id])"></a>RootAutomator.touchUp([id])</h3><ul><li><code>id</code> {number} 多点触摸 id，可选，默认为 1</li></ul><p>模拟手指弹起。</p><h2 id="7、使用-root-权限点击和滑动的简单命令"><a href="#7、使用-root-权限点击和滑动的简单命令" class="headerlink" title="7、使用 root 权限点击和滑动的简单命令"></a>7、使用 root 权限点击和滑动的简单命令</h2><ul><li>推荐使用<code>RootAutomator</code></li></ul><h3 id="Tap-x-y"><a href="#Tap-x-y" class="headerlink" title="Tap(x, y)"></a>Tap(x, y)</h3><ul><li>x, y {number} 要点击的坐标。</li></ul><p>点击位置(x, y), 您可以通过”开发者选项”开启指针位置来确定点击坐标。</p><h3 id="Swipe-x1-y1-x2-y2-duration"><a href="#Swipe-x1-y1-x2-y2-duration" class="headerlink" title="Swipe(x1, y1, x2, y2, [duration])"></a>Swipe(x1, y1, x2, y2, [duration])</h3><ul><li>x1, y1 {number} 滑动起点的坐标</li><li>x2, y2 {number} 滑动终点的坐标</li><li>duration {number} 滑动动作所用的时间</li></ul><p>滑动。从(x1, y1)位置滑动到(x2, y2)位置。</p><h2 id="设备-Device"><a href="#设备-Device" class="headerlink" title="设备 - Device"></a>设备 - Device</h2><p>device 模块提供了与设备有关的信息与操作，例如获取设备宽高，内存使用率，IMEI，调整设备亮度、音量等。</p><p>此模块的部分函数，例如调整音量，需要”修改系统设置”的权限。如果没有该权限，会抛出<code>SecurityException</code>并跳转到权限设置界面。</p><h2 id="1、获取设备信息"><a href="#1、获取设备信息" class="headerlink" title="1、获取设备信息"></a>1、获取设备信息</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">device.<span class="property">width</span></span><br><span class="line">设备屏幕分辨率宽度。例如<span class="number">1080</span>。</span><br><span class="line"></span><br><span class="line">device.<span class="property">height</span></span><br><span class="line">设备屏幕分辨率高度。例如<span class="number">1920</span>。</span><br><span class="line"></span><br><span class="line">device.<span class="property">buildId</span></span><br><span class="line">修订版本号，或者诸如<span class="string">&quot;M4-rc20&quot;</span>的标识。</span><br><span class="line"></span><br><span class="line">device.<span class="property">broad</span></span><br><span class="line">设备的主板型号。</span><br><span class="line"></span><br><span class="line">device.<span class="property">brand</span></span><br><span class="line">与产品或硬件相关的厂商品牌，如<span class="string">&quot;Xiaomi&quot;</span>, <span class="string">&quot;Huawei&quot;</span>等。</span><br><span class="line"></span><br><span class="line">device.<span class="property">device</span></span><br><span class="line">设备在工业设计中的名称。</span><br><span class="line"></span><br><span class="line">deivce.<span class="property">model</span></span><br><span class="line">设备型号。</span><br><span class="line"></span><br><span class="line">device.<span class="property">product</span></span><br><span class="line">整个产品的名称。</span><br><span class="line"></span><br><span class="line">device.<span class="property">bootloader</span></span><br><span class="line">设备<span class="title class_">Bootloader</span>的版本。</span><br><span class="line"></span><br><span class="line">device.<span class="property">hardware</span></span><br><span class="line">设备的硬件名称(来自内核命令行或者/proc)。</span><br><span class="line"></span><br><span class="line">device.<span class="property">fingerprint</span></span><br><span class="line">构建(build)的唯一标识码。</span><br><span class="line"></span><br><span class="line">device.<span class="property">serial</span></span><br><span class="line">硬件序列号。</span><br><span class="line"></span><br><span class="line">device.<span class="property">sdkInt</span></span><br><span class="line">安卓系统<span class="variable constant_">API</span>版本。例如安卓<span class="number">4.4</span>的sdkInt为<span class="number">19</span>。</span><br><span class="line"></span><br><span class="line">device.<span class="property">incremental</span></span><br><span class="line"></span><br><span class="line">device.<span class="property">release</span></span><br><span class="line"><span class="title class_">Android</span>系统版本号。例如<span class="string">&quot;5.0&quot;</span>, <span class="string">&quot;7.1.1&quot;</span>。</span><br><span class="line"></span><br><span class="line">device.<span class="property">baseOS</span></span><br><span class="line"></span><br><span class="line">device.<span class="property">securityPatch</span></span><br><span class="line">安全补丁程序级别。</span><br><span class="line"></span><br><span class="line">device.<span class="property">codename</span></span><br><span class="line">开发代号，例如发行版是<span class="string">&quot;REL&quot;</span>。</span><br><span class="line"></span><br><span class="line">device.<span class="title function_">getIMEI</span>()</span><br><span class="line">返回设备的<span class="variable constant_">IMEI</span>.</span><br><span class="line"></span><br><span class="line">device.<span class="title function_">getAndroidId</span>()</span><br><span class="line">返回设备的<span class="title class_">Android</span> <span class="variable constant_">ID</span>。</span><br><span class="line"><span class="title class_">Android</span> <span class="variable constant_">ID</span>为一个用<span class="number">16</span>进制字符串表示的<span class="number">64</span>位整数，在设备第一次使用时随机生成，之后不会更改，除非恢复出厂设置。</span><br><span class="line"></span><br><span class="line">device.<span class="title function_">getMacAddress</span>()</span><br><span class="line">返回设备的<span class="title class_">Mac</span>地址。该函数需要在有<span class="variable constant_">WLAN</span>连接的情况下才能获取，否则会返回<span class="literal">null</span>。</span><br><span class="line">可能的后续修改：未来可能增加有root权限的情况下通过root权限获取，从而在没有<span class="variable constant_">WLAN</span>连接的情况下也能返回正确的<span class="title class_">Mac</span>地址，因此请勿使用此函数判断<span class="variable constant_">WLAN</span>连接。</span><br><span class="line"></span><br><span class="line">device.<span class="title function_">getTotalMem</span>()</span><br><span class="line">返回设备内存总量，单位字节(B)。1MB = <span class="number">1024</span> * 1024B。</span><br><span class="line"></span><br><span class="line">device.<span class="title function_">getAvailMem</span>()</span><br><span class="line">返回设备当前可用的内存，单位字节(B)。</span><br><span class="line"></span><br><span class="line">device.<span class="title function_">getBattery</span>()</span><br><span class="line"><span class="number">0.0</span>~<span class="number">100.0</span>的浮点数</span><br><span class="line">返回当前电量百分比。</span><br><span class="line"></span><br><span class="line">device.<span class="title function_">isCharging</span>()</span><br><span class="line">返回设备是否正在充电。</span><br></pre></td></tr></table></figure><h3 id="2、获取并改变设备亮度"><a href="#2、获取并改变设备亮度" class="headerlink" title="2、获取并改变设备亮度"></a>2、获取并改变设备亮度</h3><h4 id="device-getBrightness"><a href="#device-getBrightness" class="headerlink" title="device.getBrightness()"></a>device.getBrightness()</h4><p>返回当前的(手动)亮度。</p><h4 id="device-getBrightnessMode"><a href="#device-getBrightnessMode" class="headerlink" title="device.getBrightnessMode()"></a>device.getBrightnessMode()</h4><p>返回当前亮度模式，0 为手动亮度，1 为自动亮度。</p><h4 id="device-setBrightness-b"><a href="#device-setBrightness-b" class="headerlink" title="device.setBrightness(b)"></a>device.setBrightness(b)</h4><p>b {number} 亮度，</p><p>如果当前是自动亮度模式，该函数不会影响屏幕的亮度。</p><p>此函数需要”修改系统设置”的权限。如果没有该权限，会抛出 SecurityException 并跳转到权限设置界面。</p><h4 id="device-setBrightnessMode-mode"><a href="#device-setBrightnessMode-mode" class="headerlink" title="device.setBrightnessMode(mode)"></a>device.setBrightnessMode(mode)</h4><p>mode {number} 亮度模式，</p><p>0 为手动亮度，1 为自动亮度<br>设置当前亮度模式。</p><p>此函数需要”修改系统设置”的权限。如果没有该权限，会抛出 SecurityException 并跳转到权限设置界面。</p><h2 id="3、获取并改变设备音量"><a href="#3、获取并改变设备音量" class="headerlink" title="3、获取并改变设备音量"></a>3、获取并改变设备音量</h2><h4 id="device-getMusicVolume"><a href="#device-getMusicVolume" class="headerlink" title="device.getMusicVolume()"></a>device.getMusicVolume()</h4><p>返回当前媒体音量。</p><h4 id="device-getNotificationVolume"><a href="#device-getNotificationVolume" class="headerlink" title="device.getNotificationVolume()"></a>device.getNotificationVolume()</h4><p>返回当前通知音量。</p><h4 id="device-getAlarmVolume"><a href="#device-getAlarmVolume" class="headerlink" title="device.getAlarmVolume()"></a>device.getAlarmVolume()</h4><p>返回当前闹钟音量。</p><h4 id="device-getMusicMaxVolume"><a href="#device-getMusicMaxVolume" class="headerlink" title="device.getMusicMaxVolume()"></a>device.getMusicMaxVolume()</h4><p>返回媒体音量的最大值。</p><h4 id="device-getNotificationMaxVolume"><a href="#device-getNotificationMaxVolume" class="headerlink" title="device.getNotificationMaxVolume()"></a>device.getNotificationMaxVolume()</h4><p>返回通知音量的最大值。</p><h4 id="device-getAlarmMaxVolume"><a href="#device-getAlarmMaxVolume" class="headerlink" title="device.getAlarmMaxVolume()"></a>device.getAlarmMaxVolume()</h4><p>返回闹钟音量的最大值。</p><h4 id="device-setMusicVolume-volume"><a href="#device-setMusicVolume-volume" class="headerlink" title="device.setMusicVolume(volume)"></a>device.setMusicVolume(volume)</h4><p>volume {number} 音量</p><p>设置当前媒体音量。</p><p>此函数需要”修改系统设置”的权限。如果没有该权限，会抛出 SecurityException 并跳转到权限设置界面。</p><h4 id="device-setNotificationVolume-volume"><a href="#device-setNotificationVolume-volume" class="headerlink" title="device.setNotificationVolume(volume)"></a>device.setNotificationVolume(volume)</h4><p>volume {number} 音量</p><p>设置当前通知音量。</p><p>此函数需要”修改系统设置”的权限。如果没有该权限，会抛出 SecurityException 并跳转到权限设置界面。</p><h4 id="device-setAlarmVolume-volume"><a href="#device-setAlarmVolume-volume" class="headerlink" title="device.setAlarmVolume(volume)"></a>device.setAlarmVolume(volume)</h4><p>volume {number} 音量</p><p>设置当前闹钟音量。</p><p>此函数需要”修改系统设置”的权限。如果没有该权限，会抛出 SecurityException 并跳转到权限设置界面。</p><h2 id="4、获取并改变设备屏幕状态"><a href="#4、获取并改变设备屏幕状态" class="headerlink" title="4、获取并改变设备屏幕状态"></a>4、获取并改变设备屏幕状态</h2><h3 id="device-isScreenOn"><a href="#device-isScreenOn" class="headerlink" title="device.isScreenOn()"></a>device.isScreenOn()</h3><ul><li>返回 {boolean}</li></ul><p>返回设备屏幕是否是亮着的。如果屏幕亮着，返回<code>true</code>; 否则返回<code>false</code>。</p><p>需要注意的是，类似于 vivo xplay 系列的息屏时钟不属于”屏幕亮着”的情况，虽然屏幕确实亮着但只能显示时钟而且不可交互，此时<code>isScreenOn()</code>也会返回<code>false</code>。</p><h3 id="device-wakeUp"><a href="#device-wakeUp" class="headerlink" title="device.wakeUp()"></a>device.wakeUp()</h3><p>唤醒设备。包括唤醒设备 CPU、屏幕等。可以用来点亮屏幕。</p><h3 id="device-wakeUpIfNeeded"><a href="#device-wakeUpIfNeeded" class="headerlink" title="device.wakeUpIfNeeded()"></a>device.wakeUpIfNeeded()</h3><p>如果屏幕没有点亮，则唤醒设备。</p><h3 id="device-keepScreenOn-timeout"><a href="#device-keepScreenOn-timeout" class="headerlink" title="device.keepScreenOn([timeout])"></a>device.keepScreenOn([timeout])</h3><ul><li><code>timeout</code> {number} 屏幕保持常亮的时间, 单位毫秒。如果不加此参数，则一直保持屏幕常亮。</li></ul><p>保持屏幕常亮。</p><p>此函数无法阻止用户使用锁屏键等正常关闭屏幕，只能使得设备在无人操作的情况下保持屏幕常亮；</p><p>同时，如果此函数调用时屏幕没有点亮，则会唤醒屏幕。</p><p>在某些设备上，如果不加参数 timeout，只能在 Auto.js 的界面保持屏幕常亮，在其他界面会自动失效，这是因为设备的省电策略造成的。因此，建议使用比较长的时长来代替”一直保持屏幕常亮”的功能，例如<code>device.keepScreenOn(3600 * 1000)</code>。</p><p>可以使用<code>device.cancelKeepingAwake()</code>来取消屏幕常亮。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//一直保持屏幕常亮</span><br><span class="line">device.keepScreenOn()</span><br></pre></td></tr></table></figure><h3 id="device-keepScreenDim-timeout"><a href="#device-keepScreenDim-timeout" class="headerlink" title="device.keepScreenDim([timeout])"></a>device.keepScreenDim([timeout])</h3><ul><li><code>timeout</code> {number} 屏幕保持常亮的时间, 单位毫秒。如果不加此参数，则一直保持屏幕常亮。</li></ul><p>保持屏幕常亮，但允许屏幕变暗来节省电量。</p><p>此函数可以用于定时脚本唤醒屏幕操作，不需要用户观看屏幕，可以让屏幕变暗来节省电量。</p><p>此函数无法阻止用户使用锁屏键等正常关闭屏幕，只能使得设备在无人操作的情况下保持屏幕常亮；</p><p>同时，如果此函数调用时屏幕没有点亮，则会唤醒屏幕。</p><p>可以使用<code>device.cancelKeepingAwake()</code>来取消屏幕常亮。</p><h3 id="device-cancelKeepingAwake"><a href="#device-cancelKeepingAwake" class="headerlink" title="device.cancelKeepingAwake()"></a>device.cancelKeepingAwake()</h3><p>取消设备保持唤醒状态。</p><p>用于取消<code>device.keepScreenOn()</code>, <code>device.keepScreenDim()</code>等函数设置的屏幕常亮。</p><h2 id="5、设置设备震动状态"><a href="#5、设置设备震动状态" class="headerlink" title="5、设置设备震动状态"></a>5、设置设备震动状态</h2><h3 id="device-vibrate-millis"><a href="#device-vibrate-millis" class="headerlink" title="device.vibrate(millis)"></a>device.vibrate(millis)</h3><ul><li><code>millis</code> {number} 震动时间，单位毫秒</li></ul><p>使设备震动一段时间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//震动两秒</span><br><span class="line">device.vibrate(2000);</span><br></pre></td></tr></table></figure><h3 id="device-cancelVibration"><a href="#device-cancelVibration" class="headerlink" title="device.cancelVibration()"></a>device.cancelVibration()</h3><p>如果设备处于震动状态，则取消震动。</p><h2 id="对话框-Dialogs"><a href="#对话框-Dialogs" class="headerlink" title="对话框 - Dialogs"></a>对话框 - Dialogs</h2><h2 id="1、对话框中的回调和-Promise"><a href="#1、对话框中的回调和-Promise" class="headerlink" title="1、对话框中的回调和 Promise"></a>1、对话框中的回调和 Promise</h2><h3 id="alert（str）"><a href="#alert（str）" class="headerlink" title="alert（str）"></a>alert（str）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert（<span class="string">&quot;hello&quot;</span>）</span><br></pre></td></tr></table></figure><h3 id="confirm（str）"><a href="#confirm（str）" class="headerlink" title="confirm（str）"></a>confirm（str）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clear = <span class="title function_">confirm</span>(<span class="string">&quot;要清除所有缓存吗?&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (clear) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;清除成功!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;ui&quot;</span>;</span><br><span class="line"><span class="comment">//回调的形式</span></span><br><span class="line"><span class="title function_">confirm</span>(<span class="string">&quot;你确定吗？&quot;</span>, <span class="string">&quot;这里是要写的内容&quot;</span>, <span class="keyword">function</span> (<span class="params">bool</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (bool) &#123;</span><br><span class="line">    <span class="title function_">toast</span>(<span class="string">&quot;你点击了确定&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">toast</span>(<span class="string">&quot;你点击了取消&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise形式</span></span><br><span class="line"><span class="title function_">confirm</span>(<span class="string">&quot;要清除所有缓存吗?&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">clear</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (clear) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;清除成功!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2、对话框：alert-和-confirm"><a href="#2、对话框：alert-和-confirm" class="headerlink" title="2、对话框：alert 和 confirm"></a>2、对话框：alert 和 confirm</h2><h3 id="dialogs-alert-title-content-callback"><a href="#dialogs-alert-title-content-callback" class="headerlink" title="dialogs.alert(title[, content, callback])"></a>dialogs.alert(title[, content, callback])</h3><ul><li><code>title</code> {string} 对话框的标题。</li><li><code>content</code> {string} 可选，对话框的内容。默认为空。</li><li><code>callback</code> {Function} 回调函数，可选。当用户点击确定时被调用,一般用于 ui 模式。</li></ul><p>显示一个只包含“确定”按钮的提示对话框。直至用户点击确定脚本才继续运行。</p><p>该函数也可以作为全局函数使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&quot;出现错误~&quot;, &quot;出现未知错误，请联系脚本作者”);</span><br></pre></td></tr></table></figure><p>在 ui 模式下该函数返回一个<code>Promise</code>。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;ui&quot;;</span><br><span class="line"></span><br><span class="line">alert(&quot;嘿嘿嘿&quot;).then(()=&gt;&#123;</span><br><span class="line">    //当点击确定后会执行这里</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="dialogs-confirm-title-content-callback"><a href="#dialogs-confirm-title-content-callback" class="headerlink" title="dialogs.confirm(title[, content, callback])"></a>dialogs.confirm(title[, content, callback])</h3><ul><li><code>title</code> {string} 对话框的标题。</li><li><code>content</code> {string} 可选，对话框的内容。默认为空。</li><li><code>callback</code> {Function} 回调函数，可选。当用户点击确定时被调用,一般用于 ui 模式。</li></ul><p>显示一个包含“确定”和“取消”按钮的提示对话框。如果用户点击“确定”则返回 <code>true</code> ，否则返回 <code>false</code> 。</p><p>该函数也可以作为全局函数使用。</p><p>在 ui 模式下该函数返回一个<code>Promise</code>。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;ui&quot;;</span><br><span class="line">confirm(&quot;确定吗&quot;).then(value=&gt;&#123;</span><br><span class="line">    //当点击确定后会执行这里, value为true或false, 表示点击&quot;确定&quot;或&quot;取消&quot;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3、对话框：rawInput-和-input"><a href="#3、对话框：rawInput-和-input" class="headerlink" title="3、对话框：rawInput 和 input"></a>3、对话框：rawInput 和 input</h2><h3 id="dialogs-rawInput-title-prefill-callback"><a href="#dialogs-rawInput-title-prefill-callback" class="headerlink" title="dialogs.rawInput(title[, prefill, callback])"></a>dialogs.rawInput(title[, prefill, callback])</h3><ul><li><code>title</code> {string} 对话框的标题。</li><li><code>prefill</code> {string} 输入框的初始内容，可选，默认为空。</li><li><code>callback</code> {Function} 回调函数，可选。当用户点击确定时被调用,一般用于 ui 模式。</li></ul><p>显示一个包含输入框的对话框，等待用户输入内容，并在用户点击确定时将输入的字符串返回。如果用户取消了输入，返回 null。</p><p>该函数也可以作为全局函数使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var name = rawInput(&quot;请输入您的名字&quot;, &quot;小明&quot;);</span><br><span class="line">alert(&quot;您的名字是&quot; + name);</span><br></pre></td></tr></table></figure><p>在 ui 模式下该函数返回一个<code>Promise</code>。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;ui&quot;;</span><br><span class="line">rawInput(&quot;请输入您的名字&quot;, &quot;小明&quot;).then(name =&gt; &#123;</span><br><span class="line">    alert(&quot;您的名字是&quot; + name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当然也可以使用回调函数，例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rawInput(&quot;请输入您的名字&quot;, &quot;小明&quot;, name =&gt; &#123;</span><br><span class="line">     alert(&quot;您的名字是&quot; + name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="dialogs-input-title-prefill-callback"><a href="#dialogs-input-title-prefill-callback" class="headerlink" title="dialogs.input(title[, prefill, callback])"></a>dialogs.input(title[, prefill, callback])</h3><p>等效于 <code>eval(dialogs.rawInput(title, prefill, callback))</code>, 该函数和 rawInput 的区别在于，会把输入的字符串用 eval 计算一遍再返回，返回的可能不是字符串。</p><p>可以用该函数输入数字、数组等。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var age = dialogs.input(&quot;请输入您的年龄&quot;, &quot;18&quot;);</span><br><span class="line"></span><br><span class="line">// new Date().getYear() + 1900 可获取当前年份</span><br><span class="line"></span><br><span class="line">var year = new Date().getYear() + 1900 - age;</span><br><span class="line"></span><br><span class="line">alert(&quot;您的出生年份是&quot; + year);</span><br></pre></td></tr></table></figure><p>在 ui 模式下该函数返回一个<code>Promise</code>。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;ui&quot;;</span><br><span class="line">dialogs.input(&quot;请输入您的年龄&quot;, &quot;18&quot;).then(age =&gt; &#123;</span><br><span class="line">    var year = new Date().getYear() + 1900 - age;</span><br><span class="line">    alert(&quot;您的出生年份是&quot; + year);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4、对话框：选项列表"><a href="#4、对话框：选项列表" class="headerlink" title="4、对话框：选项列表"></a>4、对话框：选项列表</h2><h3 id="dialogs-select-title-items-callback"><a href="#dialogs-select-title-items-callback" class="headerlink" title="dialogs.select(title, items, callback)"></a>dialogs.select(title, items, callback)</h3><ul><li><code>title</code> {string} 对话框的标题。</li><li><code>items</code> {Array} 对话框的选项列表，是一个字符串数组。</li><li><code>callback</code> {Function} 回调函数，可选。当用户点击确定时被调用,一般用于 ui 模式。</li></ul><p>显示一个带有选项列表的对话框，等待用户选择，返回用户选择的选项索引(0 ~ item.length - 1)。如果用户取消了选择，返回-1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> options = [<span class="string">&quot;选项A&quot;</span>, <span class="string">&quot;选项B&quot;</span>, <span class="string">&quot;选项C&quot;</span>, <span class="string">&quot;选项D&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = dialogs.<span class="title function_">select</span>(<span class="string">&quot;请选择一个选项&quot;</span>, options);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="title function_">toast</span>(<span class="string">&quot;您选择的是&quot;</span> + options[i]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">toast</span>(<span class="string">&quot;您取消了选择&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 ui 模式下该函数返回一个<code>Promise</code>。例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;ui&quot;</span>;</span><br><span class="line"></span><br><span class="line">dialogs</span><br><span class="line">  .<span class="title function_">select</span>(<span class="string">&quot;请选择一个选项&quot;</span>, [<span class="string">&quot;选项A&quot;</span>, <span class="string">&quot;选项B&quot;</span>, <span class="string">&quot;选项C&quot;</span>, <span class="string">&quot;选项D&quot;</span>])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">toast</span>(i);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="5、对话框：单选和多选"><a href="#5、对话框：单选和多选" class="headerlink" title="5、对话框：单选和多选"></a>5、对话框：单选和多选</h2><h3 id="dialogs-singleChoice-title-items-index-callback"><a href="#dialogs-singleChoice-title-items-index-callback" class="headerlink" title="dialogs.singleChoice(title, items[, index, callback])"></a>dialogs.singleChoice(title, items[, index, callback])</h3><ul><li><code>title</code> {string} 对话框的标题。</li><li><code>items</code> {Array} 对话框的选项列表，是一个字符串数组。</li><li><code>index</code> {number} 对话框的初始选项的位置，默认为 0。</li><li><code>callback</code> {Function} 回调函数，可选。当用户点击确定时被调用,一般用于 ui 模式。</li></ul><p>显示一个单选列表对话框，等待用户选择，返回用户选择的选项索引(0 ~ item.length - 1)。如果用户取消了选择，返回-1。</p><h3 id="dialogs-multiChoice-title-items-indices-callback"><a href="#dialogs-multiChoice-title-items-indices-callback" class="headerlink" title="dialogs.multiChoice(title, items[, indices, callback])"></a>dialogs.multiChoice(title, items[, indices, callback])</h3><ul><li><code>title</code> {string} 对话框的标题。</li><li><code>items</code> {Array} 对话框的选项列表，是一个字符串数组。</li><li><code>indices</code> {Array} 选项列表中初始选中的项目索引的数组，默认为空数组。</li><li><code>callback</code> {Function} 回调函数，可选。当用户点击确定时被调用,一般用于 ui 模式。</li></ul><p>显示一个多选列表对话框，等待用户选择，返回用户选择的选项索引的数组。如果用户取消了选择，返回<code>[]</code>。</p><p>在 ui 模式下该函数返回一个<code>Promise</code>。</p><h2 id="对话框-Dialogs-1"><a href="#对话框-Dialogs-1" class="headerlink" title="对话框 - Dialogs"></a>对话框 - Dialogs</h2><p>主讲：<strong>阿涛 QQ/微信：656206105</strong></p><p><strong>微信公众号：立体空间</strong></p><p><img src="dyh.jpg"></p><h2 id="6、对话框：自定义对话框"><a href="#6、对话框：自定义对话框" class="headerlink" title="6、对话框：自定义对话框"></a>6、对话框：自定义对话框</h2><h3 id="dialogs-build-properties"><a href="#dialogs-build-properties" class="headerlink" title="dialogs.build(properties)"></a>dialogs.build(properties)</h3><ul><li><code>properties</code> {Object} 对话框属性，用于配置对话框。</li><li>返回 {Dialog}</li></ul><p>创建一个可自定义的对话框，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dialogs.build(&#123;</span><br><span class="line">    //对话框标题</span><br><span class="line">    title: &quot;发现新版本&quot;,</span><br><span class="line">    //对话框内容</span><br><span class="line">    content: &quot;更新日志: 新增了若干了BUG&quot;,</span><br><span class="line">    //确定键内容</span><br><span class="line">    positive: &quot;下载&quot;,</span><br><span class="line">    //取消键内容</span><br><span class="line">    negative: &quot;取消&quot;,</span><br><span class="line">    //中性键内容</span><br><span class="line">    neutral: &quot;到浏览器下载&quot;,</span><br><span class="line">    //勾选框内容</span><br><span class="line">    checkBoxPrompt: &quot;不再提示&quot;</span><br><span class="line">&#125;).show()</span><br></pre></td></tr></table></figure><p>选项 properties 可供配置的项目为:</p><ul><li><p><code>title</code> {string} 对话框标题</p></li><li><p><code>titleColor</code> {string} | {number} 对话框标题的颜色</p></li><li><p><code>buttonRippleColor</code> {string} | {number} 对话框按钮的波纹效果颜色</p></li><li><p><code>icon</code> {string} | {Image} 对话框的图标，是一个 URL 或者图片对象</p></li><li><p><code>content</code> {string} 对话框文字内容</p></li><li><p><code>contentColor</code>{string} | {number} 对话框文字内容的颜色</p></li><li><p><code>contentLineSpacing</code>{number} 对话框文字内容的行高倍数，1.0 为一倍行高</p></li><li><p><code>items</code> {Array} 对话框列表的选项</p></li><li><p><code>itemsColor</code> {string} | {number} 对话框列表的选项的文字颜色</p></li><li><p>```<br>itemsSelectMode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  &#123;string&#125; 对话框列表的选项选择模式，可以为:</span><br><span class="line"></span><br><span class="line">  - `select` 普通选择模式</span><br><span class="line">  - `single` 单选模式</span><br><span class="line">  - `multi` 多选模式</span><br><span class="line"></span><br><span class="line">- `itemsSelectedIndex` &#123;number&#125; | &#123;Array&#125; 对话框列表中预先选中的项目索引，如果是单选模式为一个索引；多选模式则为数组</span><br><span class="line"></span><br><span class="line">- `positive` &#123;string&#125; 对话框确定按钮的文字内容(最右边按钮)</span><br><span class="line"></span><br><span class="line">- `positiveColor` &#123;string&#125; | &#123;number&#125; 对话框确定按钮的文字颜色(最右边按钮)</span><br><span class="line"></span><br><span class="line">- `neutral` &#123;string&#125; 对话框中立按钮的文字内容(最左边按钮)</span><br><span class="line"></span><br><span class="line">- `neutralColor` &#123;string&#125; | &#123;number&#125; 对话框中立按钮的文字颜色(最左边按钮)</span><br><span class="line"></span><br><span class="line">- `negative` &#123;string&#125; 对话框取消按钮的文字内容(确定按钮左边的按钮)</span><br><span class="line"></span><br><span class="line">- `negativeColor` &#123;string&#125; | &#123;number&#125; 对话框取消按钮的文字颜色(确定按钮左边的按钮)</span><br><span class="line"></span><br><span class="line">- `checkBoxPrompt` &#123;string&#125; 勾选框文字内容</span><br><span class="line"></span><br><span class="line">- `checkBoxChecked` &#123;boolean&#125; 勾选框是否勾选</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  progress</span><br></pre></td></tr></table></figure><p>{Object} 配置对话框进度条的对象：</p><ul><li><code>max</code> {number} 进度条的最大值，如果为-1 则为无限循环的进度条</li><li><code>horizontal</code> {boolean} 如果为 true, 则对话框无限循环的进度条为水平进度条</li><li><code>showMinMax</code> {boolean} 是否显示进度条的最大值和最小值</li></ul></li><li><p><code>cancelable</code> {boolean} 对话框是否可取消，如果为 false，则对话框只能用代码手动取消</p></li><li><p><code>canceledOnTouchOutside</code> {boolean} 对话框是否在点击对话框以外区域时自动取消，默认为 true</p></li><li><p><code>inputHint</code> {string} 对话框的输入框的输入提示</p></li><li><p><code>inputPrefill</code> {string} 对话框输入框的默认输入内容</p></li></ul><p>通过这些选项可以自定义一个对话框，并通过监听返回的 Dialog 对象的按键、输入事件来实现交互。</p><h2 id="7、对话框事件：显示和消失事件"><a href="#7、对话框事件：显示和消失事件" class="headerlink" title="7、对话框事件：显示和消失事件"></a>7、对话框事件：显示和消失事件</h2><h3 id="事件-show"><a href="#事件-show" class="headerlink" title="事件: show"></a>事件: show</h3><ul><li><code>dialog</code> {Dialog} 对话框</li></ul><p>对话框显示时会触发的事件。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dialogs.build(&#123;</span><br><span class="line">    title: &quot;标题&quot;</span><br><span class="line">&#125;).on(&quot;show&quot;, (dialog)=&gt;&#123;</span><br><span class="line">    toast(&quot;对话框显示了&quot;);</span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure><h3 id="事件-dismiss"><a href="#事件-dismiss" class="headerlink" title="事件: dismiss"></a>事件: dismiss</h3><ul><li><code>dialog</code> {Dialog} 对话框</li></ul><p>对话框消失时会触发的事件。对话框被取消或者手动调用<code>dialog.dismiss()</code>函数都会触发该事件。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var d = dialogs.build(&#123;</span><br><span class="line">    title: &quot;标题&quot;,</span><br><span class="line">    positive: &quot;确定&quot;,</span><br><span class="line">    negative: &quot;取消&quot;</span><br><span class="line">&#125;).on(&quot;dismiss&quot;, (dialog)=&gt;&#123;</span><br><span class="line">    toast(&quot;对话框消失了&quot;);</span><br><span class="line">&#125;).show();</span><br><span class="line"></span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">    d.dismiss();</span><br><span class="line">&#125;, 5000);</span><br></pre></td></tr></table></figure><h2 id="8、对话框事件：按钮事件"><a href="#8、对话框事件：按钮事件" class="headerlink" title="8、对话框事件：按钮事件"></a>8、对话框事件：按钮事件</h2><h3 id="事件-positive"><a href="#事件-positive" class="headerlink" title="事件: positive"></a>事件: positive</h3><ul><li><code>dialog</code> {Dialog} 对话框</li></ul><p>确定按钮按下时触发的事件。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var d = dialogs.build(&#123;</span><br><span class="line">    title: &quot;标题&quot;,</span><br><span class="line">    positive: &quot;确定&quot;,</span><br><span class="line">    negative: &quot;取消&quot;</span><br><span class="line">&#125;).on(&quot;positive&quot;, (dialog)=&gt;&#123;</span><br><span class="line">    toast(&quot;你点击了确定&quot;);</span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure><h3 id="事件-negative"><a href="#事件-negative" class="headerlink" title="事件: negative"></a>事件: negative</h3><ul><li><code>dialog</code> {Dialog} 对话框</li></ul><p>取消按钮按下时触发的事件。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var d = dialogs.build(&#123;</span><br><span class="line">    title: &quot;标题&quot;,</span><br><span class="line">    positive: &quot;确定&quot;,</span><br><span class="line">    negative: &quot;取消&quot;</span><br><span class="line">&#125;).on(&quot;negative&quot;, (dialog)=&gt;&#123;</span><br><span class="line">    toast(&quot;你点击了取消&quot;);</span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure><h3 id="事件-cancel"><a href="#事件-cancel" class="headerlink" title="事件: cancel"></a>事件: cancel</h3><ul><li><code>dialog</code> {Dialog} 对话框</li></ul><p>对话框被取消时会触发的事件。一个对话框可能按取消按钮、返回键取消或者点击对话框以外区域取消。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dialogs.build(&#123;</span><br><span class="line">    title: &quot;标题&quot;,</span><br><span class="line">    positive: &quot;确定&quot;,</span><br><span class="line">    negative: &quot;取消&quot;</span><br><span class="line">&#125;).on(&quot;cancel&quot;, (dialog)=&gt;&#123;</span><br><span class="line">    toast(&quot;对话框取消了&quot;);</span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure><h3 id="事件-neutral"><a href="#事件-neutral" class="headerlink" title="事件: neutral"></a>事件: neutral</h3><ul><li><code>dialog</code> {Dialog} 对话框</li></ul><p>中性按钮按下时触发的事件。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var d = dialogs.build(&#123;</span><br><span class="line">    title: &quot;标题&quot;,</span><br><span class="line">    positive: &quot;确定&quot;,</span><br><span class="line">    negative: &quot;取消&quot;,</span><br><span class="line">    neutral: &quot;稍后提示&quot;</span><br><span class="line">&#125;).on(&quot;positive&quot;, (dialog)=&gt;&#123;</span><br><span class="line">    toast(&quot;你点击了稍后提示&quot;);</span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure><h3 id="事件-any"><a href="#事件-any" class="headerlink" title="事件: any"></a>事件: any</h3><ul><li><code>dialog</code> {Dialog} 对话框</li><li>action {string} 被点击的按钮，可能的值为:<ul><li><code>positive</code> 确定按钮</li><li><code>negative</code> 取消按钮</li><li><code>neutral</code> 中性按钮</li></ul></li></ul><p>任意按钮按下时触发的事件。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var d = dialogs.build(&#123;</span><br><span class="line">    title: &quot;标题&quot;,</span><br><span class="line">    positive: &quot;确定&quot;,</span><br><span class="line">    negative: &quot;取消&quot;,</span><br><span class="line">    neutral: &quot;稍后提示&quot;</span><br><span class="line">&#125;).on(&quot;any&quot;, (action, dialog)=&gt;&#123;</span><br><span class="line">    if(action == &quot;positive&quot;)&#123;</span><br><span class="line">        toast(&quot;你点击了确定&quot;);</span><br><span class="line">    &#125;else if(action == &quot;negative&quot;)&#123;</span><br><span class="line">        toast(&quot;你点击了取消&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure><h2 id="9、对话框事件：单选多选事件"><a href="#9、对话框事件：单选多选事件" class="headerlink" title="9、对话框事件：单选多选事件"></a>9、对话框事件：单选多选事件</h2><h3 id="事件-item-select"><a href="#事件-item-select" class="headerlink" title="事件: item_select"></a>事件: item_select</h3><ul><li><code>index</code> {number} 被选中的项目索引，从 0 开始</li><li><code>item</code> {Object} 被选中的项目</li><li><code>dialog</code> {Dialog} 对话框</li></ul><p>对话框列表(itemsSelectMode 为”select”)的项目被点击选中时触发的事件。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var d = dialogs.build(&#123;</span><br><span class="line">    title: &quot;请选择&quot;,</span><br><span class="line">    positive: &quot;确定&quot;,</span><br><span class="line">    negative: &quot;取消&quot;,</span><br><span class="line">    items: [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;],</span><br><span class="line">    itemsSelectMode: &quot;select&quot;</span><br><span class="line">&#125;).on(&quot;item_select&quot;, (index, item, dialog)=&gt;&#123;</span><br><span class="line">    toast(&quot;您选择的是第&quot; + (index + 1) + &quot;项, 选项为&quot; + item);</span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure><h3 id="事件-single-choice"><a href="#事件-single-choice" class="headerlink" title="事件: single_choice"></a>事件: single_choice</h3><ul><li><code>index</code> {number} 被选中的项目索引，从 0 开始</li><li><code>item</code> {Object} 被选中的项目</li><li><code>dialog</code> {Dialog} 对话框</li></ul><p>对话框单选列表(itemsSelectMode 为”singleChoice”)的项目被选中并点击确定时触发的事件。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dialogs.build(&#123;</span><br><span class="line">    title: &#x27;这是选择框事件&#x27;,</span><br><span class="line">    items: [&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;,&#x27;D&#x27;],</span><br><span class="line">    itemsSelectMode: &#x27;single&#x27;,</span><br><span class="line">    itemsSelectedIndex: 0,</span><br><span class="line">    positive: &#x27;确定&#x27;</span><br><span class="line">&#125;).on(&#x27;single_choice&#x27;,function(index,item,dialog)&#123;</span><br><span class="line"></span><br><span class="line">    toastLog(index+&quot;----&quot;+item)</span><br><span class="line">    // 3----D</span><br><span class="line"></span><br><span class="line">    toastLog(&quot;你选择的是第&quot;+(index+1).toString()+&quot;个选项：&quot;+item)</span><br><span class="line">&#125;).show()</span><br></pre></td></tr></table></figure><h3 id="事件-multi-choice-【失效】"><a href="#事件-multi-choice-【失效】" class="headerlink" title="事件: multi_choice 【失效】"></a>事件: multi_choice 【失效】</h3><ul><li><code>indices</code> {Array} 被选中的项目的索引的数组</li><li><code>items</code> {Array} 被选中的项目的数组</li><li><code>dialog</code> {Dialog} 对话框</li></ul><p>对话框多选列表(itemsSelectMode 为”multiChoice”)的项目被选中并点击确定时触发的事件。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var d = dialogs.build(&#123;</span><br><span class="line">    title: &quot;请选择&quot;,</span><br><span class="line">    positive: &quot;确定&quot;,</span><br><span class="line">    negative: &quot;取消&quot;,</span><br><span class="line">    items: [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;],</span><br><span class="line">    itemsSelectMode: &quot;multiChoice&quot;</span><br><span class="line">&#125;).on(&quot;item_select&quot;, (indices, items, dialog)=&gt;&#123;</span><br><span class="line">    toast(util.format(&quot;您选择的项目为%o, 选项为%o&quot;, indices, items);</span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure><h2 id="10、对话框事件：输入事件"><a href="#10、对话框事件：输入事件" class="headerlink" title="10、对话框事件：输入事件"></a>10、对话框事件：输入事件</h2><h3 id="事件-input"><a href="#事件-input" class="headerlink" title="事件: input"></a>事件: input</h3><ul><li><code>text</code> {string} 输入框的内容</li><li><code>dialog</code> {Dialog} 对话框</li></ul><p>带有输入框的对话框当点击确定时会触发的事件。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dialogs.build(&#123;</span><br><span class="line">    title: &quot;请输入&quot;,</span><br><span class="line">    positive: &quot;确定&quot;,</span><br><span class="line">    negative: &quot;取消&quot;,</span><br><span class="line">    inputPrefill: &quot;&quot;</span><br><span class="line">&#125;).on(&quot;input&quot;, (text, dialog)=&gt;&#123;</span><br><span class="line">    toast(&quot;你输入的是&quot; + text);</span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure><h3 id="事件-input-change"><a href="#事件-input-change" class="headerlink" title="事件: input_change"></a>事件: input_change</h3><ul><li><code>text</code> {string} 输入框的内容</li><li><code>dialog</code> {Dialog} 对话框</li></ul><p>对话框的输入框的文本发生变化时会触发的事件。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dialogs.build(&#123;</span><br><span class="line">    title: &quot;请输入&quot;,</span><br><span class="line">    positive: &quot;确定&quot;,</span><br><span class="line">    negative: &quot;取消&quot;,</span><br><span class="line">    inputPrefill: &quot;&quot;</span><br><span class="line">&#125;).on(&quot;input_change&quot;, (text, dialog)=&gt;&#123;</span><br><span class="line">    toast(&quot;你输入的是&quot; + text);</span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure><h2 id="11、对话框对象方法"><a href="#11、对话框对象方法" class="headerlink" title="11、对话框对象方法"></a>11、对话框对象方法</h2><h3 id="dialog-getProgress"><a href="#dialog-getProgress" class="headerlink" title="dialog.getProgress()"></a>dialog.getProgress()</h3><ul><li>返回 {number}</li></ul><p>获取当前进度条的进度值，是一个整数</p><h3 id="dialog-getMaxProgress"><a href="#dialog-getMaxProgress" class="headerlink" title="dialog.getMaxProgress()"></a>dialog.getMaxProgress()</h3><ul><li>返回 {number}</li></ul><p>获取当前进度条的最大进度值，是一个整数</p><h3 id="dialog-getActionButton-action"><a href="#dialog-getActionButton-action" class="headerlink" title="dialog.getActionButton(action)"></a>dialog.getActionButton(action)</h3><p>action {string} 动作，包括:</p><ul><li><code>positive</code></li><li><code>negative</code></li><li><code>neutral</code></li></ul><h2 id="事件与监听-Events"><a href="#事件与监听-Events" class="headerlink" title="事件与监听 - Events"></a>事件与监听 - Events</h2><h2 id="1、什么是事件与监听"><a href="#1、什么是事件与监听" class="headerlink" title="1、什么是事件与监听"></a>1、什么是事件与监听</h2><p>events 模块提供了监听手机通知、按键、触摸的接口。您可以用他配合自动操作函数完成自动化工作。</p><p>events 本身是一个 EventEmiiter, 但内置了一些事件、包括按键事件、通知事件、Toast 事件等。</p><p>需要注意的是，事件的处理是单线程的，并且仍然在原线程执行，如果脚本主体或者其他事件处理中有耗时操作、轮询等，则事件将无法得到及时处理（会进入事件队列等待脚本主体或其他事件处理完成才执行）。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">auto();</span><br><span class="line"></span><br><span class="line">//启用按键监听</span><br><span class="line">events.observeKey();</span><br><span class="line">//监听音量上键按下</span><br><span class="line">events.onKeyDown(&quot;volume_up&quot;, function(event)&#123;</span><br><span class="line">//这里不会被执行</span><br><span class="line">    toast(&quot;音量上键被按下了&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">while(true)&#123;</span><br><span class="line">    //死循环</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、监听按键事件"><a href="#2、监听按键事件" class="headerlink" title="2、监听按键事件"></a>2、监听按键事件</h2><h3 id="events-observeKey"><a href="#events-observeKey" class="headerlink" title="events.observeKey()"></a>events.observeKey()</h3><p>启用按键监听，例如音量键、Home 键。按键监听使用无障碍服务实现，如果无障碍服务未启用会抛出异常并提示开启。</p><p>只有这个函数成功执行后, <code>onKeyDown</code>, <code>onKeyUp</code>等按键事件的监听才有效。</p><p>该函数在安卓 4.3 以上才能使用。</p><h3 id="events-onKeyDown-keyName-listener"><a href="#events-onKeyDown-keyName-listener" class="headerlink" title="events.onKeyDown(keyName, listener)"></a>events.onKeyDown(keyName, listener)</h3><ul><li><code>keyName</code> {string} 要监听的按键名称</li><li><code>listener</code> {Function} 按键监听器。参数为一个 KeyEvent</li></ul><p>注册一个按键监听函数，当有 keyName 对应的按键被按下会调用该函数。</p><p>按键事件中所有可用的按键名称为：</p><ul><li><code>volume_up</code> 音量上键</li><li><code>volume_down</code> 音量下键</li><li><code>home</code> 主屏幕键</li><li><code>back</code> 返回键</li><li><code>menu</code> 菜单键</li></ul><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//启用按键监听</span><br><span class="line">events.observeKey();</span><br><span class="line">//监听音量上键按下</span><br><span class="line">events.onKeyDown(&quot;volume_up&quot;, function(event)&#123;</span><br><span class="line">    toast(&quot;音量上键被按下了&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//监听菜单键按下</span><br><span class="line">events.onKeyDown(&quot;menu&quot;, function(event)&#123;</span><br><span class="line">    toast(&quot;菜单键被按下了&quot;);</span><br><span class="line">    exit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="events-onKeyUp-keyName-listener"><a href="#events-onKeyUp-keyName-listener" class="headerlink" title="events.onKeyUp(keyName, listener)"></a>events.onKeyUp(keyName, listener)</h3><ul><li><code>keyName</code> {string} 要监听的按键名称</li><li><code>listener</code> {Function} 按键监听器。参数为一个 KeyEvent。</li></ul><p>注册一个按键监听函数，当有 keyName 对应的按键弹起会调用该函数。</p><p>按键事件中所有可用的按键名称为：</p><ul><li><code>volume_up</code> 音量上键</li><li><code>volume_down</code> 音量下键</li><li><code>home</code> 主屏幕键</li><li><code>back</code> 返回键</li><li><code>menu</code> 菜单键</li></ul><p>一次完整的按键动作包括了按键按下和弹起。按下事件会在手指按下一个按键的”瞬间”触发, 弹起事件则在手指放开这个按键时触发。</p><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//启用按键监听</span><br><span class="line">events.observeKey();</span><br><span class="line">//监听音量下键弹起</span><br><span class="line">events.onKeyDown(&quot;volume_down&quot;, function(event)&#123;</span><br><span class="line">    toast(&quot;音量上键弹起&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//监听Home键弹起</span><br><span class="line">events.onKeyDown(&quot;home&quot;, function(event)&#123;</span><br><span class="line">    toast(&quot;Home键弹起&quot;);</span><br><span class="line">    exit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3、KeyEvent-对象方法"><a href="#3、KeyEvent-对象方法" class="headerlink" title="3、KeyEvent 对象方法"></a>3、KeyEvent 对象方法</h2><h3 id="KeyEvent-getAction"><a href="#KeyEvent-getAction" class="headerlink" title="KeyEvent.getAction()"></a>KeyEvent.getAction()</h3><p>返回事件的动作。包括：</p><ul><li><code>KeyEvent.ACTION_DOWN</code> 按下事件</li><li><code>KeyEvent.ACTION_UP</code> 弹起事件</li></ul><h3 id="KeyEvent-getKeyCode"><a href="#KeyEvent-getKeyCode" class="headerlink" title="KeyEvent.getKeyCode()"></a>KeyEvent.getKeyCode()</h3><p>返回按键的键值。包括：</p><ul><li><code>KeyEvent.KEYCODE_HOME</code> 主页键</li><li><code>KeyEvent.KEYCODE_BACK</code> 返回键</li><li><code>KeyEvent.KEYCODE_MENU</code> 菜单键</li><li><code>KeyEvent.KEYCODE_VOLUME_UP</code> 音量上键</li><li><code>KeyEvent.KEYCODE_VOLUME_DOWN</code> 音量下键</li></ul><h3 id="KeyEvent-getEventTime"><a href="#KeyEvent-getEventTime" class="headerlink" title="KeyEvent.getEventTime()"></a>KeyEvent.getEventTime()</h3><ul><li>返回 {number}</li></ul><p>返回事件发生的时间戳。</p><h3 id="KeyEvent-getDownTime"><a href="#KeyEvent-getDownTime" class="headerlink" title="KeyEvent.getDownTime()"></a>KeyEvent.getDownTime()</h3><p>返回最近一次按下事件的时间戳。如果本身是按下事件，则与<code>getEventTime()</code>相同。</p><h3 id="KeyEvent-keyCodeToString-keyCode"><a href="#KeyEvent-keyCodeToString-keyCode" class="headerlink" title="KeyEvent.keyCodeToString(keyCode)"></a>KeyEvent.keyCodeToString(keyCode)</h3><p>把键值转换为字符串。例如 24 转换为”KEYCODE_HOME”。</p><h2 id="4、事件：key、key-down、key-up"><a href="#4、事件：key、key-down、key-up" class="headerlink" title="4、事件：key、key_down、key_up"></a>4、事件：key、key_down、key_up</h2><h3 id="事件-‘key’"><a href="#事件-‘key’" class="headerlink" title="事件: ‘key’"></a>事件: ‘key’</h3><ul><li><code>keyCode</code> {number} 键值</li><li><code>event</code> {KeyEvent} 事件</li></ul><p>当有按键被按下或弹起时会触发该事件。 例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto();</span><br><span class="line">events.observeKey();</span><br><span class="line">events.on(&quot;key&quot;, function(keyCode, event)&#123;</span><br><span class="line">    //处理按键事件</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中监听器的参数 KeyCode 包括：</p><ul><li><code>keys.home</code> 主页键</li><li><code>keys.back</code> 返回键</li><li><code>keys.menu</code> 菜单键</li><li><code>keys.volume_up</code> 音量上键</li><li><code>keys.volume_down</code> 音量下键</li></ul><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">auto();</span><br><span class="line">events.observeKey();</span><br><span class="line">events.on(&quot;key&quot;, function(keyCode, event)&#123;</span><br><span class="line">    if(keyCode == keys.menu &amp;&amp; event.getAction() == event.ACTION_UP)&#123;</span><br><span class="line">        toast(&quot;菜单键按下&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="事件-‘key-down’"><a href="#事件-‘key-down’" class="headerlink" title="事件: ‘key_down’"></a>事件: ‘key_down’</h3><ul><li><code>keyCode</code> {number} 键值</li><li><code>event</code> {KeyEvent} 事件</li></ul><p>当有按键被按下时会触发该事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto();</span><br><span class="line">events.observeKey();</span><br><span class="line">events.on(&quot;key_down&quot;, function(keyCode, event)&#123;</span><br><span class="line">    //处理按键按下事件</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="事件-‘key-up’"><a href="#事件-‘key-up’" class="headerlink" title="事件: ‘key_up’"></a>事件: ‘key_up’</h3><ul><li><code>keyCode</code> {number} 键值</li><li><code>event</code> {KeyEvent} 事件</li></ul><p>当有按键弹起时会触发该事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto();</span><br><span class="line">events.observeKey();</span><br><span class="line">events.on(&quot;key_up&quot;, function(keyCode, event)&#123;</span><br><span class="line">    //处理按键弹起事件</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5、单次监听按键事件"><a href="#5、单次监听按键事件" class="headerlink" title="5、单次监听按键事件"></a>5、单次监听按键事件</h2><h3 id="events-onceKeyDown-keyName-listener"><a href="#events-onceKeyDown-keyName-listener" class="headerlink" title="events.onceKeyDown(keyName, listener)"></a>events.onceKeyDown(keyName, listener)</h3><ul><li><code>keyName</code> {string} 要监听的按键名称</li><li><code>listener</code> {Function} 按键监听器。参数为一个 KeyEvent</li></ul><p>注册一个按键监听函数，当有 keyName 对应的按键被按下时会调用该函数，之后会注销该按键监听器。</p><p>也就是 listener 只有在 onceKeyDown 调用后的第一次按键事件被调用一次。</p><h3 id="events-onceKeyUp-keyName-listener"><a href="#events-onceKeyUp-keyName-listener" class="headerlink" title="events.onceKeyUp(keyName, listener)"></a>events.onceKeyUp(keyName, listener)</h3><ul><li><code>keyName</code> {string} 要监听的按键名称</li><li><code>listener</code> {Function} 按键监听器。参数为一个 KeyEvent</li></ul><p>注册一个按键监听函数，当有 keyName 对应的按键弹起时会调用该函数，之后会注销该按键监听器。</p><p>也就是 listener 只有在 onceKeyUp 调用后的第一次按键事件被调用一次。</p><h2 id="6、删除按键事件的监听"><a href="#6、删除按键事件的监听" class="headerlink" title="6、删除按键事件的监听"></a>6、删除按键事件的监听</h2><h3 id="events-removeAllKeyDownListeners-keyName"><a href="#events-removeAllKeyDownListeners-keyName" class="headerlink" title="events.removeAllKeyDownListeners(keyName)"></a>events.removeAllKeyDownListeners(keyName)</h3><ul><li><code>keyName</code> {string} 按键名称</li></ul><p>删除该按键的 KeyDown(按下)事件的所有监听。</p><h3 id="events-removeAllKeyUpListeners-keyName"><a href="#events-removeAllKeyUpListeners-keyName" class="headerlink" title="events.removeAllKeyUpListeners(keyName)"></a>events.removeAllKeyUpListeners(keyName)</h3><ul><li><code>keyName</code> {string} 按键名称</li></ul><p>删除该按键的 KeyUp(弹起)事件的所有监听。</p><h2 id="7、屏蔽原有按键功能"><a href="#7、屏蔽原有按键功能" class="headerlink" title="7、屏蔽原有按键功能"></a>7、屏蔽原有按键功能</h2><h3 id="events-setKeyInterceptionEnabled-key-enabled"><a href="#events-setKeyInterceptionEnabled-key-enabled" class="headerlink" title="events.setKeyInterceptionEnabled([key, ]enabled)"></a>events.setKeyInterceptionEnabled([key, ]enabled)</h3><ul><li><code>enabled</code> {boolean}</li><li><code>key</code> {string} 要屏蔽的按键</li></ul><p>设置按键屏蔽是否启用。所谓按键屏蔽指的是，屏蔽原有按键的功能，例如使得音量键不再能调节音量，但此时仍然能通过按键事件监听按键。</p><p>如果不加参数 key 则会屏蔽所有按键。</p><p>例如，调用<code>events.setKeyInterceptionEnabled(true)</code>会使系统的音量、Home、返回等键不再具有调节音量、回到主页、返回的作用，但此时仍然能通过按键事件监听按键。</p><p>该函数通常于按键监听结合，例如想监听音量键并使音量键按下时不弹出音量调节框则为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">events.setKeyInterceptionEnabled(&quot;volume_up&quot;, true);</span><br><span class="line">events.observeKey();</span><br><span class="line">events.onKeyDown(&quot;volume_up&quot;, ()=&gt;&#123;</span><br><span class="line">    log(&quot;音量上键被按下&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>只要有一个脚本屏蔽了某个按键，该按键便会被屏蔽；当脚本退出时，会自动解除所有按键屏蔽。</p><h2 id="8、屏幕触摸事件监听（需要-root-权限）"><a href="#8、屏幕触摸事件监听（需要-root-权限）" class="headerlink" title="8、屏幕触摸事件监听（需要 root 权限）"></a>8、屏幕触摸事件监听（需要 root 权限）</h2><h3 id="events-observeTouch"><a href="#events-observeTouch" class="headerlink" title="events.observeTouch()"></a>events.observeTouch()</h3><p>启用屏幕触摸监听。（需要 root 权限）</p><p>只有这个函数被成功执行后, 触摸事件的监听才有效。</p><p>没有 root 权限调用该函数则什么也不会发生。</p><h3 id="events-setTouchEventTimeout-timeout"><a href="#events-setTouchEventTimeout-timeout" class="headerlink" title="events.setTouchEventTimeout(timeout)"></a>events.setTouchEventTimeout(timeout)</h3><ul><li><code>timeout</code> {number} 两个触摸事件的最小间隔。单位毫秒。默认为 10 毫秒。如果 number 小于 0，视为 0 处理。</li></ul><p>设置两个触摸事件分发的最小时间间隔。</p><p>例如间隔为 10 毫秒的话，前一个触摸事件发生并被注册的监听器处理后，至少要过 10 毫秒才能分发和处理下一个触摸事件，这 10 毫秒之间的触摸将会被忽略。</p><p>建议在满足需要的情况下尽量提高这个间隔。一个简单滑动动作可能会连续触发上百个触摸事件，如果 timeout 设置过低可能造成事件拥堵。强烈建议不要设置 timeout 为 0。</p><h3 id="events-getTouchEventTimeout"><a href="#events-getTouchEventTimeout" class="headerlink" title="events.getTouchEventTimeout()"></a>events.getTouchEventTimeout()</h3><p>返回触摸事件的最小时间间隔。</p><h3 id="events-onTouch-listener"><a href="#events-onTouch-listener" class="headerlink" title="events.onTouch(listener)"></a>events.onTouch(listener)</h3><ul><li><code>listener</code> {Function} 参数为<a href="https://hyb1996.github.io/AutoJs-Docs/##/images.html?id=images_point">Point</a>的函数</li></ul><p>注册一个触摸监听函数。相当于<code>on(&quot;touch&quot;, listener)</code>。</p><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//启用触摸监听</span><br><span class="line">events.observeTouch();</span><br><span class="line">//注册触摸监听器</span><br><span class="line">events.onTouch(function(p)&#123;</span><br><span class="line">    //触摸事件发生时, 打印出触摸的点的坐标</span><br><span class="line">    log(p.x + &quot;, &quot; + p.y);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="events-removeAllTouchListeners"><a href="#events-removeAllTouchListeners" class="headerlink" title="events.removeAllTouchListeners()"></a>events.removeAllTouchListeners()</h3><p>删除所有事件监听函数。</p><h2 id="9、通知事件监听：QQ-消息、微信消息、推送等通知"><a href="#9、通知事件监听：QQ-消息、微信消息、推送等通知" class="headerlink" title="9、通知事件监听：QQ 消息、微信消息、推送等通知"></a>9、通知事件监听：QQ 消息、微信消息、推送等通知</h2><h3 id="events-observeNotification"><a href="#events-observeNotification" class="headerlink" title="events.observeNotification()"></a>events.observeNotification()</h3><p>通知监听依赖于通知服务，如果通知服务没有运行，会抛出异常并跳转到通知权限开启界面。（有时即使通知权限已经开启通知服务也没有运行，这时需要关闭权限再重新开启一次）</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">events.<span class="title function_">obvereNotification</span>();</span><br><span class="line">events.<span class="title function_">onNotification</span>(<span class="keyword">function</span> (<span class="params">notification</span>) &#123;</span><br><span class="line">  <span class="title function_">log</span>(notification.<span class="title function_">getText</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="事件-‘notification’"><a href="#事件-‘notification’" class="headerlink" title="事件: ‘notification’"></a>事件: ‘notification’</h3><ul><li><code>notification</code> Notification 通知对象</li></ul><p>当有应用发出通知时会触发该事件，参数为 Notification。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">events.<span class="title function_">observeNotification</span>();</span><br><span class="line">events.<span class="title function_">on</span>(<span class="string">&quot;notification&quot;</span>, <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="title function_">log</span>(</span><br><span class="line">    <span class="string">&quot;收到新通知:\n 标题: %s, 内容: %s, \n包名: %s&quot;</span>,</span><br><span class="line">    n.<span class="title function_">getTitle</span>(),</span><br><span class="line">    n.<span class="title function_">getText</span>(),</span><br><span class="line">    n.<span class="title function_">getPackageName</span>()</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="10、Notification-对象"><a href="#10、Notification-对象" class="headerlink" title="10、Notification 对象"></a>10、Notification 对象</h2><p>通知对象，可以获取通知详情，包括通知标题、内容、发出通知的包名、时间等，也可以对通知进行操作，比如点击、删除。</p><h3 id="Notification-number"><a href="#Notification-number" class="headerlink" title="Notification.number"></a>Notification.number</h3><ul><li>{number}</li></ul><p>通知数量。例如 QQ 连续收到两条消息时 number 为 2。</p><h3 id="Notification-when"><a href="#Notification-when" class="headerlink" title="Notification.when"></a>Notification.when</h3><ul><li>{number}</li></ul><p>通知发出时间的时间戳，可以用于构造<code>Date</code>对象。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">events.observeNotification();</span><br><span class="line">events.on(&quot;notification&quot;, function(n)&#123;</span><br><span class="line">    log(&quot;通知时间为&#125;&quot; + new Date(n.when));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Notification-getPackageName"><a href="#Notification-getPackageName" class="headerlink" title="Notification.getPackageName()"></a>Notification.getPackageName()</h3><ul><li>返回 {string}</li></ul><p>获取发出通知的应用包名。</p><h3 id="Notification-getTitle"><a href="#Notification-getTitle" class="headerlink" title="Notification.getTitle()"></a>Notification.getTitle()</h3><ul><li>返回 {string}</li></ul><p>获取通知的标题。</p><h3 id="Notification-getText"><a href="#Notification-getText" class="headerlink" title="Notification.getText()"></a>Notification.getText()</h3><ul><li>返回 {string}</li></ul><p>获取通知的内容。</p><h3 id="Notification-click"><a href="#Notification-click" class="headerlink" title="Notification.click()"></a>Notification.click()</h3><p>点击该通知。例如对于一条 QQ 消息，点击会进入具体的聊天界面。</p><h3 id="Notification-delete"><a href="#Notification-delete" class="headerlink" title="Notification.delete()"></a>Notification.delete()</h3><p>删除该通知。该通知将从通知栏中消失。</p><h2 id="11、toast-事件监听"><a href="#11、toast-事件监听" class="headerlink" title="11、toast 事件监听"></a>11、toast 事件监听</h2><h3 id="events-observeToast"><a href="#events-observeToast" class="headerlink" title="events.observeToast()"></a>events.observeToast()</h3><p>开启 Toast 监听。</p><p>Toast 监听依赖于无障碍服务，因此此函数会确保无障碍服务运行。</p><h3 id="事件-‘toast’"><a href="#事件-‘toast’" class="headerlink" title="事件: ‘toast’"></a>事件: ‘toast’</h3><ul><li><code>getText()</code> 获取 Toast 的文本内容</li><li><code>getPackageName()</code> 获取发出 Toast 的应用包名</li></ul><p>当有应用发出 toast(气泡消息)时会触发该事件。但 Auto.js 软件本身的 toast 除外。</p><p>例如，要记录发出所有 toast 的应用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">events.observeToast();</span><br><span class="line">events.onToast(function(toast)&#123;</span><br><span class="line">    log(&quot;Toast内容: &quot; + toast.getText() + &quot; 包名: &quot; + toast.getPackageName());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="12、EventEmitter-对象"><a href="#12、EventEmitter-对象" class="headerlink" title="12、EventEmitter 对象"></a>12、EventEmitter 对象</h2><p><strong>events 本身是一个 EventEmiiter, 但内置了一些事件、包括按键事件、通知事件、Toast 事件等。</strong></p><h3 id="events-emitter"><a href="#events-emitter" class="headerlink" title="events.emitter()"></a>events.emitter()</h3><p>返回一个新的 EventEmitter。这个 EventEmitter 没有内置任何事件。</p><h2 id="13、EventEmitter-对象：设置监听器数量"><a href="#13、EventEmitter-对象：设置监听器数量" class="headerlink" title="13、EventEmitter 对象：设置监听器数量"></a>13、EventEmitter 对象：设置监听器数量</h2><h3 id="EventEmitter-defaultMaxListeners"><a href="#EventEmitter-defaultMaxListeners" class="headerlink" title="EventEmitter.defaultMaxListeners"></a>EventEmitter.defaultMaxListeners</h3><p>每个事件默认可以注册最多 10 个监听器。 单个 EventEmitter 实例的限制可以使用 emitter.setMaxListeners(n) 方法改变。</p><p>所有 EventEmitter 实例的默认值可以使用 EventEmitter.defaultMaxListeners 属性改变。</p><p>设置 EventEmitter.defaultMaxListeners 要谨慎，因为会影响所有 EventEmitter 实例，包括之前创建的。 因而，调用 emitter.setMaxListeners(n) 优先于 EventEmitter.defaultMaxListeners。</p><p>注意，与 Node.js 不同，<strong>这是一个硬性限制</strong>。 EventEmitter 实例不允许添加更多的监听器，监听器超过最大数量时会抛出 TooManyListenersException。</p><h3 id="EventEmitter-getMaxListeners"><a href="#EventEmitter-getMaxListeners" class="headerlink" title="EventEmitter.getMaxListeners()"></a>EventEmitter.getMaxListeners()</h3><p>返回 EventEmitter 当前的最大监听器限制值，该值可以通过 emitter.setMaxListeners(n) 设置或默认为 EventEmitter.defaultMaxListeners。</p><h3 id="EventEmitter-setMaxListeners-n"><a href="#EventEmitter-setMaxListeners-n" class="headerlink" title="EventEmitter.setMaxListeners(n)"></a>EventEmitter.setMaxListeners(n)</h3><ul><li><code>n</code> {number}</li></ul><p>默认情况下，如果为特定事件添加了超过 10 个监听器，则 EventEmitter 会打印一个警告。 此限制有助于寻找内存泄露。 但是，并不是所有的事件都要被限为 10 个。 emitter.setMaxListeners() 方法允许修改指定的 EventEmitter 实例的限制。 值设为 Infinity（或 0）表明不限制监听器的数量。</p><p>返回一个 EventEmitter 引用，可以链式调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">emitter.setMaxListeners(emitter.getMaxListeners() + 1);</span><br><span class="line">emitter.once(&#x27;event&#x27;, () =&gt; &#123;</span><br><span class="line">  // 做些操作</span><br><span class="line">  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="14、EventEmitter-对象：添加监听事件"><a href="#14、EventEmitter-对象：添加监听事件" class="headerlink" title="14、EventEmitter 对象：添加监听事件"></a>14、EventEmitter 对象：添加监听事件</h2><h3 id="EventEmitter-addListener-eventName-listener"><a href="#EventEmitter-addListener-eventName-listener" class="headerlink" title="EventEmitter.addListener(eventName, listener)"></a>EventEmitter.addListener(eventName, listener)</h3><ul><li><code>eventName</code> {any}</li><li><code>listener</code> {Function}</li></ul><p>emitter.on(eventName, listener) 的别名。</p><h3 id="EventEmitter-on-eventName-listener"><a href="#EventEmitter-on-eventName-listener" class="headerlink" title="EventEmitter.on(eventName, listener)"></a>EventEmitter.on(eventName, listener)</h3><ul><li><code>eventName</code> {any} 事件名</li><li><code>listener</code> {Function} 回调函数</li></ul><p>添加 listener 函数到名为 eventName 的事件的监听器数组的末尾。 不会检查 listener 是否已被添加。 多次调用并传入相同的 eventName 和 listener 会导致 listener 被添加与调用多次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.on(&#x27;connection&#x27;, (stream) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;有连接！&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>返回一个 EventEmitter 引用，可以链式调用。</p><p>默认情况下，事件监听器会按照添加的顺序依次调用。 emitter.prependListener() 方法可用于将事件监听器添加到监听器数组的开头。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const myEE = events.emitter();</span><br><span class="line">myEE.on(&#x27;foo&#x27;, () =&gt; console.log(&#x27;a&#x27;));</span><br><span class="line">myEE.prependListener(&#x27;foo&#x27;, () =&gt; console.log(&#x27;b&#x27;));</span><br><span class="line">myEE.emit(&#x27;foo&#x27;);</span><br><span class="line">// 打印:</span><br><span class="line">//   b</span><br><span class="line">//   a</span><br></pre></td></tr></table></figure><h3 id="EventEmitter-once-eventName-listener"><a href="#EventEmitter-once-eventName-listener" class="headerlink" title="EventEmitter.once(eventName, listener)"></a>EventEmitter.once(eventName, listener)</h3><ul><li><code>eventName</code> {any} 事件名</li><li><code>listener</code> {Function} 回调函数</li></ul><p>添加一个单次 listener 函数到名为 eventName 的事件。 下次触发 eventName 事件时，监听器会被移除，然后调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.once(&#x27;connection&#x27;, (stream) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;首次调用！&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>返回一个 EventEmitter 引用，可以链式调用。</p><p>默认情况下，事件监听器会按照添加的顺序依次调用。 emitter.prependOnceListener() 方法可用于将事件监听器添加到监听器数组的开头。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const myEE = events.emitter();</span><br><span class="line">myEE.once(&#x27;foo&#x27;, () =&gt; console.log(&#x27;a&#x27;));</span><br><span class="line">myEE.prependOnceListener(&#x27;foo&#x27;, () =&gt; console.log(&#x27;b&#x27;));</span><br><span class="line">myEE.emit(&#x27;foo&#x27;);</span><br><span class="line">// 打印:</span><br><span class="line">//   b</span><br><span class="line">//   a</span><br></pre></td></tr></table></figure><h2 id="15、EventEmitter-对象：调用监听事件"><a href="#15、EventEmitter-对象：调用监听事件" class="headerlink" title="15、EventEmitter 对象：调用监听事件"></a>15、EventEmitter 对象：调用监听事件</h2><h3 id="EventEmitter-emit-eventName-…args"><a href="#EventEmitter-emit-eventName-…args" class="headerlink" title="EventEmitter.emit(eventName[, …args])"></a>EventEmitter.emit(eventName[, …args])</h3><ul><li><code>eventName</code> {any}</li><li><code>args</code> {any}</li></ul><p>按监听器的注册顺序，同步地调用每个注册到名为 eventName 事件的监听器，并传入提供的参数。</p><p>如果事件有监听器，则返回 true ，否则返回 false。</p><h2 id="16、EventEmitter-对象：获取监听事件"><a href="#16、EventEmitter-对象：获取监听事件" class="headerlink" title="16、EventEmitter 对象：获取监听事件"></a>16、EventEmitter 对象：获取监听事件</h2><h3 id="EventEmitter-eventNames"><a href="#EventEmitter-eventNames" class="headerlink" title="EventEmitter.eventNames()"></a>EventEmitter.eventNames()</h3><p>返回一个列出触发器已注册监听器的事件的数组。 数组中的值为字符串或符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const myEE = events.emitter();</span><br><span class="line">myEE.on(&#x27;foo&#x27;, () =&gt; &#123;&#125;);</span><br><span class="line">myEE.on(&#x27;bar&#x27;, () =&gt; &#123;&#125;);</span><br><span class="line"></span><br><span class="line">const sym = Symbol(&#x27;symbol&#x27;);</span><br><span class="line">myEE.on(sym, () =&gt; &#123;&#125;);</span><br><span class="line"></span><br><span class="line">console.log(myEE.eventNames());</span><br><span class="line">// 打印: [ &#x27;foo&#x27;, &#x27;bar&#x27;, Symbol(symbol) ]</span><br></pre></td></tr></table></figure><h3 id="EventEmitter-listenerCount-eventName"><a href="#EventEmitter-listenerCount-eventName" class="headerlink" title="EventEmitter.listenerCount(eventName)"></a>EventEmitter.listenerCount(eventName)</h3><ul><li><code>eventName</code> {string} 正在被监听的事件名</li></ul><p>返回正在监听名为 eventName 的事件的监听器的数量。</p><h3 id="EventEmitter-listeners-eventName"><a href="#EventEmitter-listeners-eventName" class="headerlink" title="EventEmitter.listeners(eventName)"></a>EventEmitter.listeners(eventName)</h3><ul><li><code>eventName</code> {string}</li></ul><p>返回名为 eventName 的事件的监听器数组的副本。</p><h2 id="17、EventEmitter-对象：添加监听事件到开头"><a href="#17、EventEmitter-对象：添加监听事件到开头" class="headerlink" title="17、EventEmitter 对象：添加监听事件到开头"></a>17、EventEmitter 对象：添加监听事件到开头</h2><h3 id="EventEmitter-prependListener-eventName-listener"><a href="#EventEmitter-prependListener-eventName-listener" class="headerlink" title="EventEmitter.prependListener(eventName, listener)"></a>EventEmitter.prependListener(eventName, listener)</h3><ul><li><code>eventName</code> {any} 事件名</li><li><code>listener</code> {Function} 回调函数</li></ul><p>添加 listener 函数到名为 eventName 的事件的监听器数组的开头。 不会检查 listener 是否已被添加。 多次调用并传入相同的 eventName 和 listener 会导致 listener 被添加与调用多次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.prependListener(&#x27;connection&#x27;, (stream) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;有连接！&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>返回一个 EventEmitter 引用，可以链式调用。</p><h3 id="EventEmitter-prependOnceListener-eventName-listener"><a href="#EventEmitter-prependOnceListener-eventName-listener" class="headerlink" title="EventEmitter.prependOnceListener(eventName, listener)"></a>EventEmitter.prependOnceListener(eventName, listener)</h3><ul><li><code>eventName</code> {any} 事件名</li><li><code>listener</code> {Function} 回调函数</li></ul><p>添加一个单次 listener 函数到名为 eventName 的事件的监听器数组的开头。 下次触发 eventName 事件时，监听器会被移除，然后调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.prependOnceListener(&#x27;connection&#x27;, (stream) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;首次调用！&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>返回一个 EventEmitter 引用，可以链式调用。</p><h2 id="18、EventEmitter-对象：删除事件监听"><a href="#18、EventEmitter-对象：删除事件监听" class="headerlink" title="18、EventEmitter 对象：删除事件监听"></a>18、EventEmitter 对象：删除事件监听</h2><h3 id="EventEmitter-removeAllListeners-eventName"><a href="#EventEmitter-removeAllListeners-eventName" class="headerlink" title="EventEmitter.removeAllListeners([eventName])"></a>EventEmitter.removeAllListeners([eventName])</h3><ul><li><code>eventName</code> {any}</li></ul><p>移除全部或指定 eventName 的监听器。</p><p>注意，在代码中移除其他地方添加的监听器是一个不好的做法，尤其是当 EventEmitter 实例是其他组件或模块创建的。</p><p>返回一个 EventEmitter 引用，可以链式调用。</p><h3 id="EventEmitter-removeListener-eventName-listener-（有-bug）"><a href="#EventEmitter-removeListener-eventName-listener-（有-bug）" class="headerlink" title="EventEmitter.removeListener(eventName, listener)（有 bug）"></a>EventEmitter.removeListener(eventName, listener)（有 bug）</h3><ul><li><code>eventName</code> {any}</li><li><code>listener</code> {Function}</li></ul><p>从名为 eventName 的事件的监听器数组中移除指定的 listener。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const callback = (stream) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;有连接！&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line">server.on(&#x27;connection&#x27;, callback);</span><br><span class="line">// ...</span><br><span class="line">server.removeListener(&#x27;connection&#x27;, callback);</span><br></pre></td></tr></table></figure><p>removeListener 最多只会从监听器数组里移除一个监听器实例。 如果任何单一的监听器被多次添加到指定 eventName 的监听器数组中，则必须多次调用 removeListener 才能移除每个实例。</p><p>注意，一旦一个事件被触发，所有绑定到它的监听器都会按顺序依次触发。 这意味着，在事件触发后、最后一个监听器完成执行前，任何 removeListener() 或 removeAllListeners() 调用都不会从 emit() 中移除它们。 随后的事件会像预期的那样发生。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const myEmitter = events.emitter();</span><br><span class="line"></span><br><span class="line">const callbackA = () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;A&#x27;);</span><br><span class="line">  myEmitter.removeListener(&#x27;event&#x27;, callbackB);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const callbackB = () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;B&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myEmitter.on(&#x27;event&#x27;, callbackA);</span><br><span class="line"></span><br><span class="line">myEmitter.on(&#x27;event&#x27;, callbackB);</span><br><span class="line"></span><br><span class="line">// callbackA 移除了监听器 callbackB，但它依然会被调用。</span><br><span class="line">// 触发是内部的监听器数组为 [callbackA, callbackB]</span><br><span class="line">myEmitter.emit(&#x27;event&#x27;);</span><br><span class="line">// 打印:</span><br><span class="line">//   A</span><br><span class="line">//   B</span><br><span class="line"></span><br><span class="line">// callbackB 被移除了。</span><br><span class="line">// 内部监听器数组为 [callbackA]</span><br><span class="line">myEmitter.emit(&#x27;event&#x27;);</span><br><span class="line">// 打印:</span><br><span class="line">//   A</span><br></pre></td></tr></table></figure><p>因为监听器是使用内部数组进行管理的，所以调用它会改变在监听器被移除后注册的任何监听器的位置索引。</p><p>虽然这不会影响监听器的调用顺序，但意味着由 emitter.listeners() 方法返回的监听器数组副本需要被重新创建。</p><p>返回一个 EventEmitter 引用，可以链式调用。</p><h2 id="19、脚本间广播通信"><a href="#19、脚本间广播通信" class="headerlink" title="19、脚本间广播通信"></a>19、脚本间广播通信</h2><p>脚本间通信除了使用 engines 模块提供的<code>ScriptEngine.emit()</code>方法以外，也可以使用 events 模块提供的 broadcast 广播。</p><p>events.broadcast 本身是一个 EventEmitter，但它的事件是在脚本间共享的，所有脚本都能发送和监听这些事件；事件处理会在脚本主线程执行</p><p>例如在一个脚本发送一个广播 hello:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">events.<span class="property">broadcast</span>.<span class="title function_">emit</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;小明&quot;</span>);</span><br></pre></td></tr></table></figure><p>在其他脚本中监听并处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">events.<span class="property">broadcast</span>.<span class="title function_">on</span>(<span class="string">&quot;hello&quot;</span>, <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="title function_">toast</span>(<span class="string">&quot;你好, &quot;</span> + name);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//保持脚本运行</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="20、获取-window-窗口信息"><a href="#20、获取-window-窗口信息" class="headerlink" title="20、获取 window 窗口信息"></a>20、获取 window 窗口信息</h2><h3 id="auto-windows"><a href="#auto-windows" class="headerlink" title="auto.windows"></a>auto.windows</h3><p>获取当前窗口的集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto.windows.filter(w =&gt; &#123;</span><br><span class="line"></span><br><span class="line">//条件</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="21、Autojs-8-0Pro-版本：监听无障碍事件的-API"><a href="#21、Autojs-8-0Pro-版本：监听无障碍事件的-API" class="headerlink" title="21、Autojs 8.0Pro 版本：监听无障碍事件的 API"></a>21、Autojs 8.0Pro 版本：监听无障碍事件的 API</h2><p>在以前，Auto.js 也一直只能通过无限循环去判断当前界面、寻找控件，这实际上对省电优化十分不友好。</p><p>在 Pro 8.0.0-3 版本，引入了监听无障碍事件的 API。</p><h4 id="auto-registerEvents-events"><a href="#auto-registerEvents-events" class="headerlink" title="auto.registerEvents(events)"></a>auto.registerEvents(events)</h4><ul><li><code>events</code> {Array} 要监听的事件数组</li><li>返回 {EventEmitter}</li></ul><h4 id="auto-registerEvent-event-callback"><a href="#auto-registerEvent-event-callback" class="headerlink" title="auto.registerEvent(event, callback)"></a>auto.registerEvent(event, callback)</h4><ul><li><code>event</code> {String} 要监听的事件</li><li><code>callback</code> {Function} 事件回调</li><li>返回 {EventEmitter}</li></ul><p>以上两个函数用于监听一个或多个无障碍事件。所谓无障碍事件，即（其他软件）窗口发送变化、控件发送变化时的事件，包括：</p><ul><li><code>view_clicked</code> 控件被点击</li><li><code>view_long_clicked</code> 控件被长按点击</li><li><code>view_selected</code> 控件被选中</li><li><code>view_focused</code> 控件成为焦点</li><li><code>view_text_changed</code> 控件文本改变</li><li><code>view_scrolled</code> 控件被滑动</li><li><code>window_state_changed</code> 窗口状态变化</li><li><code>window_content_changed</code> 窗口内容变化</li><li><code>window_changed</code> 屏幕上显示窗口的变化（增加，删除，子窗口变化等）</li><li><code>notification_state_changed</code> 通知状态变化</li></ul><p>例如，我们要监听 Auto.js 的打开，可以用以下代码监听：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听窗口变化</span></span><br><span class="line">auto.<span class="title function_">registerEvent</span>(<span class="string">&quot;windows_changed&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断是否有新窗口打开</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">windowChanges</span>[<span class="number">0</span>].<span class="title function_">indexOf</span>(<span class="string">&quot;add&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取新窗口的id</span></span><br><span class="line">    <span class="keyword">let</span> wid = e.<span class="property">windowId</span>;</span><br><span class="line">    <span class="comment">// 遍历窗口，获取新窗口</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable language_">window</span> = auto.<span class="property">windows</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">w</span>) =&gt;</span> w.<span class="property">id</span> == wid);</span><br><span class="line">    <span class="comment">// 判断新窗口是Auto.js</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">length</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="variable language_">window</span>[<span class="number">0</span>].<span class="property">title</span> == <span class="string">&quot;Auto.js&quot;</span>) &#123;</span><br><span class="line">      <span class="title function_">toast</span>(<span class="string">&quot;Auto.js被打开了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="22、监听无障碍事件的-API：控件被点击"><a href="#22、监听无障碍事件的-API：控件被点击" class="headerlink" title="22、监听无障碍事件的 API：控件被点击"></a>22、监听无障碍事件的 API：控件被点击</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听控件被点击：view_clicked、view_long_clicked</span></span><br><span class="line">auto.<span class="title function_">registerEvent</span>(<span class="string">&quot;view_clicked&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">log</span>(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="文件系统-Files"><a href="#文件系统-Files" class="headerlink" title="文件系统 - Files"></a>文件系统 - Files</h2><p>一次性的文件读写可以直接使用<code>files.read()</code>, <code>files.write()</code>, <code>files.append()</code>等方便的函数</p><p>但如果需要频繁读写或随机读写，则使用<code>open()</code>函数打开一个文件对象来操作文件，并在操作完毕后调用<code>close()</code>函数关闭文件。</p><h3 id="files-isFile-path"><a href="#files-isFile-path" class="headerlink" title="files.isFile(path)"></a>files.isFile(path)</h3><ul><li><code>path</code> {string} 路径</li><li>返回 {boolean}</li></ul><p>返回路径 path 是否是文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log(files.isDir(&quot;/sdcard/文件夹/&quot;)); //返回false</span><br><span class="line">log(files.isDir(&quot;/sdcard/文件.txt&quot;)); //返回true</span><br></pre></td></tr></table></figure><h3 id="files-isDir-path"><a href="#files-isDir-path" class="headerlink" title="files.isDir(path)"></a>files.isDir(path)</h3><ul><li><code>path</code> {string} 路径</li><li>返回 {boolean}</li></ul><p>返回路径 path 是否是文件夹。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log(files.isDir(&quot;/sdcard/文件夹/&quot;)); //返回true</span><br><span class="line">log(files.isDir(&quot;/sdcard/文件.txt&quot;)); //返回false</span><br></pre></td></tr></table></figure><h3 id="files-isEmptyDir-path"><a href="#files-isEmptyDir-path" class="headerlink" title="files.isEmptyDir(path)"></a>files.isEmptyDir(path)</h3><ul><li><code>path</code> {string} 路径</li><li>返回 {boolean}</li></ul><p>返回文件夹 path 是否为空文件夹。如果该路径并非文件夹，则直接返回<code>false</code>。</p><h3 id="files-join-parent-child"><a href="#files-join-parent-child" class="headerlink" title="files.join(parent, child)"></a>files.join(parent, child)</h3><ul><li><code>parent</code> {string} 父目录路径</li><li><code>child</code> {string} 子路径</li><li>返回 {string}</li></ul><p>连接两个路径并返回，例如<code>files.join(&quot;/sdcard/&quot;, &quot;1.txt&quot;)</code>返回”/sdcard/1.txt”。</p><h3 id="files-create-path"><a href="#files-create-path" class="headerlink" title="files.create(path)"></a>files.create(path)</h3><ul><li><code>path</code> {string} 路径</li><li>返回 {boolean}</li></ul><p>创建一个文件或文件夹并返回是否创建成功。如果文件已经存在，则直接返回<code>false</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">files.create(&quot;/sdcard/新文件夹/&quot;);</span><br></pre></td></tr></table></figure><h3 id="files-createWithDirs-path"><a href="#files-createWithDirs-path" class="headerlink" title="files.createWithDirs(path)"></a>files.createWithDirs(path)</h3><ul><li><code>path</code> {string} 路径</li><li>返回 {boolean}</li></ul><p>创建一个文件或文件夹并返回是否创建成功。如果文件所在文件夹不存在，则先创建他所在的一系列文件夹。如果文件已经存在，则直接返回<code>false</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">files.createWithDirs(&quot;/sdcard/新文件夹/新文件夹/新文件夹/1.txt&quot;);</span><br></pre></td></tr></table></figure><h3 id="files-exists-path"><a href="#files-exists-path" class="headerlink" title="files.exists(path)"></a>files.exists(path)</h3><ul><li><code>path</code> {string} 路径</li><li>返回 {boolean}</li></ul><p>返回在路径 path 处的文件是否存在。</p><h3 id="files-ensureDir-path"><a href="#files-ensureDir-path" class="headerlink" title="files.ensureDir(path)"></a>files.ensureDir(path)</h3><ul><li><code>path</code> {string} 路径</li></ul><p>确保路径 path 所在的文件夹存在。如果该路径所在文件夹不存在，则创建该文件夹。</p><p>例如对于路径”/sdcard/Download/ABC/1.txt”，如果/Download/文件夹不存在，则会先创建 Download，再创建 ABC 文件夹。</p><h3 id="files-read-path-encoding-“utf-8”"><a href="#files-read-path-encoding-“utf-8”" class="headerlink" title="files.read(path[, encoding = “utf-8”])"></a>files.read(path[, encoding = “utf-8”])</h3><ul><li><code>path</code> {string} 路径</li><li><code>encoding</code> {string} 字符编码，可选，默认为 utf-8</li><li>返回 {string}</li></ul><p>读取文本文件 path 的所有内容并返回。如果文件不存在，则抛出<code>FileNotFoundException</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log(files.read(&quot;/sdcard/1.txt&quot;));</span><br></pre></td></tr></table></figure><h3 id="files-readBytes-path"><a href="#files-readBytes-path" class="headerlink" title="files.readBytes(path)"></a>files.readBytes(path)</h3><ul><li><code>path</code> {string} 路径</li><li>返回 {byte[]}</li></ul><p>读取文件 path 的所有内容并返回一个字节数组。如果文件不存在，则抛出<code>FileNotFoundException</code>。</p><p>注意，该数组是 Java 的数组，不具有 JavaScript 数组的 forEach, slice 等函数。</p><p>一个以 16 进制形式打印文件的例子如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var data = files.readBytes(&quot;/sdcard/1.png&quot;);</span><br><span class="line">var sb = new java.lang.StringBuilder();</span><br><span class="line">for(var i = 0; i &lt; data.length; i++)&#123;</span><br><span class="line">    sb.append(data[i].toString(16));</span><br><span class="line">&#125;</span><br><span class="line">log(sb.toString());</span><br></pre></td></tr></table></figure><h3 id="files-write-path-text-encoding-“utf-8”"><a href="#files-write-path-text-encoding-“utf-8”" class="headerlink" title="files.write(path, text[, encoding = “utf-8”])"></a>files.write(path, text[, encoding = “utf-8”])</h3><ul><li><code>path</code> {string} 路径</li><li><code>text</code> {string} 要写入的文本内容</li><li><code>encoding</code> {string} 字符编码</li></ul><p>把 text 写入到文件 path 中。如果文件存在则覆盖，不存在则创建。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var text = &quot;文件内容&quot;;</span><br><span class="line">//写入文件</span><br><span class="line">files.write(&quot;/sdcard/1.txt&quot;, text);</span><br><span class="line">//用其他应用查看文件</span><br><span class="line">app.viewFile(&quot;/sdcard/1.txt&quot;);</span><br></pre></td></tr></table></figure><h3 id="files-writeBytes-path-bytes"><a href="#files-writeBytes-path-bytes" class="headerlink" title="files.writeBytes(path, bytes)"></a>files.writeBytes(path, bytes)</h3><ul><li><code>path</code> {string} 路径</li><li><code>bytes</code> {byte[]} 字节数组，要写入的二进制数据</li></ul><p>把 bytes 写入到文件 path 中。如果文件存在则覆盖，不存在则创建。</p><h3 id="files-append-path-text-encoding-‘utf-8’"><a href="#files-append-path-text-encoding-‘utf-8’" class="headerlink" title="files.append(path, text[, encoding = ‘utf-8’])"></a>files.append(path, text[, encoding = ‘utf-8’])</h3><ul><li><code>path</code> {string} 路径</li><li><code>text</code> {string} 要写入的文本内容</li><li><code>encoding</code> {string} 字符编码</li></ul><p>把 text 追加到文件 path 的末尾。如果文件不存在则创建。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var text = &quot;追加的文件内容&quot;;</span><br><span class="line">files.append(&quot;/sdcard/1.txt&quot;, text);</span><br><span class="line">files.append(&quot;/sdcard/1.txt&quot;, text);</span><br><span class="line">//用其他应用查看文件</span><br><span class="line">app.viewFile(&quot;/sdcard/1.txt&quot;);</span><br></pre></td></tr></table></figure><h3 id="files-appendBytes-path-text-encoding-‘utf-8’"><a href="#files-appendBytes-path-text-encoding-‘utf-8’" class="headerlink" title="files.appendBytes(path, text[, encoding = ‘utf-8’])"></a>files.appendBytes(path, text[, encoding = ‘utf-8’])</h3><ul><li><code>path</code> {string} 路径</li><li><code>bytes</code> {byte[]} 字节数组，要写入的二进制数据</li></ul><p>把 bytes 追加到文件 path 的末尾。如果文件不存在则创建。</p><h3 id="files-copy-fromPath-toPath"><a href="#files-copy-fromPath-toPath" class="headerlink" title="files.copy(fromPath, toPath)"></a>files.copy(fromPath, toPath)</h3><ul><li><code>fromPath</code> {string} 要复制的原文件路径</li><li><code>toPath</code> {string} 复制到的文件路径</li><li>返回 {boolean}</li></ul><p>复制文件，返回是否复制成功。例如<code>files.copy(&quot;/sdcard/1.txt&quot;, &quot;/sdcard/Download/1.txt&quot;)</code>。</p><h3 id="files-move-fromPath-toPath"><a href="#files-move-fromPath-toPath" class="headerlink" title="files.move(fromPath, toPath)"></a>files.move(fromPath, toPath)</h3><ul><li><code>fromPath</code> {string} 要移动的原文件路径</li><li><code>toPath</code> {string} 移动到的文件路径</li><li>返回 {boolean}</li></ul><p>移动文件，返回是否移动成功。例如<code>files.move(&quot;/sdcard/1.txt&quot;, &quot;/sdcard/Download/1.txt&quot;)</code>会把 1.txt 文件从 sd 卡根目录移动到 Download 文件夹。</p><h3 id="files-rename-path-newName"><a href="#files-rename-path-newName" class="headerlink" title="files.rename(path, newName)"></a>files.rename(path, newName)</h3><ul><li><code>path</code> {string} 要重命名的原文件路径</li><li><code>newName</code> {string} 要重命名的新文件名</li><li>返回 {boolean}</li></ul><p>重命名文件，并返回是否重命名成功。例如<code>files.rename(&quot;/sdcard/1.txt&quot;, &quot;2.txt&quot;)</code>。</p><h3 id="files-renameWithoutExtension-path-newName"><a href="#files-renameWithoutExtension-path-newName" class="headerlink" title="files.renameWithoutExtension(path, newName)"></a>files.renameWithoutExtension(path, newName)</h3><ul><li><code>path</code> {string} 要重命名的原文件路径</li><li><code>newName</code> {string} 要重命名的新文件名</li><li>返回 {boolean}</li></ul><p>重命名文件，不包含拓展名，并返回是否重命名成功。例如<code>files.rename(&quot;/sdcard/1.txt&quot;, &quot;2&quot;)</code>会把”1.txt”重命名为”2.txt”。</p><h3 id="files-getName-path"><a href="#files-getName-path" class="headerlink" title="files.getName(path)"></a>files.getName(path)</h3><ul><li><code>path</code> {string} 路径</li><li>返回 {string}</li></ul><p>返回文件的文件名。例如<code>files.getName(&quot;/sdcard/1.txt&quot;)</code>返回”1.txt”。</p><h3 id="files-getNameWithoutExtension-path"><a href="#files-getNameWithoutExtension-path" class="headerlink" title="files.getNameWithoutExtension(path)"></a>files.getNameWithoutExtension(path)</h3><ul><li><code>path</code> {string} 路径</li><li>返回 {string}</li></ul><p>返回不含拓展名的文件的文件名。例如<code>files.getName(&quot;/sdcard/1.txt&quot;)</code>返回”1”。</p><h3 id="files-getExtension-path"><a href="#files-getExtension-path" class="headerlink" title="files.getExtension(path)"></a>files.getExtension(path)</h3><ul><li><code>path</code> {string} 路径</li><li>返回 {string}</li></ul><p>返回文件的拓展名。例如<code>files.getExtension(&quot;/sdcard/1.txt&quot;)</code>返回”txt”。</p><h3 id="files-remove-path）"><a href="#files-remove-path）" class="headerlink" title="files.remove(path）"></a>files.remove(path）</h3><ul><li><code>path</code> {string} 路径</li><li>返回 {boolean}</li></ul><p>删除文件或<strong>空文件夹</strong>，返回是否删除成功。</p><h3 id="files-removeDir-path"><a href="#files-removeDir-path" class="headerlink" title="files.removeDir(path)"></a>files.removeDir(path)</h3><ul><li><code>path</code> {string} 路径</li><li><code>path</code> {string} 路径</li><li>返回 {boolean}</li></ul><p>删除文件夹，如果文件夹不为空，则删除该文件夹的所有内容再删除该文件夹，返回是否全部删除成功。</p><h3 id="files-getSdcardPath"><a href="#files-getSdcardPath" class="headerlink" title="files.getSdcardPath()"></a>files.getSdcardPath()</h3><ul><li>返回 {string}</li></ul><p>返回 SD 卡路径。所谓 SD 卡，即外部存储器。</p><h3 id="files-cwd"><a href="#files-cwd" class="headerlink" title="files.cwd()"></a>files.cwd()</h3><ul><li>返回 {string}</li></ul><p>返回脚本的”当前工作文件夹路径”。该路径指的是，如果脚本本身为脚本文件，则返回这个脚本文件所在目录；否则返回<code>null</code>获取其他设定路径。</p><p>例如，对于脚本文件”/sdcard/脚本/1.js”运行<code>files.cwd()</code>返回”/sdcard/脚本/“。</p><h3 id="files-path-relativePath"><a href="#files-path-relativePath" class="headerlink" title="files.path(relativePath)"></a>files.path(relativePath)</h3><ul><li><code>relativePath</code> {string} 相对路径</li><li>返回 {string}</li></ul><p>返回相对路径对应的绝对路径。例如<code>files.path(&quot;./1.png&quot;)</code>，如果运行这个语句的脚本位于文件夹”/sdcard/脚本/“中，则返回<code>&quot;/sdcard/脚本/1.png&quot;</code>。</p><h3 id="files-listDir-path-filter"><a href="#files-listDir-path-filter" class="headerlink" title="files.listDir(path[, filter])"></a>files.listDir(path[, filter])</h3><ul><li><code>path</code> {string} 路径</li><li><code>filter</code> {Function} 过滤函数，可选。接收一个<code>string</code>参数（文件名），返回一个<code>boolean</code>值。</li></ul><p>列出文件夹 path 下的满足条件的文件和文件夹的名称的数组。如果不加 filter 参数，则返回所有文件和文件夹。</p><p>列出 sdcard 目录下所有文件和文件夹为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = files.listDir(&quot;/sdcard/&quot;);</span><br><span class="line">log(arr);</span><br></pre></td></tr></table></figure><p>列出脚本目录下所有 js 脚本文件为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var dir = &quot;/sdcard/脚本/&quot;;</span><br><span class="line">var jsFiles = files.listDir(dir, function(name)&#123;</span><br><span class="line">    return name.endsWith(&quot;.js&quot;) &amp;&amp; files.isFile(files.join(dir, name));</span><br><span class="line">&#125;);</span><br><span class="line">log(jsFiles);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">是否是文件</span><br><span class="line">是否是文件夹</span><br><span class="line">是否是空的文件夹</span><br><span class="line">合并路径</span><br><span class="line">创建文件夹</span><br><span class="line">创建一系列文件夹</span><br><span class="line">文件是否存在</span><br><span class="line">确保文件夹存在</span><br><span class="line">读取文件</span><br><span class="line">读取文件字节集</span><br><span class="line">写到文件</span><br><span class="line">以字节集写到文件</span><br><span class="line">添加文本到文件末尾</span><br><span class="line">添加字节集到文件末尾</span><br><span class="line">复制</span><br><span class="line">移动</span><br><span class="line">重命名</span><br><span class="line">文件拓展名</span><br><span class="line">删除</span><br><span class="line">路径</span><br><span class="line">文件列表</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Autojs-概述&quot;&gt;&lt;a href=&quot;#Autojs-概述&quot; class=&quot;headerlink&quot; title=&quot;Autojs 概述&quot;&gt;&lt;/a&gt;Autojs 概述&lt;/h2&gt;&lt;h3 id=&quot;1、Autojs-是什么，能做什么？&quot;&gt;&lt;a href=&quot;#1、Autoj</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://wade9264.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Autojs" scheme="https://wade9264.github.io/tags/Autojs/"/>
    
    <category term="JavaScript" scheme="https://wade9264.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Chrome浏览器扩展开发</title>
    <link href="https://wade9264.github.io/posts/870abd39.html"/>
    <id>https://wade9264.github.io/posts/870abd39.html</id>
    <published>2020-06-11T16:00:00.000Z</published>
    <updated>2023-02-09T14:23:10.632Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是-Chrome-插件"><a href="#1-什么是-Chrome-插件" class="headerlink" title="1. 什么是 Chrome 插件"></a>1. 什么是 Chrome 插件</h3><p>Chrome 插件是一个用 Web 技术开发、用来增强浏览器功能的软件，它其实就是一个由 HTML、CSS、JS、图片等资源组成的一个<a href="https://developer.chrome.com/docs/extensions/mv3/hosting/">.crx</a>后缀的压缩包.</p><p>为什么是 Chrome 插件而不是 Firefox 插件</p><blockquote><ol><li>Chrome 占有率更高，更多人用；</li><li>开发更简单；</li><li>应用场景更广泛，Firefox 插件只能运行在 Firefox 上，而 Chrome 除了 Chrome 浏览器之外，还可以运行在所有 webkit 内核的国产浏览器，比如 360 极速浏览器、360 安全浏览器、搜狗浏览器、QQ 浏览器等等；</li><li>除此之外，Firefox 浏览器也对 Chrome 插件的运行提供了一定的支持；</li></ol></blockquote><h3 id="2-开发与调试"><a href="#2-开发与调试" class="headerlink" title="2.开发与调试"></a>2.开发与调试</h3><p>Chrome 插件没有严格的项目结构要求，只要保证本目录有一个<code>manifest.json</code>即可，也不需要专门的 IDE，普通的 web 开发工具即可。</p><p>从右上角菜单-&gt;更多工具-&gt;扩展程序可以进入 插件管理页面，也可以直接在地址栏输入 <a href="https://chrome//extensions">chrome://extensions</a> 访问。</p><p>勾选<code>开发者模式</code>即可以文件夹的形式直接加载插件，否则只能安装<code>.crx</code>格式的文件。Chrome 要求插件必须从它的 Chrome 应用商店安装，其它任何网站下载的都无法直接安装，所以，其实我们可以把<code>crx</code>文件解压，然后通过开发者模式直接加载。</p><p>开发中，代码有任何改动都必须重新加载插件，只需要在插件管理页按下<code>Ctrl+R</code>即可，以防万一最好还把页面刷新一下。</p><h3 id="3-核心介绍"><a href="#3-核心介绍" class="headerlink" title="3.核心介绍"></a>3.核心介绍</h3><p><code>manifest_version</code>、<code>name</code>、<code>version</code>3 个是必不可少的，<code>description</code>和<code>icons</code>是推荐的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 清单文件的版本，这个必须写，而且必须是2</span></span><br><span class="line">  <span class="attr">&quot;manifest_version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 插件的名称</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 插件的版本</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 插件描述</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;简单的Chrome扩展demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 图标，一般偷懒全部用一个尺寸的也没问题</span></span><br><span class="line">  <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;16&quot;</span><span class="punctuation">:</span> <span class="string">&quot;img/icon.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;48&quot;</span><span class="punctuation">:</span> <span class="string">&quot;img/icon.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;128&quot;</span><span class="punctuation">:</span> <span class="string">&quot;img/icon.png&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 会一直常驻的后台JS或后台页面</span></span><br><span class="line">  <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 2种指定方式，如果指定JS，那么会自动生成一个背景页</span></span><br><span class="line">    <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="string">&quot;background.html&quot;</span></span><br><span class="line">    <span class="comment">//&quot;scripts&quot;: [&quot;js/background.js&quot;]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 浏览器右上角图标设置，browser_action、page_action、app必须三选一</span></span><br><span class="line">  <span class="attr">&quot;browser_action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default_icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;img/icon.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 图标悬停时的标题，可选</span></span><br><span class="line">    <span class="attr">&quot;default_title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这是一个示例Chrome插件&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;default_popup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;popup.html&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 当某些特定页面打开才显示的图标</span></span><br><span class="line">  <span class="comment">/*&quot;page_action&quot;:</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        &quot;default_icon&quot;: &quot;img/icon.png&quot;,</span></span><br><span class="line"><span class="comment">        &quot;default_title&quot;: &quot;我是pageAction&quot;,</span></span><br><span class="line"><span class="comment">        &quot;default_popup&quot;: &quot;popup.html&quot;</span></span><br><span class="line"><span class="comment">    &#125;,*/</span></span><br><span class="line">  <span class="comment">// 需要直接注入页面的JS</span></span><br><span class="line">  <span class="attr">&quot;content_scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="comment">//&quot;matches&quot;: [&quot;http://*/*&quot;, &quot;https://*/*&quot;],</span></span><br><span class="line">      <span class="comment">// &quot;&lt;all_urls&gt;&quot; 表示匹配所有地址</span></span><br><span class="line">      <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;all_urls&gt;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// 多个JS按顺序注入</span></span><br><span class="line">      <span class="attr">&quot;js&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;js/jquery-1.8.3.js&quot;</span><span class="punctuation">,</span> <span class="string">&quot;js/content-script.js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// JS的注入可以随便一点，但是CSS的注意就要千万小心了，因为一不小心就可能影响全局样式</span></span><br><span class="line">      <span class="attr">&quot;css&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;css/custom.css&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// 代码注入的时间，可选值： &quot;document_start&quot;, &quot;document_end&quot;, or &quot;document_idle&quot;，最后一个表示页面空闲时，默认document_idle</span></span><br><span class="line">      <span class="attr">&quot;run_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;document_start&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 这里仅仅是为了演示content-script可以配置多个规则</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;*://*/*.png&quot;</span><span class="punctuation">,</span> <span class="string">&quot;*://*/*.jpg&quot;</span><span class="punctuation">,</span> <span class="string">&quot;*://*/*.gif&quot;</span><span class="punctuation">,</span> <span class="string">&quot;*://*/*.bmp&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;js&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;js/show-image-content-size.js&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 权限申请</span></span><br><span class="line">  <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;contextMenus&quot;</span><span class="punctuation">,</span> <span class="comment">// 右键菜单</span></span><br><span class="line">    <span class="string">&quot;tabs&quot;</span><span class="punctuation">,</span> <span class="comment">// 标签</span></span><br><span class="line">    <span class="string">&quot;notifications&quot;</span><span class="punctuation">,</span> <span class="comment">// 通知</span></span><br><span class="line">    <span class="string">&quot;webRequest&quot;</span><span class="punctuation">,</span> <span class="comment">// web请求</span></span><br><span class="line">    <span class="string">&quot;webRequestBlocking&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;storage&quot;</span><span class="punctuation">,</span> <span class="comment">// 插件本地存储</span></span><br><span class="line">    <span class="string">&quot;http://*/*&quot;</span><span class="punctuation">,</span> <span class="comment">// 可以通过executeScript或者insertCSS访问的网站</span></span><br><span class="line">    <span class="string">&quot;https://*/*&quot;</span> <span class="comment">// 可以通过executeScript或者insertCSS访问的网站</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的</span></span><br><span class="line">  <span class="attr">&quot;web_accessible_resources&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;js/inject.js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 插件主页，这个很重要，不要浪费了这个免费广告位</span></span><br><span class="line">  <span class="attr">&quot;homepage_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.baidu.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 覆盖浏览器默认页面</span></span><br><span class="line">  <span class="attr">&quot;chrome_url_overrides&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 覆盖浏览器默认的新标签页</span></span><br><span class="line">    <span class="attr">&quot;newtab&quot;</span><span class="punctuation">:</span> <span class="string">&quot;newtab.html&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// Chrome40以前的插件配置页写法</span></span><br><span class="line">  <span class="attr">&quot;options_page&quot;</span><span class="punctuation">:</span> <span class="string">&quot;options.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// Chrome40以后的插件配置页写法，如果2个都写，新版Chrome只认后面这一个</span></span><br><span class="line">  <span class="attr">&quot;options_ui&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="string">&quot;options.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 添加一些默认的样式，推荐使用</span></span><br><span class="line">    <span class="attr">&quot;chrome_style&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字</span></span><br><span class="line">  <span class="attr">&quot;omnibox&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="string">&quot;go&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 默认语言</span></span><br><span class="line">  <span class="attr">&quot;default_locale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh_CN&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// devtools页面入口，注意只能指向一个HTML文件，不能是JS文件</span></span><br><span class="line">  <span class="attr">&quot;devtools_page&quot;</span><span class="punctuation">:</span> <span class="string">&quot;devtools.html&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-content-scripts"><a href="#4-content-scripts" class="headerlink" title="4.content-scripts"></a>4.content-scripts</h3><p>所谓<a href="https://developer.chrome.com/docs/extensions/mv3/content_scripts/">content-scripts</a>，其实就是 Chrome 插件中向页面注入脚本的一种形式（虽然名为 script，其实还可以包括 css 的），借助<code>content-scripts</code>我们可以实现通过配置的方式轻松向指定页面注入 JS 和 CSS（如果需要动态注入，可以参考下文），最常见的比如：广告屏蔽、页面 CSS 定制，等等。</p><p>示例配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 需要直接注入页面的JS</span></span><br><span class="line">  <span class="attr">&quot;content_scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="comment">//&quot;matches&quot;: [&quot;http://*/*&quot;, &quot;https://*/*&quot;],</span></span><br><span class="line">      <span class="comment">// &quot;&lt;all_urls&gt;&quot; 表示匹配所有地址</span></span><br><span class="line">      <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;all_urls&gt;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// 多个JS按顺序注入</span></span><br><span class="line">      <span class="attr">&quot;js&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;js/jquery-1.8.3.js&quot;</span><span class="punctuation">,</span> <span class="string">&quot;js/content-script.js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// JS的注入可以随便一点，但是CSS的注意就要千万小心了，因为一不小心就可能影响全局样式</span></span><br><span class="line">      <span class="attr">&quot;css&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;css/custom.css&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// 代码注入的时间，可选值： &quot;document_start&quot;, &quot;document_end&quot;, or &quot;document_idle&quot;，最后一个表示页面空闲时，默认document_idle</span></span><br><span class="line">      <span class="attr">&quot;run_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;document_start&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>特别注意，如果没有主动指定<code>run_at</code>为<code>document_start</code>（默认为<code>document_idle</code>），下面这种代码是不会生效的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我被执行了！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>content-scripts</code>和原始页面共享 DOM，但是不共享 JS，如要访问页面 JS（例如某个 JS 变量），只能通过<code>injected js</code>来实现。<code>content-scripts</code>不能访问绝大部分<code>chrome.xxx.api</code>，除了下面这 4 种：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">chrome.<span class="title function_">extension</span>(getURL, inIncognitoContext, lastError, onRequest, sendRequest);</span><br><span class="line"></span><br><span class="line">chrome.<span class="property">i18n</span>;</span><br><span class="line"></span><br><span class="line">chrome.<span class="title function_">runtime</span>(</span><br><span class="line">  connect,</span><br><span class="line">  getManifest,</span><br><span class="line">  getURL,</span><br><span class="line">  id,</span><br><span class="line">  onConnect,</span><br><span class="line">  onMessage,</span><br><span class="line">  sendMessage</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">chrome.<span class="property">storage</span>;</span><br></pre></td></tr></table></figure><h3 id="5-background"><a href="#5-background" class="headerlink" title="5. background"></a>5. background</h3><p>后台（姑且这么翻译吧），是一个常驻的页面，它的生命周期是插件中所有类型页面中最长的，它随着浏览器的打开而打开，随着浏览器的关闭而关闭，所以通常把需要一直运行的、启动就运行的、全局的代码放在 background 里面。</p><p>background 的权限非常高，几乎可以调用所有的 Chrome 扩展 API（除了 devtools），而且它可以无限制跨域，也就是可以跨域访问任何网站而无需要求对方设置<code>CORS</code>。</p><blockquote><p>经过测试，其实不止是 background，所有的直接通过<code>chrome-extension://id/xx.html</code>这种方式打开的网页都可以无限制跨域。</p></blockquote><p>配置中，<code>background</code>可以通过<code>page</code>指定一张网页，也可以通过<code>scripts</code>直接指定一个 JS，Chrome 会自动为这个 JS 生成一个默认的网页：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 会一直常驻的后台JS或后台页面</span></span><br><span class="line">  <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 2种指定方式，如果指定JS，那么会自动生成一个背景页</span></span><br><span class="line">    <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="string">&quot;background.html&quot;</span></span><br><span class="line">    <span class="comment">//&quot;scripts&quot;: [&quot;js/background.js&quot;]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>需要特别说明的是</strong>，虽然你可以通过<code>chrome-extension://xxx/background.html</code>直接打开后台页，但是你打开的后台页和真正一直在后台运行的那个页面不是同一个，换句话说，你可以打开无数个<code>background.html</code>，但是真正在后台常驻的只有一个，而且这个你永远看不到它的界面，只能调试它的代码。</p><h3 id="6-event-pages"><a href="#6-event-pages" class="headerlink" title="6. event-pages"></a>6. event-pages</h3><p>这里顺带介绍一下<a href="https://developer.chrome.com/docs/apps/event_pages/">event-pages</a>，它是一个什么东西呢？鉴于 background 生命周期太长，长时间挂载后台可能会影响性能，所以 Google 又弄一个<code>event-pages</code>，在配置文件上，它与 background 的唯一区别就是多了一个<code>persistent</code>参数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;event-page.js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;persistent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>它的生命周期是：在被需要时加载，在空闲时被关闭，什么叫被需要时呢？比如第一次安装、插件更新、有 content-script 向它发送消息，等等。</p><h3 id="7-popup"><a href="#7-popup" class="headerlink" title="7. popup"></a>7. popup</h3><p><code>popup</code>是点击<code>browser_action</code>或者<code>page_action</code>图标时打开的一个小窗口网页，焦点离开网页就立即关闭，一般用来做一些临时性的交互。</p><p><code>popup</code>可以包含任意你想要的 HTML 内容，并且会自适应大小。可以通过<code>default_popup</code>字段来指定 popup 页面，也可以调用<code>setPopup()</code>方法。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;browser_action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default_icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;img/icon.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 图标悬停时的标题，可选</span></span><br><span class="line">    <span class="attr">&quot;default_title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这是一个示例Chrome插件&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;default_popup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;popup.html&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>需要特别注意的是</strong>，由于单击图标打开 popup，焦点离开又立即关闭，所以 popup 页面的生命周期一般很短，需要长时间运行的代码千万不要写在 popup 里面。</p><p>在权限上，它和 background 非常类似，它们之间最大的不同是生命周期的不同，popup 中可以直接通过<code>chrome.extension.getBackgroundPage()</code>获取 background 的 window 对象。</p><h3 id="8-injected-script"><a href="#8-injected-script" class="headerlink" title="8. injected-script"></a>8. injected-script</h3><p>这里的<code>injected-script</code>是我给它取的，指的是通过 DOM 操作的方式向页面注入的一种 JS。为什么要把这种 JS 单独拿出来讨论呢？又或者说为什么需要通过这种方式注入 JS 呢？</p><p>这是因为<code>content-script</code>有一个很大的“缺陷”，也就是无法访问页面中的 JS，虽然它可以操作 DOM，但是 DOM 却不能调用它，也就是无法在 DOM 中通过绑定事件的方式调用<code>content-script</code>中的代码（包括直接写<code>onclick</code>和<code>addEventListener</code>2 种方式都不行），但是，“在页面上添加一个按钮并调用插件的扩展 API”是一个很常见的需求，那该怎么办呢？其实这就是本小节要讲的。</p><p>在<code>content-script</code>中通过 DOM 方式向页面注入<code>inject-script</code>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向页面注入JS</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">injectCustomJs</span>(<span class="params">jsPath</span>) &#123;</span><br><span class="line">  jsPath = jsPath || <span class="string">&quot;js/inject.js&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> temp = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">  temp.<span class="title function_">setAttribute</span>(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text/javascript&quot;</span>);</span><br><span class="line">  <span class="comment">// 获得的地址类似：chrome-extension://ihcokhadfjfchaeagdoclpnjdiokfakg/js/inject.js</span></span><br><span class="line">  temp.<span class="property">src</span> = chrome.<span class="property">extension</span>.<span class="title function_">getURL</span>(jsPath);</span><br><span class="line">  temp.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 放在页面不好看，执行完后移除掉</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你以为这样就行了？执行一下你会看到如下报错：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Denying load of chrome-<span class="keyword">extension</span>:<span class="comment">//efbllncjkjiijkppagepehoekjojdclc/js/inject.js. Resources must be listed in the web_accessible_resources manifest key in order to be loaded by pages outside the extension.</span></span><br></pre></td></tr></table></figure><p>意思就是你想要在 web 中直接访问插件中的资源的话必须显示声明才行，配置文件中增加如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的</span></span><br><span class="line">    <span class="string">&quot;web_accessible_resources&quot;</span>: [<span class="string">&quot;js/inject.js&quot;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于<code>inject-script</code>如何调用<code>content-script</code>中的代码，后面我会在专门的一个消息通信章节详细介绍。</p><h3 id="9-homepage-url"><a href="#9-homepage-url" class="headerlink" title="9.homepage_url"></a>9.homepage_url</h3><p>开发者或者插件主页设置，一般会在如下 2 个地方显示：</p><h3 id="10-browserAction-浏览器右上角"><a href="#10-browserAction-浏览器右上角" class="headerlink" title="10. browserAction(浏览器右上角)"></a>10. browserAction(浏览器右上角)</h3><p>通过配置<code>browser_action</code>可以在浏览器的右上角增加一个图标，一个<code>browser_action</code>可以拥有一个图标，一个<code>tooltip</code>，一个<code>badge</code>和一个<code>popup</code>。</p><p>示例配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;browser_action&quot;</span><span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default_icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;img/icon.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;default_title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这是一个示例Chrome插件&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;default_popup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;popup.html&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="10-1-图标"><a href="#10-1-图标" class="headerlink" title="10.1 图标"></a>10.1 图标</h4><p><code>browser_action</code>图标推荐使用宽高都为 19 像素的图片，更大的图标会被缩小，格式随意，一般推荐 png，可以通过 manifest 中<code>default_icon</code>字段配置，也可以调用 setIcon()方法。</p><h4 id="10-2-tooltip"><a href="#10-2-tooltip" class="headerlink" title="10.2 tooltip"></a>10.2 tooltip</h4><p>修改<code>browser_action</code>的 manifest 中<code>default_title</code>字段，或者调用<code>setTitle()</code>方法。</p><h4 id="10-3-badge"><a href="#10-3-badge" class="headerlink" title="10.3. badge"></a>10.3. badge</h4><p>所谓<code>badge</code>就是在图标上显示一些文本，可以用来更新一些小的扩展状态提示信息。因为 badge 空间有限，所以只支持 4 个以下的字符（英文 4 个，中文 2 个）。badge 无法通过配置文件来指定，必须通过代码实现，设置 badge 文字和颜色可以分别使用<code>setBadgeText()</code>和<code>setBadgeBackgroundColor()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chrome.<span class="property">browserAction</span>.<span class="title function_">setBadgeText</span>(&#123; <span class="attr">text</span>: <span class="string">&quot;new&quot;</span> &#125;);</span><br><span class="line">chrome.<span class="property">browserAction</span>.<span class="title function_">setBadgeBackgroundColor</span>(&#123; <span class="attr">color</span>: [<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>] &#125;);</span><br></pre></td></tr></table></figure><p>效果：</p><h3 id="11-pageAction-地址栏右侧"><a href="#11-pageAction-地址栏右侧" class="headerlink" title="11. pageAction(地址栏右侧)"></a>11. pageAction(地址栏右侧)</h3><p>所谓<code>pageAction</code>，指的是只有当某些特定页面打开才显示的图标，它和<code>browserAction</code>最大的区别是一个始终都显示，一个只在特定情况才显示。</p><p>需要特别说明的是早些版本的 Chrome 是将 pageAction 放在地址栏的最右边，左键单击弹出 popup，右键单击则弹出相关默认的选项菜单：</p><p>而新版的 Chrome 更改了这一策略，pageAction 和普通的 browserAction 一样也是放在浏览器右上角，只不过没有点亮时是灰色的，点亮了才是彩色的，灰色时无论左键还是右键单击都是弹出选项：</p><blockquote><p>具体是从哪一版本开始改的没去仔细考究，反正知道 v50.0 的时候还是前者，v58.0 的时候已改为后者。</p></blockquote><p>调整之后的<code>pageAction</code>我们可以简单地把它看成是可以置灰的<code>browserAction</code>。</p><ul><li>chrome.pageAction.show(tabId) 显示图标；</li><li>chrome.pageAction.hide(tabId) 隐藏图标；</li></ul><p>示例(只有打开百度才显示图标)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// manifest.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;page_action&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;default_icon&quot;</span>: <span class="string">&quot;img/icon.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;default_title&quot;</span>: <span class="string">&quot;我是pageAction&quot;</span>,</span><br><span class="line">        <span class="string">&quot;default_popup&quot;</span>: <span class="string">&quot;popup.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;permissions&quot;</span>: [<span class="string">&quot;declarativeContent&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// background.js</span></span><br><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onInstalled</span>.<span class="title function_">addListener</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    chrome.<span class="property">declarativeContent</span>.<span class="property">onPageChanged</span>.<span class="title function_">removeRules</span>(<span class="literal">undefined</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        chrome.<span class="property">declarativeContent</span>.<span class="property">onPageChanged</span>.<span class="title function_">addRules</span>([</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">conditions</span>: [</span><br><span class="line">                    <span class="comment">// 只有打开百度才显示pageAction</span></span><br><span class="line">                    <span class="keyword">new</span> chrome.<span class="property">declarativeContent</span>.<span class="title class_">PageStateMatcher</span>(&#123;<span class="attr">pageUrl</span>: &#123;<span class="attr">urlContains</span>: <span class="string">&#x27;baidu.com&#x27;</span>&#125;&#125;)</span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">actions</span>: [<span class="keyword">new</span> chrome.<span class="property">declarativeContent</span>.<span class="title class_">ShowPageAction</span>()]</span><br><span class="line">            &#125;</span><br><span class="line">        ]);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果图：</p><h3 id="12-右键菜单"><a href="#12-右键菜单" class="headerlink" title="12. 右键菜单"></a>12. 右键菜单</h3><p>通过开发 Chrome 插件可以自定义浏览器的右键菜单，主要是通过<code>chrome.contextMenus</code>API 实现，右键菜单可以出现在不同的上下文，比如普通页面、选中的文字、图片、链接，等等，如果有同一个插件里面定义了多个菜单，Chrome 会自动组合放到以插件名字命名的二级菜单里，如下：</p><h4 id="12-1-最简单的右键菜单示例"><a href="#12-1-最简单的右键菜单示例" class="headerlink" title="12.1 最简单的右键菜单示例"></a>12.1 最简单的右键菜单示例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// manifest.json</span></span><br><span class="line">&#123;<span class="string">&quot;permissions&quot;</span>: [<span class="string">&quot;contextMenus&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// background.js</span></span><br><span class="line">chrome.<span class="property">contextMenus</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;测试右键菜单&quot;</span>,</span><br><span class="line">    <span class="attr">onclick</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&#x27;您点击了右键菜单！&#x27;</span>);&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果：</p><h4 id="12-2-添加右键百度搜索"><a href="#12-2-添加右键百度搜索" class="headerlink" title="12.2 添加右键百度搜索"></a>12.2 添加右键百度搜索</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// manifest.json</span></span><br><span class="line">&#123;<span class="string">&quot;permissions&quot;</span>: [<span class="string">&quot;contextMenus&quot;</span>， <span class="string">&quot;tabs&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// background.js</span></span><br><span class="line">chrome.<span class="property">contextMenus</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;使用度娘搜索：%s&#x27;</span>, <span class="comment">// %s表示选中的文字</span></span><br><span class="line">    <span class="attr">contexts</span>: [<span class="string">&#x27;selection&#x27;</span>], <span class="comment">// 只有当选中文字时才会出现此右键菜单</span></span><br><span class="line">    <span class="attr">onclick</span>: <span class="keyword">function</span>(<span class="params">params</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 注意不能使用location.href，因为location是属于background的window对象</span></span><br><span class="line">        chrome.<span class="property">tabs</span>.<span class="title function_">create</span>(&#123;<span class="attr">url</span>: <span class="string">&#x27;https://www.baidu.com/s?ie=utf-8&amp;wd=&#x27;</span> + <span class="built_in">encodeURI</span>(params.<span class="property">selectionText</span>)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果如下：</p><h4 id="12-3-语法说明"><a href="#12-3-语法说明" class="headerlink" title="12.3 语法说明"></a>12.3 语法说明</h4><p>这里只是简单列举一些常用的，完整 API 参见：<a href="https://developer.chrome.com/docs/extensions/reference/contextMenus/">https://developer.chrome.com/extensions/contextMenus</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">chrome.<span class="property">contextMenus</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;normal&#x27;</span>， <span class="comment">// 类型，可选：[&quot;normal&quot;, &quot;checkbox&quot;, &quot;radio&quot;, &quot;separator&quot;]，默认 normal</span></span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;菜单的名字&#x27;</span>, <span class="comment">// 显示的文字，除非为“separator”类型否则此参数必需，如果类型为“selection”，可以使用%s显示选定的文本</span></span><br><span class="line">    <span class="attr">contexts</span>: [<span class="string">&#x27;page&#x27;</span>], <span class="comment">// 上下文环境，可选：[&quot;all&quot;, &quot;page&quot;, &quot;frame&quot;, &quot;selection&quot;, &quot;link&quot;, &quot;editable&quot;, &quot;image&quot;, &quot;video&quot;, &quot;audio&quot;]，默认page</span></span><br><span class="line">    <span class="attr">onclick</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;, <span class="comment">// 单击时触发的方法</span></span><br><span class="line">    <span class="attr">parentId</span>: <span class="number">1</span>, <span class="comment">// 右键菜单项的父菜单项ID。指定父菜单项将会使此菜单项成为父菜单项的子菜单</span></span><br><span class="line">    <span class="attr">documentUrlPatterns</span>: <span class="string">&#x27;https://*.baidu.com/*&#x27;</span> <span class="comment">// 只在某些页面显示此右键菜单</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 删除某一个菜单项</span></span><br><span class="line">chrome.<span class="property">contextMenus</span>.<span class="title function_">remove</span>(menuItemId)；</span><br><span class="line"><span class="comment">// 删除所有自定义右键菜单</span></span><br><span class="line">chrome.<span class="property">contextMenus</span>.<span class="title function_">removeAll</span>();</span><br><span class="line"><span class="comment">// 更新某一个菜单项</span></span><br><span class="line">chrome.<span class="property">contextMenus</span>.<span class="title function_">update</span>(menuItemId, updateProperties);</span><br></pre></td></tr></table></figure><h4 id="12-4-override-覆盖特定页面"><a href="#12-4-override-覆盖特定页面" class="headerlink" title="12.4 override(覆盖特定页面)"></a>12.4 override(覆盖特定页面)</h4><p>使用<code>override</code>页可以将 Chrome 默认的一些特定页面替换掉，改为使用扩展提供的页面。</p><p>扩展可以替代如下页面：</p><ul><li>历史记录：从工具菜单上点击历史记录时访问的页面，或者从地址栏直接输入 <a href="https://chrome//history">chrome://history</a></li><li>新标签页：当创建新标签的时候访问的页面，或者从地址栏直接输入 <a href="https://chrome//newtab">chrome://newtab</a></li><li>书签：浏览器的书签，或者直接输入 <a href="https://chrome//bookmarks">chrome://bookmarks</a></li></ul><p>注意：</p><ul><li>一个扩展只能替代一个页面；</li><li>不能替代隐身窗口的新标签页；</li><li>网页必须设置 title，否则用户可能会看到网页的 URL，造成困扰；</li></ul><p>下面的截图是默认的新标签页和被扩展替换掉的新标签页。</p><p>代码（注意，一个插件只能替代一个默认页，以下仅为演示）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;chrome_url_overrides&quot;</span>:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;newtab&quot;</span>: <span class="string">&quot;newtab.html&quot;</span>,</span><br><span class="line">    <span class="string">&quot;history&quot;</span>: <span class="string">&quot;history.html&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bookmarks&quot;</span>: <span class="string">&quot;bookmarks.html&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-option-选项页"><a href="#13-option-选项页" class="headerlink" title="13. option(选项页)"></a>13. option(选项页)</h3><p>所谓<code>options</code>页，就是插件的设置页面，有 2 个入口，一个是右键图标有一个“选项”菜单，还有一个在插件管理页面：</p><p>在 Chrome40 以前，options 页面和其它普通页面没什么区别，Chrome40 以后则有了一些变化。</p><p>我们先看老版的<a href="https://developer.chrome.com/docs/extensions/mv3/options/">options</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Chrome40以前的插件配置页写法</span></span><br><span class="line">    <span class="string">&quot;options_page&quot;</span>: <span class="string">&quot;options.html&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个页面里面的内容就随你自己发挥了，配置之后在插件管理页就会看到一个<code>选项</code>按钮入口，点进去就是打开一个网页，没啥好讲的。</p><p>效果:</p><p>再来看新版的<a href="https://developer.chrome.com/docs/extensions/mv2/options/">optionsV2</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;options_ui&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;page&quot;</span>: <span class="string">&quot;options.html&quot;</span>,</span><br><span class="line">        <span class="comment">// 添加一些默认的样式，推荐使用</span></span><br><span class="line">        <span class="string">&quot;chrome_style&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>options.html</code>的代码我们没有任何改动，只是配置文件改了，之后效果如下：</p><p>看起来是不是高大上了？</p><p>几点注意：</p><ul><li>为了兼容，建议 2 种都写，如果都写了，Chrome40 以后会默认读取新版的方式；</li><li>新版 options 中不能使用 alert；</li><li>数据存储建议用 chrome.storage，因为会随用户自动同步；</li></ul><h3 id="14-omnibox"><a href="#14-omnibox" class="headerlink" title="14. omnibox"></a>14. omnibox</h3><p><code>omnibox</code>是向用户提供搜索建议的一种方式。先来看个<code>gif</code>图以便了解一下这东西到底是个什么鬼：</p><p>注册某个关键字以触发插件自己的搜索建议界面，然后可以任意发挥了。</p><p>首先，配置文件如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字</span></span><br><span class="line">    <span class="string">&quot;omnibox&quot;</span>: &#123; <span class="string">&quot;keyword&quot;</span> : <span class="string">&quot;go&quot;</span> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后<code>background.js</code>中注册监听事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// omnibox 演示</span></span><br><span class="line">chrome.<span class="property">omnibox</span>.<span class="property">onInputChanged</span>.<span class="title function_">addListener</span>(<span class="function">(<span class="params">text, suggest</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inputChanged: &quot;</span> + text);</span><br><span class="line">  <span class="keyword">if</span> (!text) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (text == <span class="string">&quot;美女&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">suggest</span>([</span><br><span class="line">      &#123; <span class="attr">content</span>: <span class="string">&quot;中国&quot;</span> + text, <span class="attr">description</span>: <span class="string">&quot;你要找“中国美女”吗？&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">content</span>: <span class="string">&quot;日本&quot;</span> + text, <span class="attr">description</span>: <span class="string">&quot;你要找“日本美女”吗？&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">content</span>: <span class="string">&quot;泰国&quot;</span> + text, <span class="attr">description</span>: <span class="string">&quot;你要找“泰国美女或人妖”吗？&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">content</span>: <span class="string">&quot;韩国&quot;</span> + text, <span class="attr">description</span>: <span class="string">&quot;你要找“韩国美女”吗？&quot;</span> &#125;,</span><br><span class="line">    ]);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (text == <span class="string">&quot;微博&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">suggest</span>([</span><br><span class="line">      &#123; <span class="attr">content</span>: <span class="string">&quot;新浪&quot;</span> + text, <span class="attr">description</span>: <span class="string">&quot;新浪&quot;</span> + text &#125;,</span><br><span class="line">      &#123; <span class="attr">content</span>: <span class="string">&quot;腾讯&quot;</span> + text, <span class="attr">description</span>: <span class="string">&quot;腾讯&quot;</span> + text &#125;,</span><br><span class="line">      &#123; <span class="attr">content</span>: <span class="string">&quot;搜狐&quot;</span> + text, <span class="attr">description</span>: <span class="string">&quot;搜索&quot;</span> + text &#125;,</span><br><span class="line">    ]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">suggest</span>([</span><br><span class="line">      &#123; <span class="attr">content</span>: <span class="string">&quot;百度搜索 &quot;</span> + text, <span class="attr">description</span>: <span class="string">&quot;百度搜索 &quot;</span> + text &#125;,</span><br><span class="line">      &#123; <span class="attr">content</span>: <span class="string">&quot;谷歌搜索 &quot;</span> + text, <span class="attr">description</span>: <span class="string">&quot;谷歌搜索 &quot;</span> + text &#125;,</span><br><span class="line">    ]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当用户接收关键字建议时触发</span></span><br><span class="line">chrome.<span class="property">omnibox</span>.<span class="property">onInputEntered</span>.<span class="title function_">addListener</span>(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inputEntered: &quot;</span> + text);</span><br><span class="line">  <span class="keyword">if</span> (!text) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">var</span> href = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (text.<span class="title function_">endsWith</span>(<span class="string">&quot;美女&quot;</span>))</span><br><span class="line">    href =</span><br><span class="line">      <span class="string">&quot;http://image.baidu.com/search/index?tn=baiduimage&amp;ie=utf-8&amp;word=&quot;</span> + text;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (text.<span class="title function_">startsWith</span>(<span class="string">&quot;百度搜索&quot;</span>))</span><br><span class="line">    href =</span><br><span class="line">      <span class="string">&quot;https://www.baidu.com/s?ie=UTF-8&amp;wd=&quot;</span> + text.<span class="title function_">replace</span>(<span class="string">&quot;百度搜索 &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (text.<span class="title function_">startsWith</span>(<span class="string">&quot;谷歌搜索&quot;</span>))</span><br><span class="line">    href =</span><br><span class="line">      <span class="string">&quot;https://www.google.com.tw/search?q=&quot;</span> + text.<span class="title function_">replace</span>(<span class="string">&quot;谷歌搜索 &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span> href = <span class="string">&quot;https://www.baidu.com/s?ie=UTF-8&amp;wd=&quot;</span> + text;</span><br><span class="line">  <span class="title function_">openUrlCurrentTab</span>(href);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 获取当前选项卡ID</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCurrentTabId</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  chrome.<span class="property">tabs</span>.<span class="title function_">query</span>(&#123; <span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">currentWindow</span>: <span class="literal">true</span> &#125;, <span class="keyword">function</span> (<span class="params">tabs</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (callback) <span class="title function_">callback</span>(tabs.<span class="property">length</span> ? tabs[<span class="number">0</span>].<span class="property">id</span> : <span class="literal">null</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前标签打开某个链接</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">openUrlCurrentTab</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="title function_">getCurrentTabId</span>(<span class="function">(<span class="params">tabId</span>) =&gt;</span> &#123;</span><br><span class="line">    chrome.<span class="property">tabs</span>.<span class="title function_">update</span>(tabId, &#123; <span class="attr">url</span>: url &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="15-桌面通知"><a href="#15-桌面通知" class="headerlink" title="15. 桌面通知"></a>15. 桌面通知</h3><p>Chrome 提供了一个<code>chrome.notifications</code>API 以便插件推送桌面通知，暂未找到<code>chrome.notifications</code>和 HTML5 自带的<code>Notification</code>的显著区别及优势。</p><p>在后台 JS 中，无论是使用<code>chrome.notifications</code>还是<code>Notification</code>都不需要申请权限（HTML5 方式需要申请权限），直接使用即可。</p><p>最简单的通知：</p><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chrome.<span class="property">notifications</span>.<span class="title function_">create</span>(<span class="literal">null</span>, &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;basic&quot;</span>,</span><br><span class="line">  <span class="attr">iconUrl</span>: <span class="string">&quot;img/icon.png&quot;</span>,</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;这是标题&quot;</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;您刚才点击了自定义右键菜单！&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通知的样式可以很丰富：</p><p>这个没有深入研究，有需要的可以去看官方文档。</p><h3 id="16-5-种类型的-JS-对比"><a href="#16-5-种类型的-JS-对比" class="headerlink" title="16.5 种类型的 JS 对比"></a>16.5 种类型的 JS 对比</h3><p>Chrome 插件的 JS 主要可以分为这 5 类：<code>injected script</code>、<code>content-script</code>、<code>popup js</code>、<code>background js</code>和<code>devtools js</code>，</p><h4 id="16-1-权限对比"><a href="#16-1-权限对比" class="headerlink" title="16.1 权限对比"></a>16.1 权限对比</h4><table><thead><tr><th>JS 种类</th><th>可访问的 API</th><th>DOM 访问情况</th><th>JS 访问情况</th><th>直接跨域</th></tr></thead><tbody><tr><td>injected script</td><td>和普通 JS 无任何差别，不能访问任何扩展 API</td><td>可以访问</td><td>可以访问</td><td>不可以</td></tr><tr><td>content script</td><td>只能访问 extension、runtime 等部分 API</td><td>可以访问</td><td>不可以</td><td>不可以</td></tr><tr><td>popup js</td><td>可访问绝大部分 API，除了 devtools 系列</td><td>不可直接访问</td><td>不可以</td><td>可以</td></tr><tr><td>background js</td><td>可访问绝大部分 API，除了 devtools 系列</td><td>不可直接访问</td><td>不可以</td><td>可以</td></tr><tr><td>devtools js</td><td>只能访问 devtools、extension、runtime 等部分 API</td><td>可以</td><td>可以</td><td>不可以</td></tr></tbody></table><h4 id="16-2-调试方式对比"><a href="#16-2-调试方式对比" class="headerlink" title="16.2 调试方式对比"></a>16.2 调试方式对比</h4><table><thead><tr><th>JS 类型</th><th>调试方式</th><th>图片说明</th></tr></thead><tbody><tr><td>injected script</td><td>直接普通的 F12 即可</td><td>懒得截图</td></tr><tr><td>content-script</td><td>打开 Console,如图切换</td><td></td></tr><tr><td>popup-js</td><td>popup 页面右键审查元素</td><td></td></tr><tr><td>background</td><td>插件管理页点击背景页即可</td><td></td></tr><tr><td>devtools-js</td><td>暂未找到有效方法</td><td>-</td></tr></tbody></table><h3 id="17-消息通信"><a href="#17-消息通信" class="headerlink" title="17.消息通信"></a>17.消息通信</h3><p>通信主页：<a href="https://developer.chrome.com/docs/extensions/mv3/messaging/">https://developer.chrome.com/extensions/messaging</a></p><p>前面我们介绍了 Chrome 插件中存在的 5 种 JS，那么它们之间如何互相通信呢？下面先来系统概况一下，然后再分类细说。需要知道的是，popup 和 background 其实几乎可以视为一种东西，因为它们可访问的 API 都一样、通信机制一样、都可以跨域。</p><h4 id="17-1-互相通信概览"><a href="#17-1-互相通信概览" class="headerlink" title="17.1 互相通信概览"></a>17.1 互相通信概览</h4><p>注：<code>-</code>表示不存在或者无意义，或者待验证。</p><table><thead><tr><th></th><th>injected-script</th><th>content-script</th><th>popup-js</th><th>background-js</th></tr></thead><tbody><tr><td>injected-script</td><td>-</td><td>window.postMessage</td><td>-</td><td>-</td></tr><tr><td>content-script</td><td>window.postMessage</td><td>-</td><td>chrome.runtime.sendMessage chrome.runtime.connect</td><td>chrome.runtime.sendMessage chrome.runtime.connect</td></tr><tr><td>popup-js</td><td>-</td><td>chrome.tabs.sendMessage chrome.tabs.connect</td><td>-</td><td>chrome.extension. getBackgroundPage()</td></tr><tr><td>background-js</td><td>-</td><td>chrome.tabs.sendMessage chrome.tabs.connect</td><td>chrome.extension.getViews</td><td>-</td></tr><tr><td>devtools-js</td><td>chrome.devtools. inspectedWindow.eval</td><td>-</td><td>chrome.runtime.sendMessage</td><td>chrome.runtime.sendMessage</td></tr></tbody></table><h4 id="17-2-通信详细介绍"><a href="#17-2-通信详细介绍" class="headerlink" title="17.2. 通信详细介绍"></a>17.2. 通信详细介绍</h4><h5 id="17-2-1-popup-和-background"><a href="#17-2-1-popup-和-background" class="headerlink" title="17.2.1. popup 和 background"></a>17.2.1. popup 和 background</h5><p>popup 可以直接调用 background 中的 JS 方法，也可以直接访问 background 的 DOM：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// background.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;我是background！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// popup.js</span></span><br><span class="line"><span class="keyword">var</span> bg = chrome.<span class="property">extension</span>.<span class="title function_">getBackgroundPage</span>();</span><br><span class="line">bg.<span class="title function_">test</span>(); <span class="comment">// 访问bg的函数</span></span><br><span class="line"><span class="title function_">alert</span>(bg.<span class="property">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span>); <span class="comment">// 访问bg的DOM</span></span><br></pre></td></tr></table></figure><blockquote><p>小插曲，今天碰到一个情况，发现 popup 无法获取 background 的任何方法，找了半天才发现是因为 background 的 js 报错了，而你如果不主动查看 background 的 js 的话，是看不到错误信息的，特此提醒。</p></blockquote><p>至于<code>background</code>访问<code>popup</code>如下（前提是<code>popup</code>已经打开）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> views = chrome.<span class="property">extension</span>.<span class="title function_">getViews</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;popup&quot;</span> &#125;);</span><br><span class="line"><span class="keyword">if</span> (views.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(views[<span class="number">0</span>].<span class="property">location</span>.<span class="property">href</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="17-2-2-popup-或者-bg-向-content-主动发送消息"><a href="#17-2-2-popup-或者-bg-向-content-主动发送消息" class="headerlink" title="17.2.2. popup 或者 bg 向 content 主动发送消息"></a>17.2.2. popup 或者 bg 向 content 主动发送消息</h5><p>background.js 或者 popup.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendMessageToContentScript</span>(<span class="params">message, callback</span>) &#123;</span><br><span class="line">  chrome.<span class="property">tabs</span>.<span class="title function_">query</span>(&#123; <span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">currentWindow</span>: <span class="literal">true</span> &#125;, <span class="keyword">function</span> (<span class="params">tabs</span>) &#123;</span><br><span class="line">    chrome.<span class="property">tabs</span>.<span class="title function_">sendMessage</span>(tabs[<span class="number">0</span>].<span class="property">id</span>, message, <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (callback) <span class="title function_">callback</span>(response);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sendMessageToContentScript</span>(</span><br><span class="line">  &#123; <span class="attr">cmd</span>: <span class="string">&quot;test&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;你好，我是popup！&quot;</span> &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;来自content的回复：&quot;</span> + response);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>content-script.js</code>接收：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onMessage</span>.<span class="title function_">addListener</span>(<span class="keyword">function</span> (<span class="params">request, sender, sendResponse</span>) &#123;</span><br><span class="line">  <span class="comment">// console.log(sender.tab ?&quot;from a content script:&quot; + sender.tab.url :&quot;from the extension&quot;);</span></span><br><span class="line">  <span class="keyword">if</span> (request.<span class="property">cmd</span> == <span class="string">&quot;test&quot;</span>) <span class="title function_">alert</span>(request.<span class="property">value</span>);</span><br><span class="line">  <span class="title function_">sendResponse</span>(<span class="string">&quot;我收到了你的消息！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>双方通信直接发送的都是 JSON 对象，不是 JSON 字符串，所以无需解析，很方便（当然也可以直接发送字符串）。</p><blockquote><p>网上有些老代码中用的是<code>chrome.extension.onMessage</code>，没有完全查清二者的区别(貌似是别名)，但是建议统一使用<code>chrome.runtime.onMessage</code>。</p></blockquote><h5 id="17-2-3-content-script-主动发消息给后台"><a href="#17-2-3-content-script-主动发消息给后台" class="headerlink" title="17.2.3. content-script 主动发消息给后台"></a>17.2.3. content-script 主动发消息给后台</h5><p>content-script.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chrome.<span class="property">runtime</span>.<span class="title function_">sendMessage</span>(</span><br><span class="line">  &#123; <span class="attr">greeting</span>: <span class="string">&quot;你好，我是content-script呀，我主动发消息给后台！&quot;</span> &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到来自后台的回复：&quot;</span> + response);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>background.js 或者 popup.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听来自content-script的消息</span></span><br><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onMessage</span>.<span class="title function_">addListener</span>(<span class="keyword">function</span> (<span class="params">request, sender, sendResponse</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到来自content-script的消息：&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(request, sender, sendResponse);</span><br><span class="line">  <span class="title function_">sendResponse</span>(<span class="string">&quot;我是后台，我已收到你的消息：&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(request));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>content_scripts 向<code>popup</code>主动发消息的前提是 popup 必须打开！否则需要利用 background 作中转；</li><li>如果 background 和 popup 同时监听，那么它们都可以同时收到消息，但是只有一个可以 sendResponse，一个先发送了，那么另外一个再发送就无效；</li></ul><h5 id="17-2-4-injected-script-和-content-script"><a href="#17-2-4-injected-script-和-content-script" class="headerlink" title="17.2.4. injected script 和 content-script"></a>17.2.4. injected script 和 content-script</h5><p><code>content-script</code>和页面内的脚本（<code>injected-script</code>自然也属于页面内的脚本）之间唯一共享的东西就是页面的 DOM 元素，有 2 种方法可以实现二者通讯：</p><ol><li>可以通过<code>window.postMessage</code>和<code>window.addEventListener</code>来实现二者消息通讯；</li><li>通过自定义 DOM 事件来实现；</li></ol><p>第一种方法（推荐）：</p><p><code>injected-script</code>中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">postMessage</span>(&#123; <span class="attr">test</span>: <span class="string">&quot;你好！&quot;</span> &#125;, <span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure><p>content script 中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;message&quot;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>第二种方法：</p><p><code>injected-script</code>中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> customEvent = <span class="variable language_">document</span>.<span class="title function_">createEvent</span>(<span class="string">&quot;Event&quot;</span>);</span><br><span class="line">customEvent.<span class="title function_">initEvent</span>(<span class="string">&quot;myCustomEvent&quot;</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fireCustomEvent</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  hiddenDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCustomEventDiv&quot;</span>);</span><br><span class="line">  hiddenDiv.<span class="property">innerText</span> = data;</span><br><span class="line">  hiddenDiv.<span class="title function_">dispatchEvent</span>(customEvent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fireCustomEvent</span>(<span class="string">&quot;你好，我是普通JS！&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>content-script.js</code>中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hiddenDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCustomEventDiv&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!hiddenDiv) &#123;</span><br><span class="line">  hiddenDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  hiddenDiv.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(hiddenDiv);</span><br><span class="line">&#125;</span><br><span class="line">hiddenDiv.<span class="title function_">addEventListener</span>(<span class="string">&quot;myCustomEvent&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> eventData = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCustomEventDiv&quot;</span>).<span class="property">innerText</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到自定义事件消息：&quot;</span> + eventData);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="17-3-长连接和短连接"><a href="#17-3-长连接和短连接" class="headerlink" title="17.3. 长连接和短连接"></a>17.3. 长连接和短连接</h4><p>其实上面已经涉及到了，这里再单独说明一下。Chrome 插件中有 2 种通信方式，一个是短连接（<code>chrome.tabs.sendMessage</code>和<code>chrome.runtime.sendMessage</code>），一个是长连接（<code>chrome.tabs.connect</code>和<code>chrome.runtime.connect</code>）。</p><p>短连接的话就是挤牙膏一样，我发送一下，你收到了再回复一下，如果对方不回复，你只能重新发，而长连接类似<code>WebSocket</code>会一直建立连接，双方可以随时互发消息。</p><p>短连接上面已经有代码示例了，这里只讲一下长连接。</p><p>popup.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getCurrentTabId</span>(<span class="function">(<span class="params">tabId</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> port = chrome.<span class="property">tabs</span>.<span class="title function_">connect</span>(tabId, &#123; <span class="attr">name</span>: <span class="string">&quot;test-connect&quot;</span> &#125;);</span><br><span class="line">  port.<span class="title function_">postMessage</span>(&#123; <span class="attr">question</span>: <span class="string">&quot;你是谁啊？&quot;</span> &#125;);</span><br><span class="line">  port.<span class="property">onMessage</span>.<span class="title function_">addListener</span>(<span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;收到消息：&quot;</span> + msg.<span class="property">answer</span>);</span><br><span class="line">    <span class="keyword">if</span> (msg.<span class="property">answer</span> &amp;&amp; msg.<span class="property">answer</span>.<span class="title function_">startsWith</span>(<span class="string">&quot;我是&quot;</span>)) &#123;</span><br><span class="line">      port.<span class="title function_">postMessage</span>(&#123; <span class="attr">question</span>: <span class="string">&quot;哦，原来是你啊！&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>content-script.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听长连接</span></span><br><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onConnect</span>.<span class="title function_">addListener</span>(<span class="keyword">function</span> (<span class="params">port</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(port);</span><br><span class="line">  <span class="keyword">if</span> (port.<span class="property">name</span> == <span class="string">&quot;test-connect&quot;</span>) &#123;</span><br><span class="line">    port.<span class="property">onMessage</span>.<span class="title function_">addListener</span>(<span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到长连接消息：&quot;</span>, msg);</span><br><span class="line">      <span class="keyword">if</span> (msg.<span class="property">question</span> == <span class="string">&quot;你是谁啊？&quot;</span>)</span><br><span class="line">        port.<span class="title function_">postMessage</span>(&#123; <span class="attr">answer</span>: <span class="string">&quot;我是你爸！&quot;</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="18-其他重要知识点"><a href="#18-其他重要知识点" class="headerlink" title="18.其他重要知识点"></a>18.其他重要知识点</h3><h4 id="18-1-动态注入或执行-JS"><a href="#18-1-动态注入或执行-JS" class="headerlink" title="18.1. 动态注入或执行 JS"></a>18.1. 动态注入或执行 JS</h4><p>虽然在<code>background</code>和<code>popup</code>中无法直接访问页面 DOM，但是可以通过<code>chrome.tabs.executeScript</code>来执行脚本，从而实现访问 web 页面的 DOM（注意，这种方式也不能直接访问页面 JS）。</p><p>示例<code>manifest.json</code>配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;动态JS注入演示&quot;</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;permissions&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;tabs&quot;</span>, <span class="string">&quot;http://*/*&quot;</span>, <span class="string">&quot;https://*/*&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JS：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态执行JS代码</span></span><br><span class="line">chrome.<span class="property">tabs</span>.<span class="title function_">executeScript</span>(tabId, &#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="string">&#x27;document.body.style.backgroundColor=&quot;red&quot;&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 动态执行JS文件</span></span><br><span class="line">chrome.<span class="property">tabs</span>.<span class="title function_">executeScript</span>(tabId, &#123; <span class="attr">file</span>: <span class="string">&quot;some-script.js&quot;</span> &#125;);</span><br></pre></td></tr></table></figure><h4 id="18-2-动态注入-CSS"><a href="#18-2-动态注入-CSS" class="headerlink" title="18.2. 动态注入 CSS"></a>18.2. 动态注入 CSS</h4><p>示例<code>manifest.json</code>配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;动态CSS注入演示&quot;</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;permissions&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;tabs&quot;</span>, <span class="string">&quot;http://*/*&quot;</span>, <span class="string">&quot;https://*/*&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JS 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态执行CSS代码，TODO，这里有待验证</span></span><br><span class="line">chrome.<span class="property">tabs</span>.<span class="title function_">insertCSS</span>(tabId, &#123; <span class="attr">code</span>: <span class="string">&quot;xxx&quot;</span> &#125;);</span><br><span class="line"><span class="comment">// 动态执行CSS文件</span></span><br><span class="line">chrome.<span class="property">tabs</span>.<span class="title function_">insertCSS</span>(tabId, &#123; <span class="attr">file</span>: <span class="string">&quot;some-style.css&quot;</span> &#125;);</span><br></pre></td></tr></table></figure><h4 id="18-3-获取当前窗口-ID"><a href="#18-3-获取当前窗口-ID" class="headerlink" title="18.3. 获取当前窗口 ID"></a>18.3. 获取当前窗口 ID</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chrome.<span class="property">windows</span>.<span class="title function_">getCurrent</span>(<span class="keyword">function</span> (<span class="params">currentWindow</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;当前窗口ID：&quot;</span> + currentWindow.<span class="property">id</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="18-4-获取当前标签页-ID"><a href="#18-4-获取当前标签页-ID" class="headerlink" title="18.4 获取当前标签页 ID"></a>18.4 获取当前标签页 ID</h4><p>一般有 2 种方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前选项卡ID</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCurrentTabId</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  chrome.<span class="property">tabs</span>.<span class="title function_">query</span>(&#123; <span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">currentWindow</span>: <span class="literal">true</span> &#125;, <span class="keyword">function</span> (<span class="params">tabs</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (callback) <span class="title function_">callback</span>(tabs.<span class="property">length</span> ? tabs[<span class="number">0</span>].<span class="property">id</span> : <span class="literal">null</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取当前选项卡 id 的另一种方法，大部分时候都类似，只有少部分时候会不一样（例如当窗口最小化时）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前选项卡ID</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCurrentTabId2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  chrome.<span class="property">windows</span>.<span class="title function_">getCurrent</span>(<span class="keyword">function</span> (<span class="params">currentWindow</span>) &#123;</span><br><span class="line">    chrome.<span class="property">tabs</span>.<span class="title function_">query</span>(</span><br><span class="line">      &#123; <span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">windowId</span>: currentWindow.<span class="property">id</span> &#125;,</span><br><span class="line">      <span class="keyword">function</span> (<span class="params">tabs</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (callback) <span class="title function_">callback</span>(tabs.<span class="property">length</span> ? tabs[<span class="number">0</span>].<span class="property">id</span> : <span class="literal">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18-5-本地存储"><a href="#18-5-本地存储" class="headerlink" title="18.5. 本地存储"></a>18.5. 本地存储</h4><p>本地存储建议用<code>chrome.storage</code>而不是普通的<code>localStorage</code>，区别有好几点，个人认为最重要的 2 点区别是：</p><ul><li><code>chrome.storage</code>是针对插件全局的，即使你在<code>background</code>中保存的数据，在<code>content-script</code>也能获取到；</li><li><code>chrome.storage.sync</code>可以跟随当前登录用户自动同步，这台电脑修改的设置会自动同步到其它电脑，很方便，如果没有登录或者未联网则先保存到本地，等登录了再同步至网络；</li></ul><p>需要声明<code>storage</code>权限，有<code>chrome.storage.sync</code>和<code>chrome.storage.local</code>2 种方式可供选择，使用示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取数据，第一个参数是指定要读取的key以及设置默认值</span></span><br><span class="line">chrome.<span class="property">storage</span>.<span class="property">sync</span>.<span class="title function_">get</span>(&#123; <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;, <span class="keyword">function</span> (<span class="params">items</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(items.<span class="property">color</span>, items.<span class="property">age</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 保存数据</span></span><br><span class="line">chrome.<span class="property">storage</span>.<span class="property">sync</span>.<span class="title function_">set</span>(&#123; <span class="attr">color</span>: <span class="string">&quot;blue&quot;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;保存成功！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="18-6-webRequest"><a href="#18-6-webRequest" class="headerlink" title="18.6. webRequest"></a>18.6. webRequest</h4><p>通过 webRequest 系列 API 可以对 HTTP 请求进行任性地修改、定制，这里通过<code>beforeRequest</code>来简单演示一下它的冰山一角：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//manifest.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 权限申请</span></span><br><span class="line">    <span class="string">&quot;permissions&quot;</span>:</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;webRequest&quot;</span>, <span class="comment">// web请求</span></span><br><span class="line">        <span class="string">&quot;webRequestBlocking&quot;</span>, <span class="comment">// 阻塞式web请求</span></span><br><span class="line">        <span class="string">&quot;storage&quot;</span>, <span class="comment">// 插件本地存储</span></span><br><span class="line">        <span class="string">&quot;http://*/*&quot;</span>, <span class="comment">// 可以通过executeScript或者insertCSS访问的网站</span></span><br><span class="line">        <span class="string">&quot;https://*/*&quot;</span> <span class="comment">// 可以通过executeScript或者insertCSS访问的网站</span></span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// background.js</span></span><br><span class="line"><span class="comment">// 是否显示图片</span></span><br><span class="line"><span class="keyword">var</span> showImage;</span><br><span class="line">chrome.<span class="property">storage</span>.<span class="property">sync</span>.<span class="title function_">get</span>(&#123;<span class="attr">showImage</span>: <span class="literal">true</span>&#125;, <span class="keyword">function</span>(<span class="params">items</span>) &#123;</span><br><span class="line">    showImage = items.<span class="property">showImage</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// web请求监听，最后一个参数表示阻塞式，需单独声明权限：webRequestBlocking</span></span><br><span class="line">chrome.<span class="property">webRequest</span>.<span class="property">onBeforeRequest</span>.<span class="title function_">addListener</span>(<span class="function"><span class="params">details</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// cancel 表示取消本次请求</span></span><br><span class="line">    <span class="keyword">if</span>(!showImage &amp;&amp; details.<span class="property">type</span> == <span class="string">&#x27;image&#x27;</span>) <span class="keyword">return</span> &#123;<span class="attr">cancel</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">    <span class="comment">// 简单的音视频检测</span></span><br><span class="line">    <span class="comment">// 大部分网站视频的type并不是media，且视频做了防下载处理，所以这里仅仅是为了演示效果，无实际意义</span></span><br><span class="line">    <span class="keyword">if</span>(details.<span class="property">type</span> == <span class="string">&#x27;media&#x27;</span>) &#123;</span><br><span class="line">        chrome.<span class="property">notifications</span>.<span class="title function_">create</span>(<span class="literal">null</span>, &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;basic&#x27;</span>,</span><br><span class="line">            <span class="attr">iconUrl</span>: <span class="string">&#x27;img/icon.png&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;检测到音视频&#x27;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;音视频地址：&#x27;</span> + details.<span class="property">url</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, &#123;<span class="attr">urls</span>: [<span class="string">&quot;&lt;all_urls&gt;&quot;</span>]&#125;, [<span class="string">&quot;blocking&quot;</span>]);</span><br></pre></td></tr></table></figure><h4 id="18-7-国际化"><a href="#18-7-国际化" class="headerlink" title="18.7. 国际化"></a>18.7. 国际化</h4><p>插件根目录新建一个名为<code>_locales</code>的文件夹，再在下面新建一些语言的文件夹，如<code>en</code>、<code>zh_CN</code>、<code>zh_TW</code>，然后再在每个文件夹放入一个<code>messages.json</code>，同时必须在清单文件中设置<code>default_locale</code>。</p><p><code>_locales\en\messages.json</code>内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;pluginDesc&quot;</span>: &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;A simple chrome extension demo&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&quot;helloWorld&quot;</span>: &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World!&quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_locales\zh_CN\messages.json</code>内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;pluginDesc&quot;</span>: &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;一个简单的Chrome插件demo&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&quot;helloWorld&quot;</span>: &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;你好啊，世界！&quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>manifest.json</code>和<code>CSS</code>文件中通过<code>__MSG_messagename__</code>引入，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;__MSG_pluginDesc__&quot;</span>,</span><br><span class="line">    <span class="comment">// 默认语言</span></span><br><span class="line">    <span class="string">&quot;default_locale&quot;</span>: <span class="string">&quot;zh_CN&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JS 中则直接<code>chrome.i18n.getMessage(&quot;helloWorld&quot;)</code>。</p><p>测试时，通过给 chrome 建立一个不同的快捷方式<code>chrome.exe --lang=en</code>来切换语言，如：</p><p><img src="https://upload-images.jianshu.io/upload_images/23753054-f7913a40eac13f49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/422/format/webp" alt="img"></p><p>英文效果：<img src="https://upload-images.jianshu.io/upload_images/23753054-1fb17212e09cd1ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/492/format/webp" alt="img"></p><p>中文效果：<img src="https://upload-images.jianshu.io/upload_images/23753054-a50d43b22cfcdbb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/507/format/webp" alt="img"></p><h4 id="18-8-API-总结"><a href="#18-8-API-总结" class="headerlink" title="18.8. API 总结"></a>18.8. API 总结</h4><p>比较常用用的一些 API 系列：</p><ul><li>chrome.tabs</li><li>chrome.runtime</li><li>chrome.webRequest</li><li>chrome.window</li><li>chrome.storage</li><li>chrome.contextMenus</li><li>chrome.devtools</li><li>chrome.extension</li></ul><hr><p>作者：William92<br>链接：<a href="https://www.jianshu.com/p/72727465ab86">https://www.jianshu.com/p/72727465ab86</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-什么是-Chrome-插件&quot;&gt;&lt;a href=&quot;#1-什么是-Chrome-插件&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是 Chrome 插件&quot;&gt;&lt;/a&gt;1. 什么是 Chrome 插件&lt;/h3&gt;&lt;p&gt;Chrome 插件是一个用 We</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://wade9264.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Chrome" scheme="https://wade9264.github.io/tags/Chrome/"/>
    
  </entry>
  
</feed>
